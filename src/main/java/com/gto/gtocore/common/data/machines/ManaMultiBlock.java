package com.gto.gtocore.common.data.machines;

import com.gto.gtocore.GTOCore;
import com.gto.gtocore.api.machine.part.GTOPartAbility;
import com.gto.gtocore.common.data.GTOBlocks;
import com.gto.gtocore.common.data.GTOMaterials;
import com.gto.gtocore.common.data.GTORecipeModifiers;
import com.gto.gtocore.common.data.GTORecipeTypes;
import com.gto.gtocore.common.machine.mana.multiblock.ManaAlloyBlastSmelterMachine;
import com.gto.gtocore.common.machine.mana.multiblock.ManaDistributorMachine;
import com.gto.gtocore.common.machine.mana.multiblock.ManaMultiblockMachine;
import com.gto.gtocore.utils.RLUtils;
import com.gto.gtocore.utils.RegistriesUtils;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.GTValues;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.common.data.GTMachines;
import com.gregtechceu.gtceu.common.data.GTRecipeTypes;

import net.minecraft.world.level.block.Blocks;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gto.gtocore.utils.register.MachineRegisterUtils.multiblock;

public interface ManaMultiBlock {

    static void init() {}

    MultiblockMachineDefinition MANA_ALLOY_BLAST_SMELTER = multiblock("mana_alloy_blast_smelter", "魔力合金炉", ManaAlloyBlastSmelterMachine::new)
            .nonYAxisRotation()
            .tooltipsKey("gtceu.universal.tooltip.parallel", 8)
            .alwaysTryModifyRecipe(true)
            .recipe(GTORecipeTypes.ALLOY_BLAST_RECIPES)
            .block(GTOBlocks.MANASTEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("     AAA     ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "     CCC     ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("   AABBBAA   ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   CC   ", "    A        ", "   CC        ", "             ", "             ", "             ", "             ")
                    .aisle("  ABBBBBBBA  ", "  A       A  ", "  A       A  ", "  A       A  ", "  A       A  ", "  A       A  ", "  A       C  ", "  A          ", "  A          ", "  A          ", "  C          ", "             ", "             ", "             ")
                    .aisle(" ABBBBBBBBBA ", "             ", "             ", "             ", "             ", "           C ", "             ", "             ", "             ", "             ", "             ", " C           ", "             ", "             ")
                    .aisle(" ABBBCCCBBBA ", " A   EEE   A ", " A   EEE   A ", " A   EEE   A ", " A   EEE   A ", " A   EEE   C ", " A   EEE     ", " A   EEE     ", " A   CEE     ", " A   FCE     ", " A   F C     ", " C   F F     ", "     F F     ", "     CCC     ")
                    .aisle("ABBBCCCCCBBBA", "    EGHGE    ", "    EGHGE    ", "    EGHGE    ", "    EGHGE   C", "    EGHGE    ", "    EGHGE    ", "    CGHGE    ", "    FGHGE    ", "    FGHGE    ", "    FGHGE    ", "    FGHGC    ", "    FGHGF    ", "    CCCCC    ")
                    .aisle("ABBBCCCCCBBBA", "    EH HE   A", "    EH HE   A", "    EH HE   A", "    EH HE   C", "    EH HE    ", "    CH HE    ", "     H HE    ", "     H HE    ", "     H HE    ", "     H HE    ", "     H HE    ", "     H HC    ", "    CCICC    ")
                    .aisle("ABBBCCCCCBBBA", "    EGHGC    ", "    EGHGF    ", "    EGHGF    ", "    EGHGF   C", "    CGHGF    ", "    FGHGF    ", "    FGHGF    ", "    FGHGF    ", "    FGHGF    ", "    FGHGF    ", "    FGHGF    ", "    FGHGF    ", "    CCCCC    ")
                    .aisle(" ABBBCCCBBBA ", "     EEE   A ", "     EEC   A ", "     ECF   C ", "     C F     ", "     F F     ", "     F F     ", "     F F     ", "     F F     ", "     F F     ", "     F F     ", "     F F     ", "     F F     ", "     CCC     ")
                    .aisle(" ABBBBBBBBBA ", "             ", "             ", "           C ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("  ABBBCBBBA  ", "      D   A  ", "          C  ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("   AABBBAA   ", "         C   ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("     AAA     ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .where('A', blocks(RegistriesUtils.getBlock("botania:livingrock")))
                    .where('B', blocks(GTOBlocks.MANASTEEL_CASING.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTOBlocks.MANASTEEL_CASING.get()))
                    .where('D', controller(blocks(definition.get())))
                    .where('E', blocks(RegistriesUtils.getBlock("botania:elf_glass")))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:livingrock_wall")))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Gaiasteel)))
                    .where('H', heatingCoils())
                    .where('I', blocks(GTMachines.MUFFLER_HATCH[GTValues.IV].get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/manasteel_casing"), GTCEu.id("block/multiblock/gcym/blast_alloy_smelter"))
            .register();

    MultiblockMachineDefinition BASE_MANA_DISTRIBUTOR = multiblock("base_mana_distributor", "基础魔力分配器", ManaDistributorMachine.create(16, 8))
            .nonYAxisRotation()
            .tooltipsText("Automatically provides mana to nearby mana machines", "自动为附近的魔力机器提供魔力")
            .tooltipsKey("gtocore.machine.maximum_amount", 16)
            .tooltipsKey("gui.ae2.WirelessRange", 8)
            .recipe(GTRecipeTypes.DUMMY_RECIPES)
            .block(RegistriesUtils.getSupplierBlock("botania:livingrock_bricks"))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AbA ", "     ", "     ", "     ", "     ", " ACA ")
                    .aisle("ADDDA", " EBE ", " F F ", " A A ", " A A ", "ABEBA")
                    .aisle("bD Db", " BEB ", "  G  ", "  H  ", "  I  ", "CEIEC")
                    .aisle("ADDDA", " EBE ", " F F ", " A A ", " A A ", "ABEBA")
                    .aisle(" A~A ", "     ", "     ", "     ", "     ", " ACA ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks_wall")))
                    .where('B', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")))
                    .where('b', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")).or(abilities(GTOPartAbility.INPUT_MANA)).or(abilities(GTOPartAbility.EXTRACT_MANA)))
                    .where('C', blocks(Blocks.BIRCH_FENCE_GATE))
                    .where('D', blocks(RegistriesUtils.getBlock("botania:livingrock")))
                    .where('E', blocks(RegistriesUtils.getBlock("botania:chiseled_livingrock_bricks")))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:apothecary_livingrock")))
                    .where('G', blocks(RegistriesUtils.getBlock("botania:mana_pool")))
                    .where('H', blocks(RegistriesUtils.getBlock("botania:mana_pylon")))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:mana_glass")))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(RLUtils.bot("block/livingrock_bricks"), GTOCore.id("block/multiblock/mana"))
            .register();

    MultiblockMachineDefinition ADVANCED_MANA_DISTRIBUTOR = multiblock("advanced_mana_distributor", "进阶魔力分配器", ManaDistributorMachine.create(64, 32))
            .nonYAxisRotation()
            .tooltipsKey("gtocore.machine.base_mana_distributor.tooltip.0")
            .tooltipsKey("gtocore.machine.maximum_amount", 64)
            .tooltipsKey("gui.ae2.WirelessRange", 32)
            .recipe(GTRecipeTypes.DUMMY_RECIPES)
            .block(RegistriesUtils.getSupplierBlock("botania:livingrock_bricks"))
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("  BcccB  ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle(" BAAAAAB ", " BAB BAB ", "         ", "         ", "         ", "         ", "  B   B  ", " BCCBCCB ", "         ", "         ")
                    .aisle("BAAAAAAAB", " AAAcAAA ", "  D   D  ", "  B   B  ", "  E   E  ", "  B   B  ", " BCCFCCB ", " CCB BCC ", "   GGG   ", "         ")
                    .aisle("cAAAAAAAc", " BAFCFAB ", "         ", "         ", "         ", "         ", "  C   C  ", " CB   BC ", "  GGGGG  ", "    G    ")
                    .aisle("cAAAAAAAc", "  cCFCc  ", "    H    ", "    I    ", "         ", "         ", "  F   F  ", " B     B ", "  GGGGG  ", "   GGG   ")
                    .aisle("cAAAAAAAc", " BAFCFAB ", "         ", "         ", "         ", "         ", "  C   C  ", " CB   BC ", "  GGGGG  ", "    G    ")
                    .aisle("BAAAAAAAB", " AAA~AAA ", "  D   D  ", "  B   B  ", "  E   E  ", "  B   B  ", " BCCFCCB ", " CCB BCC ", "   GGG   ", "         ")
                    .aisle(" BAAAAAB ", " BAB BAB ", "         ", "         ", "         ", "         ", "  B   B  ", " BCCBCCB ", "         ", "         ")
                    .aisle("  BcccB  ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(RegistriesUtils.getBlock("botania:livingrock")))
                    .where('B', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks_wall")))
                    .where('C', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")))
                    .where('c', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")).or(abilities(GTOPartAbility.INPUT_MANA)).or(abilities(GTOPartAbility.EXTRACT_MANA)))
                    .where('D', blocks(RegistriesUtils.getBlock("botania:apothecary_livingrock")))
                    .where('E', blocks(RegistriesUtils.getBlock("botania:mana_pylon")))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:chiseled_livingrock_bricks")))
                    .where('G', blocks(RegistriesUtils.getBlock("botania:mana_glass")))
                    .where('H', blocks(RegistriesUtils.getBlock("botania:mana_pool")))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:natura_pylon")))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(RLUtils.bot("block/livingrock_bricks"), GTOCore.id("block/multiblock/mana"))
            .register();

    MultiblockMachineDefinition MANA_INFUSER = multiblock("mana_infuser", "魔力灌注机", ManaMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeModifiers(GTORecipeModifiers.HATCH_PARALLEL)
            .recipe(GTORecipeTypes.MANA_INFUSER_RECIPES)
            .block(GTOBlocks.MANASTEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("    AAA ", "    ABA ", "    ABA ", "    ABA ", "    AAA ", "        ", "        ")
                    .aisle("AAAAAAAA", "AAAA   A", " AAA   A", "   A   A", "   AAAAA", "        ", "        ")
                    .aisle("ADDAAAAA", "AEEA F B", "AEAA F B", " G A F B", " G AAEAA", " G   G  ", " GGGGG  ")
                    .aisle("AAAAAAAA", "ACAA   A", " AAA   A", "   A   A", "   AAAAA", "        ", "        ")
                    .aisle("    AAA ", "    ABA ", "    ABA ", "    ABA ", "    AAA ", "        ", "        ")
                    .where('A', blocks(GTOBlocks.MANASTEEL_CASING.get())
                            .or(abilities(GTOPartAbility.INPUT_MANA).setMaxGlobalLimited(4, 1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1, 1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1, 1)))
                    .where('B', blocks(RegistriesUtils.getBlock("botania:mana_glass")))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', blocks(GTOBlocks.MANASTEEL_CASING.get()))
                    .where('E', blocks(RegistriesUtils.getBlock("botania:mana_fluxfield")))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:mana_distributor")))
                    .where('G', blocks(RegistriesUtils.getBlock("botania:livingrock")))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/manasteel_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    MultiblockMachineDefinition MANA_CONDENSER = multiblock("mana_condenser", "魔力凝聚器", ManaMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeModifiers(GTORecipeModifiers.HATCH_PARALLEL)
            .recipe(GTORecipeTypes.MANA_CONDENSER_RECIPES)
            .block(GTOBlocks.MANASTEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AAAAA ", " AAAAA ", " ACCCA ", " ACCCA ", " AAAAA ", " A   A ")
                    .aisle("AADDDAA", "AEFFFEA", "AE   EA", "AE   EA", "AE G EA", "AAAAAAA")
                    .aisle("ADDDDDA", "AFHIHFA", "C     C", "C     C", "A     A", " ADDDA ")
                    .aisle("ADDDDDA", "AFIJIFA", "C  K  C", "C     C", "AG K GA", " ADDDA ")
                    .aisle("ADDDDDA", "AFHIHFA", "C     C", "C     C", "A     A", " ADDDA ")
                    .aisle("AADDDAA", "AEFFFEA", "AE   EA", "AE   EA", "AE G EA", "AAAAAAA")
                    .aisle(" AAAAA ", " AABAA ", " ACCCA ", " ACCCA ", " AAAAA ", " A   A ")
                    .where('A', blocks(GTOBlocks.MANASTEEL_CASING.get())
                            .or(abilities(GTOPartAbility.INPUT_MANA).setMaxGlobalLimited(8, 1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1, 1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1, 1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(3, 1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(RegistriesUtils.getBlock("botania:mana_glass")))
                    .where('D', blocks(RegistriesUtils.getBlock("botania:elf_quartz")))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Alfsteel)))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:terra_plate")))
                    .where('G', blocks(RegistriesUtils.getBlock("botania:prism")))
                    .where('H', blocks(RegistriesUtils.getBlock("botania:fabulous_pool")))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:runic_altar")))
                    .where('J', blocks(RegistriesUtils.getBlock("botania:bifrost_perm")))
                    .where('K', blocks(RegistriesUtils.getBlock("botania:gaia_pylon")))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/manasteel_casing"), GTCEu.id("block/multiblock/gcym/large_mixer"))
            .register();

    MultiblockMachineDefinition ELF_EXCHANGE = multiblock("elf_exchange", "精灵交易所", ManaMultiblockMachine::new)
            .langValue("ELF Exchange")
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeModifiers(GTORecipeModifiers.HATCH_PARALLEL)
            .recipe(GTORecipeTypes.ELF_EXCHANGE_RECIPES)
            .block(GTOBlocks.MANASTEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" BBB ", " BBB ", " BBB ", " BBB ", "     ", "     ")
                    .aisle("GEEEG", "DGGGD", "DGJGD", "DGGGD", " BBB ", "     ")
                    .aisle("GEEEG", "DIIID", "DIFID", "DIIID", "DDDDD", "DDDDD")
                    .aisle("GEEEG", "D   D", "H F H", "D   D", " DHD ", "     ")
                    .aisle("GEEEG", "D   D", "H F H", "D   D", " DHD ", "     ")
                    .aisle("GEEEG", "D   D", "H F H", "D   D", " DHD ", "     ")
                    .aisle("GEEEG", "D   D", "H F H", "D   D", " DHD ", "     ")
                    .aisle("DEEED", "D   D", "D F D", "D   D", "DDDDD", "     ")
                    .aisle("ABBBA", "ABBBA", "ABCBA", " BBB ", "     ", "     ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Manasteel)))
                    .where('B', blocks(GTOBlocks.MANASTEEL_CASING.get())
                            .or(abilities(GTOPartAbility.INPUT_MANA).setMaxGlobalLimited(2, 1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1, 1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2, 1)))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', blocks(RegistriesUtils.getBlock("botania:polished_livingrock")))
                    .where('E', blocks(GTOBlocks.MANASTEEL_CASING.get()))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:bifrost_perm")))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Elementium)))
                    .where('H', blocks(RegistriesUtils.getBlock("botania:elf_glass")))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:alfheim_portal")))
                    .where('J', blocks(RegistriesUtils.getBlock("botania:dragonstone_block")))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/manasteel_casing"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();
}
