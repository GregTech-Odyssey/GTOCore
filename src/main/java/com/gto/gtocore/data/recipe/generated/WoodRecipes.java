package com.gto.gtocore.data.recipe.generated;

import com.gto.gtocore.GTOCore;
import com.gto.gtocore.utils.RegistriesUtils;
import com.gto.gtocore.utils.TagUtils;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.data.tag.TagUtil;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.gregtechceu.gtceu.common.data.GTItems;
import com.gregtechceu.gtceu.common.data.GTMaterials;
import com.gregtechceu.gtceu.data.recipe.WoodTypeEntry;

import net.minecraft.data.recipes.FinishedRecipe;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.material.Fluids;
import net.minecraftforge.fluids.FluidStack;

import biomesoplenty.api.item.BOPItems;
import com.kyanite.deeperdarker.DeeperDarker;
import com.kyanite.deeperdarker.content.DDBlocks;
import earth.terrarium.adastra.AdAstra;
import earth.terrarium.adastra.common.registry.ModBlocks;
import vazkii.botania.api.BotaniaAPI;
import vazkii.botania.common.block.BotaniaBlocks;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

import static com.gto.gtocore.common.data.GTORecipeTypes.TREE_GROWTH_SIMULATOR_RECIPES;

public interface WoodRecipes {

    static List<WoodTypeEntry> getEntries() {
        List<WoodTypeEntry> entries = new ArrayList<>();
        entries.add(new WoodTypeEntry.Builder("minecraft", "oak")
                .planks(Items.OAK_PLANKS, "oak_planks")
                .log(Items.OAK_LOG).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_OAK_LOG)
                .wood(Items.OAK_WOOD)
                .strippedWood(Items.STRIPPED_OAK_WOOD)
                .door(Items.OAK_DOOR, "oak_door")
                .trapdoor(Items.OAK_TRAPDOOR, "oak_trapdoor")
                .slab(Items.OAK_SLAB, "oak_slab")
                .fence(Items.OAK_FENCE, "oak_fence")
                .fenceGate(Items.OAK_FENCE_GATE, "oak_fence_gate")
                .stairs(Items.OAK_STAIRS, "oak_stairs")
                .boat(Items.OAK_BOAT, "oak_boat")
                .chestBoat(Items.OAK_CHEST_BOAT, "oak_chest_boat")
                .sign(Items.OAK_SIGN, "oak_sign")
                .hangingSign(Items.OAK_HANGING_SIGN, "oak_hanging_sign")
                .button(Items.OAK_BUTTON, "oak_button")
                .pressurePlate(Items.OAK_PRESSURE_PLATE, "oak_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder("minecraft", "spruce")
                .planks(Items.SPRUCE_PLANKS, "spruce_planks")
                .log(Items.SPRUCE_LOG).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_SPRUCE_LOG)
                .wood(Items.SPRUCE_WOOD)
                .strippedWood(Items.STRIPPED_SPRUCE_WOOD)
                .door(Items.SPRUCE_DOOR, "spruce_door")
                .trapdoor(Items.SPRUCE_TRAPDOOR, "spruce_trapdoor")
                .slab(Items.SPRUCE_SLAB, "spruce_slab")
                .fence(Items.SPRUCE_FENCE, "spruce_fence")
                .fenceGate(Items.SPRUCE_FENCE_GATE, "spruce_fence_gate")
                .stairs(Items.SPRUCE_STAIRS, "spruce_stairs")
                .boat(Items.SPRUCE_BOAT, "spruce_boat")
                .chestBoat(Items.SPRUCE_CHEST_BOAT, "spruce_chest_boat")
                .sign(Items.SPRUCE_SIGN, "spruce_sign")
                .hangingSign(Items.SPRUCE_HANGING_SIGN, "spruce_hanging_sign")
                .button(Items.SPRUCE_BUTTON, "spruce_button")
                .pressurePlate(Items.SPRUCE_PRESSURE_PLATE, "spruce_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder("minecraft", "birch")
                .planks(Items.BIRCH_PLANKS, "birch_planks")
                .log(Items.BIRCH_LOG).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_BIRCH_LOG)
                .wood(Items.BIRCH_WOOD)
                .strippedWood(Items.STRIPPED_BIRCH_WOOD)
                .door(Items.BIRCH_DOOR, "birch_door")
                .trapdoor(Items.BIRCH_TRAPDOOR, "birch_trapdoor")
                .slab(Items.BIRCH_SLAB, "birch_slab")
                .fence(Items.BIRCH_FENCE, "birch_fence")
                .fenceGate(Items.BIRCH_FENCE_GATE, "birch_fence_gate")
                .stairs(Items.BIRCH_STAIRS, "birch_stairs")
                .boat(Items.BIRCH_BOAT, "birch_boat")
                .chestBoat(Items.BIRCH_CHEST_BOAT, "birch_chest_boat")
                .sign(Items.BIRCH_SIGN, "birch_sign")
                .hangingSign(Items.BIRCH_HANGING_SIGN, "birch_hanging_sign")
                .button(Items.BIRCH_BUTTON, "birch_button")
                .pressurePlate(Items.BIRCH_PRESSURE_PLATE, "birch_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder("minecraft", "jungle")
                .planks(Items.JUNGLE_PLANKS, "jungle_planks")
                .log(Items.JUNGLE_LOG).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_JUNGLE_LOG)
                .wood(Items.JUNGLE_WOOD)
                .strippedWood(Items.STRIPPED_JUNGLE_WOOD)
                .door(Items.JUNGLE_DOOR, "jungle_door")
                .trapdoor(Items.JUNGLE_TRAPDOOR, "jungle_trapdoor")
                .slab(Items.JUNGLE_SLAB, "jungle_slab")
                .fence(Items.JUNGLE_FENCE, "jungle_fence")
                .fenceGate(Items.JUNGLE_FENCE_GATE, "jungle_fence_gate")
                .stairs(Items.JUNGLE_STAIRS, "jungle_stairs")
                .boat(Items.JUNGLE_BOAT, "jungle_boat")
                .chestBoat(Items.JUNGLE_CHEST_BOAT, "jungle_chest_boat")
                .sign(Items.JUNGLE_SIGN, "jungle_sign")
                .hangingSign(Items.JUNGLE_HANGING_SIGN, "jungle_hanging_sign")
                .button(Items.JUNGLE_BUTTON, "jungle_button")
                .pressurePlate(Items.JUNGLE_PRESSURE_PLATE, "jungle_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder("minecraft", "acacia")
                .planks(Items.ACACIA_PLANKS, "acacia_planks")
                .log(Items.ACACIA_LOG).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_ACACIA_LOG)
                .wood(Items.ACACIA_WOOD)
                .strippedWood(Items.STRIPPED_ACACIA_WOOD)
                .door(Items.ACACIA_DOOR, "acacia_door")
                .trapdoor(Items.ACACIA_TRAPDOOR, "acacia_trapdoor")
                .slab(Items.ACACIA_SLAB, "acacia_slab")
                .fence(Items.ACACIA_FENCE, "acacia_fence")
                .fenceGate(Items.ACACIA_FENCE_GATE, "acacia_fence_gate")
                .stairs(Items.ACACIA_STAIRS, "acacia_stairs")
                .boat(Items.ACACIA_BOAT, "acacia_boat")
                .chestBoat(Items.ACACIA_CHEST_BOAT, "acacia_chest_boat")
                .sign(Items.ACACIA_SIGN, "acacia_sign")
                .hangingSign(Items.ACACIA_HANGING_SIGN, "acacia_hanging_sign")
                .button(Items.ACACIA_BUTTON, "acacia_button")
                .pressurePlate(Items.ACACIA_PRESSURE_PLATE, "acacia_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder("minecraft", "dark_oak")
                .planks(Items.DARK_OAK_PLANKS, "dark_oak_planks")
                .log(Items.DARK_OAK_LOG).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_DARK_OAK_LOG)
                .wood(Items.DARK_OAK_WOOD)
                .strippedWood(Items.STRIPPED_DARK_OAK_WOOD)
                .door(Items.DARK_OAK_DOOR, "dark_oak_door")
                .trapdoor(Items.DARK_OAK_TRAPDOOR, "dark_oak_trapdoor")
                .slab(Items.DARK_OAK_SLAB, "dark_oak_slab")
                .fence(Items.DARK_OAK_FENCE, "dark_oak_fence")
                .fenceGate(Items.DARK_OAK_FENCE_GATE, "dark_oak_fence_gate")
                .stairs(Items.DARK_OAK_STAIRS, "dark_oak_stairs")
                .boat(Items.DARK_OAK_BOAT, "dark_oak_boat")
                .chestBoat(Items.DARK_OAK_CHEST_BOAT, "dark_oak_chest_boat")
                .sign(Items.DARK_OAK_SIGN, "dark_oak_sign")
                .hangingSign(Items.DARK_OAK_HANGING_SIGN, "dark_oak_hanging_sign")
                .button(Items.DARK_OAK_BUTTON, "dark_oak_button")
                .pressurePlate(Items.DARK_OAK_PRESSURE_PLATE, "dark_oak_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder("minecraft", "bamboo")
                .planks(Items.BAMBOO_PLANKS, "bamboo_planks")
                .logTag(TagUtil.createItemTag("bamboo_blocks", true))
                .log(Items.BAMBOO_BLOCK).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_BAMBOO_BLOCK)
                .door(Items.BAMBOO_DOOR, "bamboo_door")
                .trapdoor(Items.BAMBOO_TRAPDOOR, "bamboo_trapdoor")
                .slab(Items.BAMBOO_SLAB, "bamboo_slab")
                .fence(Items.BAMBOO_FENCE, "bamboo_fence")
                .fenceGate(Items.BAMBOO_FENCE_GATE, "bamboo_fence_gate")
                .stairs(Items.BAMBOO_STAIRS, "bamboo_stairs")
                .boat(Items.BAMBOO_RAFT, "bamboo_raft")
                .chestBoat(Items.BAMBOO_CHEST_RAFT, "bamboo_chest_raft")
                .sign(Items.BAMBOO_SIGN, "bamboo_sign")
                .hangingSign(Items.BAMBOO_HANGING_SIGN, "bamboo_hanging_sign")
                .button(Items.BAMBOO_BUTTON, "bamboo_button")
                .pressurePlate(Items.BAMBOO_PRESSURE_PLATE, "bamboo_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder("minecraft", "cherry")
                .planks(Items.CHERRY_PLANKS, "cherry_planks")
                .log(Items.CHERRY_LOG).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_CHERRY_LOG)
                .wood(Items.CHERRY_WOOD)
                .strippedWood(Items.STRIPPED_CHERRY_WOOD)
                .door(Items.CHERRY_DOOR, "cherry_door")
                .trapdoor(Items.CHERRY_TRAPDOOR, "cherry_trapdoor")
                .slab(Items.CHERRY_SLAB, "cherry_slab")
                .fence(Items.CHERRY_FENCE, "cherry_fence")
                .fenceGate(Items.CHERRY_FENCE_GATE, "cherry_fence_gate")
                .stairs(Items.CHERRY_STAIRS, "cherry_stairs")
                .boat(Items.CHERRY_BOAT, "cherry_boat")
                .chestBoat(Items.CHERRY_CHEST_BOAT, "cherry_chest_boat")
                .sign(Items.CHERRY_SIGN, "cherry_sign")
                .hangingSign(Items.CHERRY_HANGING_SIGN, "cherry_hanging_sign")
                .button(Items.CHERRY_BUTTON, "cherry_button")
                .pressurePlate(Items.CHERRY_PRESSURE_PLATE, "cherry_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder("minecraft", "mangrove")
                .planks(Items.MANGROVE_PLANKS, "mangrove_planks")
                .log(Items.MANGROVE_LOG).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_MANGROVE_LOG)
                .wood(Items.MANGROVE_WOOD)
                .strippedWood(Items.STRIPPED_MANGROVE_WOOD)
                .door(Items.MANGROVE_DOOR, "mangrove_door")
                .trapdoor(Items.MANGROVE_TRAPDOOR, "mangrove_trapdoor")
                .slab(Items.MANGROVE_SLAB, "mangrove_slab")
                .fence(Items.MANGROVE_FENCE, "mangrove_fence")
                .fenceGate(Items.MANGROVE_FENCE_GATE, "mangrove_fence_gate")
                .stairs(Items.MANGROVE_STAIRS, "mangrove_stairs")
                .boat(Items.MANGROVE_BOAT, "mangrove_boat")
                .chestBoat(Items.MANGROVE_CHEST_BOAT, "mangrove_chest_boat")
                .sign(Items.MANGROVE_SIGN, "mangrove_sign")
                .hangingSign(Items.MANGROVE_HANGING_SIGN, "mangrove_hanging_sign")
                .button(Items.MANGROVE_BUTTON, "mangrove_button")
                .pressurePlate(Items.MANGROVE_PRESSURE_PLATE, "mangrove_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder("minecraft", "crimson")
                .planks(Items.CRIMSON_PLANKS, "crimson_planks")
                .logTag(TagUtil.createItemTag("crimson_stems", true))
                .log(Items.CRIMSON_STEM).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_CRIMSON_STEM)
                .wood(Items.CRIMSON_HYPHAE)
                .strippedWood(Items.STRIPPED_CRIMSON_HYPHAE)
                .door(Items.CRIMSON_DOOR, "crimson_door")
                .trapdoor(Items.CRIMSON_TRAPDOOR, "crimson_trapdoor")
                .slab(Items.CRIMSON_SLAB, "crimson_slab")
                .fence(Items.CRIMSON_FENCE, "crimson_fence")
                .fenceGate(Items.CRIMSON_FENCE_GATE, "crimson_fence_gate")
                .stairs(Items.CRIMSON_STAIRS, "crimson_stairs")
                .sign(Items.CRIMSON_SIGN, "crimson_sign")
                .hangingSign(Items.CRIMSON_HANGING_SIGN, "crimson_hanging_sign")
                .button(Items.CRIMSON_BUTTON, "crimson_button")
                .pressurePlate(Items.CRIMSON_PRESSURE_PLATE, "crimson_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder("minecraft", "warped")
                .planks(Items.WARPED_PLANKS, "warped_planks")
                .logTag(TagUtil.createItemTag("warped_stems", true))
                .log(Items.WARPED_STEM).removeCharcoalRecipe()
                .strippedLog(Items.STRIPPED_WARPED_STEM)
                .wood(Items.WARPED_HYPHAE)
                .strippedWood(Items.STRIPPED_WARPED_HYPHAE)
                .door(Items.WARPED_DOOR, "warped_door")
                .trapdoor(Items.WARPED_TRAPDOOR, "warped_trapdoor")
                .slab(Items.WARPED_SLAB, "warped_slab")
                .fence(Items.WARPED_FENCE, "warped_fence")
                .fenceGate(Items.WARPED_FENCE_GATE, "warped_fence_gate")
                .stairs(Items.WARPED_STAIRS, "warped_stairs")
                .sign(Items.WARPED_SIGN, "warped_sign")
                .hangingSign(Items.WARPED_HANGING_SIGN, "warped_hanging_sign")
                .button(Items.WARPED_BUTTON, "warped_button")
                .pressurePlate(Items.WARPED_PRESSURE_PLATE, "warped_pressure_plate")
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder(GTCEu.MOD_ID, "rubber")
                .planks(GTBlocks.RUBBER_PLANK.asItem(), null)
                .log(GTBlocks.RUBBER_LOG.asItem()).addCharcoalRecipe()
                .strippedLog(GTBlocks.STRIPPED_RUBBER_LOG.asItem())
                .wood(GTBlocks.RUBBER_WOOD.asItem())
                .strippedWood(GTBlocks.STRIPPED_RUBBER_WOOD.asItem())
                .door(GTBlocks.RUBBER_DOOR.asItem(), null)
                .trapdoor(GTBlocks.RUBBER_TRAPDOOR.asItem(), null)
                .slab(GTBlocks.RUBBER_SLAB.asItem(), null).addSlabRecipe()
                .fence(GTBlocks.RUBBER_FENCE.asItem(), null)
                .fenceGate(GTBlocks.RUBBER_FENCE_GATE.asItem(), null)
                .stairs(GTBlocks.RUBBER_STAIRS.asItem(), null).addStairsRecipe()
                .boat(GTItems.RUBBER_BOAT.asItem(), null)
                .chestBoat(GTItems.RUBBER_CHEST_BOAT.asItem(), null)
                .sign(GTBlocks.RUBBER_SIGN.asItem(), null)
                .hangingSign(GTBlocks.RUBBER_HANGING_SIGN.asItem(), null)
                .button(GTBlocks.RUBBER_BUTTON.asItem(), null)
                .pressurePlate(GTBlocks.RUBBER_PRESSURE_PLATE.asItem(), null)
                .registerAllTags()
                .registerAllUnificationInfo()
                .build());
        entries.add(new WoodTypeEntry.Builder(GTCEu.MOD_ID, "treated")
                .planks(GTBlocks.TREATED_WOOD_PLANK.asItem(), null)
                .door(GTBlocks.TREATED_WOOD_DOOR.asItem(), null)
                .trapdoor(GTBlocks.TREATED_WOOD_TRAPDOOR.asItem(), null)
                .slab(GTBlocks.TREATED_WOOD_SLAB.asItem(), null).addSlabRecipe()
                .fence(GTBlocks.TREATED_WOOD_FENCE.asItem(), null)
                .fenceGate(GTBlocks.TREATED_WOOD_FENCE_GATE.asItem(), null)
                .stairs(GTBlocks.TREATED_WOOD_STAIRS.asItem(), null).addStairsRecipe()
                .boat(GTItems.TREATED_WOOD_BOAT.asItem(), null)
                .chestBoat(GTItems.TREATED_WOOD_CHEST_BOAT.asItem(), null)
                .sign(GTBlocks.TREATED_WOOD_SIGN.asItem(), null)
                .hangingSign(GTBlocks.TREATED_WOOD_HANGING_SIGN.asItem(), null)
                .button(GTBlocks.TREATED_WOOD_BUTTON.asItem(), null)
                .pressurePlate(GTBlocks.TREATED_WOOD_PRESSURE_PLATE.asItem(), null)
                .material(GTMaterials.TreatedWood)
                .generateLogToPlankRecipe(false)
                .registerUnificationInfo(false, true, true, true, true, true, true, true, true, true)
                .build());
        entries.add(new WoodTypeEntry.Builder(AdAstra.MOD_ID, "glacian")
                .planks(ModBlocks.GLACIAN_PLANKS.get().asItem(), "glacian_planks")
                .door(ModBlocks.GLACIAN_DOOR.get().asItem(), "glacian_door")
                .trapdoor(ModBlocks.GLACIAN_TRAPDOOR.get().asItem(), "glacian_trapdoor")
                .slab(ModBlocks.GLACIAN_SLAB.get().asItem(), "glacian_slab")
                .fence(ModBlocks.GLACIAN_FENCE.get().asItem(), "glacian_fence")
                .fenceGate(ModBlocks.GLACIAN_FENCE_GATE.get().asItem(), "glacian_fence_gate")
                .stairs(ModBlocks.GLACIAN_STAIRS.get().asItem(), "glacian_stairs")
                .button(ModBlocks.GLACIAN_BUTTON.get().asItem(), "glacian_button")
                .pressurePlate(ModBlocks.GLACIAN_PRESSURE_PLATE.get().asItem(), "glacian_pressure_plate")
                .build());
        entries.add(new WoodTypeEntry.Builder(DeeperDarker.MOD_ID, "echo")
                .planks(DDBlocks.ECHO_PLANKS.get().asItem(), "echo_planks")
                .door(DDBlocks.ECHO_DOOR.get().asItem(), "echo_door")
                .trapdoor(DDBlocks.ECHO_TRAPDOOR.get().asItem(), "echo_trapdoor")
                .slab(DDBlocks.ECHO_SLAB.get().asItem(), "echo_slab")
                .fence(DDBlocks.ECHO_FENCE.get().asItem(), "echo_fence")
                .fenceGate(DDBlocks.ECHO_FENCE_GATE.get().asItem(), "echo_fence_gate")
                .stairs(DDBlocks.ECHO_STAIRS.get().asItem(), "echo_stairs")
                .button(DDBlocks.ECHO_BUTTON.get().asItem(), "echo_button")
                .pressurePlate(DDBlocks.ECHO_PRESSURE_PLATE.get().asItem(), "echo_pressure_plate")
                .build());
        entries.add(new WoodTypeEntry.Builder(DeeperDarker.MOD_ID, "bloom")
                .logTag(TagUtils.createTag(DeeperDarker.rl("bloom_stems")))
                .planks(DDBlocks.BLOOM_PLANKS.get().asItem(), "bloom_planks")
                .door(DDBlocks.BLOOM_DOOR.get().asItem(), "bloom_door")
                .trapdoor(DDBlocks.BLOOM_TRAPDOOR.get().asItem(), "bloom_trapdoor")
                .slab(DDBlocks.BLOOM_SLAB.get().asItem(), "bloom_slab")
                .fence(DDBlocks.BLOOM_FENCE.get().asItem(), "bloom_fence")
                .fenceGate(DDBlocks.BLOOM_FENCE_GATE.get().asItem(), "bloom_fence_gate")
                .stairs(DDBlocks.BLOOM_STAIRS.get().asItem(), "bloom_stairs")
                .button(DDBlocks.BLOOM_BUTTON.get().asItem(), "bloom_button")
                .pressurePlate(DDBlocks.BLOOM_PRESSURE_PLATE.get().asItem(), "bloom_pressure_plate")
                .build());
        entries.add(new WoodTypeEntry.Builder(BotaniaAPI.MODID, "livingwood")
                .planks(BotaniaBlocks.livingwoodPlanks.asItem(), "livingwood_planks")
                .log(BotaniaBlocks.livingwoodLog.asItem())
                .strippedLog(BotaniaBlocks.livingwoodLogStripped.asItem())
                .wood(BotaniaBlocks.livingwood.asItem())
                .strippedWood(BotaniaBlocks.livingwoodStripped.asItem())
                .slab(BotaniaBlocks.livingwoodPlankSlab.asItem(), "livingwood_planks_slab")
                .fence(BotaniaBlocks.livingwoodFence.asItem(), "livingwood_fence")
                .fenceGate(BotaniaBlocks.livingwoodFenceGate.asItem(), "livingwood_fence_gate")
                .stairs(BotaniaBlocks.livingwoodPlankStairs.asItem(), "livingwood_planks_stairs")
                .build());
        entries.add(new WoodTypeEntry.Builder(BotaniaAPI.MODID, "dreamwood")
                .planks(BotaniaBlocks.dreamwoodPlanks.asItem(), "dreamwood_planks")
                .log(BotaniaBlocks.dreamwoodLog.asItem())
                .strippedLog(BotaniaBlocks.dreamwoodLogStripped.asItem())
                .wood(BotaniaBlocks.dreamwood.asItem())
                .strippedWood(BotaniaBlocks.dreamwoodStripped.asItem())
                .slab(BotaniaBlocks.dreamwoodPlankSlab.asItem(), "dreamwood_planks_slab")
                .fence(BotaniaBlocks.dreamwoodFence.asItem(), "dreamwood_fence")
                .fenceGate(BotaniaBlocks.dreamwoodFenceGate.asItem(), "dreamwood_fence_gate")
                .stairs(BotaniaBlocks.dreamwoodPlankStairs.asItem(), "dreamwood_planks_stairs")
                .build());
        if (GTCEu.isModLoaded("biomesoplenty")) {
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "fir")
                    .planks(BOPItems.FIR_PLANKS, "fir_planks")
                    .log(BOPItems.FIR_LOG)
                    .strippedLog(BOPItems.STRIPPED_FIR_LOG)
                    .wood(BOPItems.FIR_WOOD)
                    .strippedWood(BOPItems.STRIPPED_FIR_WOOD)
                    .door(BOPItems.FIR_DOOR, "fir_door")
                    .trapdoor(BOPItems.FIR_TRAPDOOR, "fir_trapdoor")
                    .slab(BOPItems.FIR_SLAB, "fir_slab")
                    .fence(BOPItems.FIR_FENCE, "fir_fence")
                    .fenceGate(BOPItems.FIR_FENCE_GATE, "fir_fence_gate")
                    .stairs(BOPItems.FIR_STAIRS, "fir_stairs")
                    .boat(BOPItems.FIR_BOAT, "fir_boat")
                    .chestBoat(BOPItems.FIR_CHEST_BOAT, "fir_chest_boat")
                    .sign(BOPItems.FIR_SIGN, "fir_sign")
                    .hangingSign(BOPItems.FIR_HANGING_SIGN, "fir_hanging_sign")
                    .button(BOPItems.FIR_BUTTON, "fir_button")
                    .pressurePlate(BOPItems.FIR_PRESSURE_PLATE, "fir_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "pine")
                    .planks(BOPItems.PINE_PLANKS, "pine_planks")
                    .log(BOPItems.PINE_LOG)
                    .strippedLog(BOPItems.STRIPPED_PINE_LOG)
                    .wood(BOPItems.PINE_WOOD)
                    .strippedWood(BOPItems.STRIPPED_PINE_WOOD)
                    .door(BOPItems.PINE_DOOR, "pine_door")
                    .trapdoor(BOPItems.PINE_TRAPDOOR, "pine_trapdoor")
                    .slab(BOPItems.PINE_SLAB, "pine_slab")
                    .fence(BOPItems.PINE_FENCE, "pine_fence")
                    .fenceGate(BOPItems.PINE_FENCE_GATE, "pine_fence_gate")
                    .stairs(BOPItems.PINE_STAIRS, "pine_stairs")
                    .boat(BOPItems.PINE_BOAT, "pine_boat")
                    .chestBoat(BOPItems.PINE_CHEST_BOAT, "pine_chest_boat")
                    .sign(BOPItems.PINE_SIGN, "pine_sign")
                    .hangingSign(BOPItems.PINE_HANGING_SIGN, "pine_hanging_sign")
                    .button(BOPItems.PINE_BUTTON, "pine_button")
                    .pressurePlate(BOPItems.PINE_PRESSURE_PLATE, "pine_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "maple")
                    .planks(BOPItems.MAPLE_PLANKS, "maple_planks")
                    .log(BOPItems.MAPLE_LOG)
                    .strippedLog(BOPItems.STRIPPED_MAPLE_LOG)
                    .wood(BOPItems.MAPLE_WOOD)
                    .strippedWood(BOPItems.STRIPPED_MAPLE_WOOD)
                    .door(BOPItems.MAPLE_DOOR, "maple_door")
                    .trapdoor(BOPItems.MAPLE_TRAPDOOR, "maple_trapdoor")
                    .slab(BOPItems.MAPLE_SLAB, "maple_slab")
                    .fence(BOPItems.MAPLE_FENCE, "maple_fence")
                    .fenceGate(BOPItems.MAPLE_FENCE_GATE, "maple_fence_gate")
                    .stairs(BOPItems.MAPLE_STAIRS, "maple_stairs")
                    .boat(BOPItems.MAPLE_BOAT, "maple_boat")
                    .chestBoat(BOPItems.MAPLE_CHEST_BOAT, "maple_chest_boat")
                    .sign(BOPItems.MAPLE_SIGN, "maple_sign")
                    .hangingSign(BOPItems.MAPLE_HANGING_SIGN, "maple_hanging_sign")
                    .button(BOPItems.MAPLE_BUTTON, "maple_button")
                    .pressurePlate(BOPItems.MAPLE_PRESSURE_PLATE, "maple_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "redwood")
                    .planks(BOPItems.REDWOOD_PLANKS, "redwood_planks")
                    .log(BOPItems.REDWOOD_LOG)
                    .strippedLog(BOPItems.STRIPPED_REDWOOD_LOG)
                    .wood(BOPItems.REDWOOD_WOOD)
                    .strippedWood(BOPItems.STRIPPED_REDWOOD_WOOD)
                    .door(BOPItems.REDWOOD_DOOR, "redwood_door")
                    .trapdoor(BOPItems.REDWOOD_TRAPDOOR, "redwood_trapdoor")
                    .slab(BOPItems.REDWOOD_SLAB, "redwood_slab")
                    .fence(BOPItems.REDWOOD_FENCE, "redwood_fence")
                    .fenceGate(BOPItems.REDWOOD_FENCE_GATE, "redwood_fence_gate")
                    .stairs(BOPItems.REDWOOD_STAIRS, "redwood_stairs")
                    .boat(BOPItems.REDWOOD_BOAT, "redwood_boat")
                    .chestBoat(BOPItems.REDWOOD_CHEST_BOAT, "redwood_chest_boat")
                    .sign(BOPItems.REDWOOD_SIGN, "redwood_sign")
                    .hangingSign(BOPItems.REDWOOD_HANGING_SIGN, "redwood_hanging_sign")
                    .button(BOPItems.REDWOOD_BUTTON, "redwood_button")
                    .pressurePlate(BOPItems.REDWOOD_PRESSURE_PLATE, "redwood_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "umbran")
                    .planks(BOPItems.UMBRAN_PLANKS, "umbran_planks")
                    .log(BOPItems.UMBRAN_LOG)
                    .strippedLog(BOPItems.STRIPPED_UMBRAN_LOG)
                    .wood(BOPItems.UMBRAN_WOOD)
                    .strippedWood(BOPItems.STRIPPED_UMBRAN_WOOD)
                    .door(BOPItems.UMBRAN_DOOR, "umbran_door")
                    .trapdoor(BOPItems.UMBRAN_TRAPDOOR, "umbran_trapdoor")
                    .slab(BOPItems.UMBRAN_SLAB, "umbran_slab")
                    .fence(BOPItems.UMBRAN_FENCE, "umbran_fence")
                    .fenceGate(BOPItems.UMBRAN_FENCE_GATE, "umbran_fence_gate")
                    .stairs(BOPItems.UMBRAN_STAIRS, "umbran_stairs")
                    .boat(BOPItems.UMBRAN_BOAT, "umbran_boat")
                    .chestBoat(BOPItems.UMBRAN_CHEST_BOAT, "umbran_chest_boat")
                    .sign(BOPItems.UMBRAN_SIGN, "umbran_sign")
                    .hangingSign(BOPItems.UMBRAN_HANGING_SIGN, "umbran_hanging_sign")
                    .button(BOPItems.UMBRAN_BUTTON, "umbran_button")
                    .pressurePlate(BOPItems.UMBRAN_PRESSURE_PLATE, "umbran_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "hellbark")
                    .planks(BOPItems.HELLBARK_PLANKS, "hellbark_planks")
                    .log(BOPItems.HELLBARK_LOG)
                    .strippedLog(BOPItems.STRIPPED_HELLBARK_LOG)
                    .wood(BOPItems.HELLBARK_WOOD)
                    .strippedWood(BOPItems.STRIPPED_HELLBARK_WOOD)
                    .door(BOPItems.HELLBARK_DOOR, "hellbark_door")
                    .trapdoor(BOPItems.HELLBARK_TRAPDOOR, "hellbark_trapdoor")
                    .slab(BOPItems.HELLBARK_SLAB, "hellbark_slab")
                    .fence(BOPItems.HELLBARK_FENCE, "hellbark_fence")
                    .fenceGate(BOPItems.HELLBARK_FENCE_GATE, "hellbark_fence_gate")
                    .stairs(BOPItems.HELLBARK_STAIRS, "hellbark_stairs")
                    .boat(BOPItems.HELLBARK_BOAT, "hellbark_boat")
                    .chestBoat(BOPItems.HELLBARK_CHEST_BOAT, "hellbark_chest_boat")
                    .sign(BOPItems.HELLBARK_SIGN, "hellbark_sign")
                    .hangingSign(BOPItems.HELLBARK_HANGING_SIGN, "hellbark_hanging_sign")
                    .button(BOPItems.HELLBARK_BUTTON, "hellbark_button")
                    .pressurePlate(BOPItems.HELLBARK_PRESSURE_PLATE, "hellbark_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "empyreal")
                    .planks(BOPItems.EMPYREAL_PLANKS, "empyreal_planks")
                    .log(BOPItems.EMPYREAL_LOG)
                    .strippedLog(BOPItems.STRIPPED_EMPYREAL_LOG)
                    .wood(BOPItems.EMPYREAL_WOOD)
                    .strippedWood(BOPItems.STRIPPED_EMPYREAL_WOOD)
                    .door(BOPItems.EMPYREAL_DOOR, "empyreal_door")
                    .trapdoor(BOPItems.EMPYREAL_TRAPDOOR, "empyreal_trapdoor")
                    .slab(BOPItems.EMPYREAL_SLAB, "empyreal_slab")
                    .fence(BOPItems.EMPYREAL_FENCE, "empyreal_fence")
                    .fenceGate(BOPItems.EMPYREAL_FENCE_GATE, "empyreal_fence_gate")
                    .stairs(BOPItems.EMPYREAL_STAIRS, "empyreal_stairs")
                    .boat(BOPItems.EMPYREAL_BOAT, "empyreal_boat")
                    .chestBoat(BOPItems.EMPYREAL_CHEST_BOAT, "empyreal_chest_boat")
                    .sign(BOPItems.EMPYREAL_SIGN, "empyreal_sign")
                    .hangingSign(BOPItems.EMPYREAL_HANGING_SIGN, "empyreal_hanging_sign")
                    .button(BOPItems.EMPYREAL_BUTTON, "empyreal_button")
                    .pressurePlate(BOPItems.EMPYREAL_PRESSURE_PLATE, "empyreal_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "mahogany")
                    .planks(BOPItems.MAHOGANY_PLANKS, "mahogany_planks")
                    .log(BOPItems.MAHOGANY_LOG)
                    .strippedLog(BOPItems.STRIPPED_MAHOGANY_LOG)
                    .wood(BOPItems.MAHOGANY_WOOD)
                    .strippedWood(BOPItems.STRIPPED_MAHOGANY_WOOD)
                    .door(BOPItems.MAHOGANY_DOOR, "mahogany_door")
                    .trapdoor(BOPItems.MAHOGANY_TRAPDOOR, "mahogany_trapdoor")
                    .slab(BOPItems.MAHOGANY_SLAB, "mahogany_slab")
                    .fence(BOPItems.MAHOGANY_FENCE, "mahogany_fence")
                    .fenceGate(BOPItems.MAHOGANY_FENCE_GATE, "mahogany_fence_gate")
                    .stairs(BOPItems.MAHOGANY_STAIRS, "mahogany_stairs")
                    .boat(BOPItems.MAHOGANY_BOAT, "mahogany_boat")
                    .chestBoat(BOPItems.MAHOGANY_CHEST_BOAT, "mahogany_chest_boat")
                    .sign(BOPItems.MAHOGANY_SIGN, "mahogany_sign")
                    .hangingSign(BOPItems.MAHOGANY_HANGING_SIGN, "mahogany_hanging_sign")
                    .button(BOPItems.MAHOGANY_BUTTON, "mahogany_button")
                    .pressurePlate(BOPItems.MAHOGANY_PRESSURE_PLATE, "mahogany_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "jacaranda")
                    .planks(BOPItems.JACARANDA_PLANKS, "jacaranda_planks")
                    .log(BOPItems.JACARANDA_LOG)
                    .strippedLog(BOPItems.STRIPPED_JACARANDA_LOG)
                    .wood(BOPItems.JACARANDA_WOOD)
                    .strippedWood(BOPItems.STRIPPED_JACARANDA_WOOD)
                    .door(BOPItems.JACARANDA_DOOR, "jacaranda_door")
                    .trapdoor(BOPItems.JACARANDA_TRAPDOOR, "jacaranda_trapdoor")
                    .slab(BOPItems.JACARANDA_SLAB, "jacaranda_slab")
                    .fence(BOPItems.JACARANDA_FENCE, "jacaranda_fence")
                    .fenceGate(BOPItems.JACARANDA_FENCE_GATE, "jacaranda_fence_gate")
                    .stairs(BOPItems.JACARANDA_STAIRS, "jacaranda_stairs")
                    .boat(BOPItems.JACARANDA_BOAT, "jacaranda_boat")
                    .chestBoat(BOPItems.JACARANDA_CHEST_BOAT, "jacaranda_chest_boat")
                    .sign(BOPItems.JACARANDA_SIGN, "jacaranda_sign")
                    .hangingSign(BOPItems.JACARANDA_HANGING_SIGN, "jacaranda_hanging_sign")
                    .button(BOPItems.JACARANDA_BUTTON, "jacaranda_button")
                    .pressurePlate(BOPItems.JACARANDA_PRESSURE_PLATE, "jacaranda_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "palm")
                    .planks(BOPItems.PALM_PLANKS, "palm_planks")
                    .log(BOPItems.PALM_LOG)
                    .strippedLog(BOPItems.STRIPPED_PALM_LOG)
                    .wood(BOPItems.PALM_WOOD)
                    .strippedWood(BOPItems.STRIPPED_PALM_WOOD)
                    .door(BOPItems.PALM_DOOR, "palm_door")
                    .trapdoor(BOPItems.PALM_TRAPDOOR, "palm_trapdoor")
                    .slab(BOPItems.PALM_SLAB, "palm_slab")
                    .fence(BOPItems.PALM_FENCE, "palm_fence")
                    .fenceGate(BOPItems.PALM_FENCE_GATE, "palm_fence_gate")
                    .stairs(BOPItems.PALM_STAIRS, "palm_stairs")
                    .boat(BOPItems.PALM_BOAT, "palm_boat")
                    .chestBoat(BOPItems.PALM_CHEST_BOAT, "palm_chest_boat")
                    .sign(BOPItems.PALM_SIGN, "palm_sign")
                    .hangingSign(BOPItems.PALM_HANGING_SIGN, "palm_hanging_sign")
                    .button(BOPItems.PALM_BUTTON, "palm_button")
                    .pressurePlate(BOPItems.PALM_PRESSURE_PLATE, "palm_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "willow")
                    .planks(BOPItems.WILLOW_PLANKS, "willow_planks")
                    .log(BOPItems.WILLOW_LOG)
                    .strippedLog(BOPItems.STRIPPED_WILLOW_LOG)
                    .wood(BOPItems.WILLOW_WOOD)
                    .strippedWood(BOPItems.STRIPPED_WILLOW_WOOD)
                    .door(BOPItems.WILLOW_DOOR, "willow_door")
                    .trapdoor(BOPItems.WILLOW_TRAPDOOR, "willow_trapdoor")
                    .slab(BOPItems.WILLOW_SLAB, "willow_slab")
                    .fence(BOPItems.WILLOW_FENCE, "willow_fence")
                    .fenceGate(BOPItems.WILLOW_FENCE_GATE, "willow_fence_gate")
                    .stairs(BOPItems.WILLOW_STAIRS, "willow_stairs")
                    .boat(BOPItems.WILLOW_BOAT, "willow_boat")
                    .chestBoat(BOPItems.WILLOW_CHEST_BOAT, "willow_chest_boat")
                    .sign(BOPItems.WILLOW_SIGN, "willow_sign")
                    .hangingSign(BOPItems.WILLOW_HANGING_SIGN, "willow_hanging_sign")
                    .button(BOPItems.WILLOW_BUTTON, "willow_button")
                    .pressurePlate(BOPItems.WILLOW_PRESSURE_PLATE, "willow_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "dead")
                    .planks(BOPItems.DEAD_PLANKS, "dead_planks")
                    .log(BOPItems.DEAD_LOG)
                    .strippedLog(BOPItems.STRIPPED_DEAD_LOG)
                    .wood(BOPItems.DEAD_WOOD)
                    .strippedWood(BOPItems.STRIPPED_DEAD_WOOD)
                    .door(BOPItems.DEAD_DOOR, "dead_door")
                    .trapdoor(BOPItems.DEAD_TRAPDOOR, "dead_trapdoor")
                    .slab(BOPItems.DEAD_SLAB, "dead_slab")
                    .fence(BOPItems.DEAD_FENCE, "dead_fence")
                    .fenceGate(BOPItems.DEAD_FENCE_GATE, "dead_fence_gate")
                    .stairs(BOPItems.DEAD_STAIRS, "dead_stairs")
                    .boat(BOPItems.DEAD_BOAT, "dead_boat")
                    .chestBoat(BOPItems.DEAD_CHEST_BOAT, "dead_chest_boat")
                    .sign(BOPItems.DEAD_SIGN, "dead_sign")
                    .hangingSign(BOPItems.DEAD_HANGING_SIGN, "dead_hanging_sign")
                    .button(BOPItems.DEAD_BUTTON, "dead_button")
                    .pressurePlate(BOPItems.DEAD_PRESSURE_PLATE, "dead_pressure_plate")
                    .build());
            entries.add(new WoodTypeEntry.Builder("biomesoplenty", "magic")
                    .planks(BOPItems.MAGIC_PLANKS, "magic_planks")
                    .log(BOPItems.MAGIC_LOG)
                    .strippedLog(BOPItems.STRIPPED_MAGIC_LOG)
                    .wood(BOPItems.MAGIC_WOOD)
                    .strippedWood(BOPItems.STRIPPED_MAGIC_WOOD)
                    .door(BOPItems.MAGIC_DOOR, "magic_door")
                    .trapdoor(BOPItems.MAGIC_TRAPDOOR, "magic_trapdoor")
                    .slab(BOPItems.MAGIC_SLAB, "magic_slab")
                    .fence(BOPItems.MAGIC_FENCE, "magic_fence")
                    .fenceGate(BOPItems.MAGIC_FENCE_GATE, "magic_fence_gate")
                    .stairs(BOPItems.MAGIC_STAIRS, "magic_stairs")
                    .boat(BOPItems.MAGIC_BOAT, "magic_boat")
                    .chestBoat(BOPItems.MAGIC_CHEST_BOAT, "magic_chest_boat")
                    .sign(BOPItems.MAGIC_SIGN, "magic_sign")
                    .hangingSign(BOPItems.MAGIC_HANGING_SIGN, "magic_hanging_sign")
                    .button(BOPItems.MAGIC_BUTTON, "magic_button")
                    .pressurePlate(BOPItems.MAGIC_PRESSURE_PLATE, "magic_pressure_plate")
                    .build());
        }
        return entries;
    }

    static void init(Consumer<FinishedRecipe> provider) {
        TREE_GROWTH_SIMULATOR_RECIPES.recipeBuilder(GTOCore.id("rubber"))
                .inputFluids(new FluidStack(Fluids.WATER, 4000))
                .notConsumable(GTBlocks.RUBBER_SAPLING.asItem())
                .circuitMeta(1)
                .outputItems(GTBlocks.RUBBER_LOG.asStack(16))
                .outputItems(GTItems.STICKY_RESIN.asStack(4))
                .EUt(30)
                .duration(1200)
                .save();

        TREE_GROWTH_SIMULATOR_RECIPES.recipeBuilder(GTOCore.id("rubbera"))
                .inputFluids(new FluidStack(Fluids.WATER, 8000))
                .notConsumable(GTBlocks.RUBBER_SAPLING.asItem())
                .inputItems(GTItems.FERTILIZER.asStack(8))
                .circuitMeta(2)
                .outputItems(GTBlocks.RUBBER_LOG.asStack(64))
                .outputItems(GTItems.STICKY_RESIN.asStack(16))
                .EUt(120)
                .duration(300)
                .save();

        TREE_GROWTH_SIMULATOR_RECIPES.recipeBuilder(GTOCore.id("mangrove"))
                .inputFluids(new FluidStack(Fluids.WATER, 4000))
                .notConsumable(Blocks.MANGROVE_PROPAGULE.asItem())
                .circuitMeta(1)
                .outputItems(Blocks.MANGROVE_LOG.asItem(), 16)
                .EUt(30)
                .duration(1200)
                .save();

        TREE_GROWTH_SIMULATOR_RECIPES.recipeBuilder(GTOCore.id("mangrovea"))
                .inputFluids(new FluidStack(Fluids.WATER, 8000))
                .notConsumable(Blocks.MANGROVE_PROPAGULE.asItem())
                .inputItems(GTItems.FERTILIZER.asStack(8))
                .circuitMeta(2)
                .outputItems(Blocks.MANGROVE_LOG.asItem(), 64)
                .EUt(120)
                .duration(300)
                .save();

        add(provider, "minecraft", "oak");
        add(provider, "minecraft", "spruce");
        add(provider, "minecraft", "birch");
        add(provider, "minecraft", "jungle");
        add(provider, "minecraft", "acacia");
        add(provider, "minecraft", "dark_oak");
        add(provider, "minecraft", "cherry");
        add(provider, "deeperdarker", "echo");

        if (GTCEu.isModLoaded("biomesoplenty")) {
            add(provider, "biomesoplenty", "fir");
            add(provider, "biomesoplenty", "redwood");
            add(provider, "biomesoplenty", "mahogany");
            add(provider, "biomesoplenty", "jacaranda");
            add(provider, "biomesoplenty", "palm");
            add(provider, "biomesoplenty", "willow");
            add(provider, "biomesoplenty", "hellbark");
            add(provider, "biomesoplenty", "dead");
            add(provider, "biomesoplenty", "umbran");
            add(provider, "biomesoplenty", "magic");
        }
    }

    private static void add(Consumer<FinishedRecipe> provider, String mod, String mane) {
        ItemStack sapling = new ItemStack(RegistriesUtils.getItem(mod, mane + "_sapling"));
        ItemStack log = new ItemStack(RegistriesUtils.getItem(mod, mane + "_log"), 16);
        TREE_GROWTH_SIMULATOR_RECIPES.recipeBuilder(GTOCore.id(mane))
                .inputFluids(new FluidStack(Fluids.WATER, 4000))
                .notConsumable(sapling)
                .circuitMeta(1)
                .outputItems(log)
                .EUt(30)
                .duration(1200)
                .save();

        TREE_GROWTH_SIMULATOR_RECIPES.recipeBuilder(GTOCore.id(mane + "a"))
                .inputFluids(new FluidStack(Fluids.WATER, 8000))
                .notConsumable(sapling)
                .inputItems(GTItems.FERTILIZER.asStack(8))
                .circuitMeta(2)
                .outputItems(log.copyWithCount(64))
                .EUt(120)
                .duration(300)
                .save();
    }
}
