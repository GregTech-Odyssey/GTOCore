package com.gtocore.common.data.machines;

import com.gtocore.api.machine.part.GTOPartAbility;
import com.gtocore.api.pattern.GTOPredicates;
import com.gtocore.client.renderer.machine.PrimitiveDistillationRenderer;
import com.gtocore.common.data.GTOBlocks;
import com.gtocore.common.data.GTOMachines;
import com.gtocore.common.data.GTOMaterials;
import com.gtocore.common.data.GTORecipeTypes;
import com.gtocore.common.data.translation.GTOMachineStories;
import com.gtocore.common.data.translation.GTOMachineTooltips;
import com.gtocore.common.machine.multiblock.electric.EnergyInjectorMachine;
import com.gtocore.common.machine.multiblock.electric.assembly.ComponentAssemblerMachine;
import com.gtocore.common.machine.multiblock.electric.bioengineering.BiochemicalReactionRoomMachine;
import com.gtocore.common.machine.multiblock.electric.bioengineering.BiologicalExtractionMachine;
import com.gtocore.common.machine.multiblock.electric.nano.NanitesIntegratedMachine;
import com.gtocore.common.machine.multiblock.electric.nano.NanitesModuleMachine;
import com.gtocore.common.machine.multiblock.electric.voidseries.AdvancedInfiniteDrillMachine;
import com.gtocore.common.machine.multiblock.electric.voidseries.PlanetCoreDrillingMachine;
import com.gtocore.common.machine.multiblock.noenergy.LargeSteamStorageTank;
import com.gtocore.common.machine.multiblock.noenergy.NeutronVortexMachine;
import com.gtocore.common.machine.multiblock.noenergy.PrimitiveDistillationTowerMachine;
import com.gtocore.common.machine.multiblock.noenergy.ThermalPowerPumpMachine;
import com.gtocore.common.machine.multiblock.steam.BaseSteamMultiblockMachine;
import com.gtocore.common.machine.multiblock.steam.LargeSteamMultiblockMachine;
import com.gtocore.common.machine.multiblock.steam.SteamMultiblockMachine;

import com.gtolib.GTOCore;
import com.gtolib.api.machine.MultiblockDefinition;
import com.gtolib.api.machine.feature.multiblock.ITierCasingMachine;
import com.gtolib.api.machine.multiblock.*;
import com.gtolib.api.recipe.modifier.RecipeModifierFunction;
import com.gtolib.utils.MultiBlockFileReader;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.machine.feature.multiblock.ICoilMachine;
import com.gregtechceu.gtceu.api.machine.multiblock.PartAbility;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.MultiblockShapeInfo;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.GCYMBlocks;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.gregtechceu.gtceu.common.data.GTMaterials;
import com.gregtechceu.gtceu.common.data.GTRecipeTypes;
import com.gregtechceu.gtceu.common.data.machines.GTMultiMachines;
import com.gregtechceu.gtceu.utils.FormattingUtil;

import net.minecraft.network.chat.Component;
import net.minecraft.world.level.block.Blocks;

import com.hepdd.gtmthings.data.CustomMachines;

import java.util.ArrayList;
import java.util.List;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gtocore.common.block.BlockMap.CALMAP;
import static com.gtocore.utils.register.MachineRegisterUtils.multiblock;
import static com.gtolib.api.GTOValues.COMPONENT_ASSEMBLY_CASING_TIER;
import static com.gtolib.api.GTOValues.GLASS_TIER;

public final class MultiBlockC {

    public static void init() {}

    public static final MultiblockMachineDefinition PRIMITIVE_DISTILLATION_TOWER = multiblock("primitive_distillation_tower", "原始蒸馏塔", PrimitiveDistillationTowerMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineTooltips.INSTANCE.getPrimitiveDistillationTowerTooltips().getSupplier())
            .recipeTypes(GTRecipeTypes.DISTILLATION_RECIPES)
            .block(GTBlocks.STEEL_HULL)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.BACK, RelativeDirection.UP)
                    .aisle("I~O", "AAA", "FHF")
                    .aisle("BBB", "B B", "BBB").setRepeatable(1, 10)
                    .aisle("BBB", "BCB", "BBB")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where('B', blocks(GTBlocks.STEEL_HULL.get()).or(abilities(PartAbility.EXPORT_FLUIDS_1X).setPreviewCount(1).setMaxLayerLimited(1)))
                    .where('C', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('F', abilities(IMPORT_FLUIDS))
                    .where('I', abilities(IMPORT_ITEMS))
                    .where('O', abilities(EXPORT_ITEMS))
                    .where('H', blocks(GTBlocks.FIREBOX_STEEL.get())
                            .or(blocks(GTOMachines.HEAT_SENSOR.getBlock()).setPreviewCount(1)))
                    .where(' ', air())
                    .build())
            .renderer(PrimitiveDistillationRenderer::new)
            .register();

    public static final MultiblockMachineDefinition STEAM_CRACKER = multiblock("steam_cracker", "蒸汽裂化机", p -> new BaseSteamMultiblockMachine(p, 1, 32, 1))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.STEAM_CRACKING_RECIPES)
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("ABBABBA", "ACC~CCA", "ACCACCA", "ABBABBA")
                    .aisle("ABBABBA", "A     A", "A     A", "ABBABBA")
                    .aisle("ABBABBA", "A     A", "A     A", "ABBABBA")
                    .aisle("ABBABBA", "ACCACCA", "ACCACCA", "ABBABBA")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(GTOPartAbility.STEAM_IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(GTOPartAbility.STEAM_EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('B', blocks(GTBlocks.BRONZE_HULL.get()))
                    .where('C', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_cracker"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_CRUSHER = multiblock("large_steam_crusher", "大型蒸汽破碎机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTORecipeTypes.CRUSHER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition) // , RelativeDirection.FRONT,
                    // RelativeDirection.UP,
                    // RelativeDirection.RIGHT
                    .aisle("AAAAAAA", "BEEEEEB", "CCCCCCC", "E     E", "E     E", "E     E", "E     E", "EEEEEEE")
                    .aisle("AAAAAAA", "B     B", "CCCCCCC", "  DDD  ", "  DDD  ", "  DDD  ", "       ", "E     E")
                    .aisle("AAAAAAA", "B     B", "CCCCCCC", "  D D  ", "  D D  ", "  DDD  ", "       ", "E     E")
                    .aisle("AAAAAAA", "B     B", "CCCCCCC", "CCDDDCC", " CDDDC ", "  DDD  ", "       ", "E     E")
                    .aisle("AAAAAAA", "B     B", "DFFFFFD", "C     C", "CCCCCCC", " CCCCC ", "       ", "E     E")
                    .aisle("AAAAAAA", "B     B", "CEEEEEC", "C     C", "CCCCCCC", "CCCCCCC", " CCCCC ", "E     E")
                    .aisle("AAAAAAA", "B     B", "DFFFFFD", "CEEEEEC", "C     C", "C     C", "CCCCCCC", "ECCCCCE")
                    .aisle("AAAAAAA", "B     B", "CEEEEEC", "C     C", "DFFFFFD", "CEEEEEC", "CCCCCCC", "CCCCCCC")
                    .aisle("AAAAAAA", "B     B", "DFFFFFD", "CEEEEEC", "C     C", "C     C", "C     C", "CDDDDDC")
                    .aisle("AAAAAAA", "B     B", "CEEEEEC", "C     C", "CFFFFFC", "DEEEEED", "D     D", "DD   DD")
                    .aisle("AAAAAAA", "BBBGBBB", "BBBBBBB", "BBBBBBB", "BBBBBBB", "DDDDDDD", "       ", "       ")
                    .where('A', blocks(GTBlocks.BRONZE_BRICKS_HULL.get()))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('D', blocks(GTBlocks.BRONZE_HULL.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('F', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())

            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_grinder"))
            .register();

    public static final MultiblockMachineDefinition STEAM_CRUSHER = multiblock("steam_crusher", "蒸汽破碎机", SteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTORecipeTypes.CRUSHER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("A   A", "bbbbb", "BCCCB", "BBBBB", " BBB ")
                    .aisle("A   A", "bBABb", "BCCCB", "BD#DB", "BB#BB")
                    .aisle("A   A", "bBABb", "BCCCB", "BD#DB", "BB#BB")
                    .aisle("A   A", "bBABb", "BCCCB", "BD#DB", "BB#BB")
                    .aisle("A   A", "bb~bb", "BCCCB", "BBBBB", " BBB ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('S', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_grinder"))
            .register();

    public static final MultiblockMachineDefinition MOLECULAR_TRANSFORMER = multiblock("molecular_transformer", "分子重组仪", ElectricMultiblockMachine::new)
            .allRotation()
            .tooltips(GTOMachineStories.INSTANCE.getMolecularTransformerTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .recipeTypes(GTORecipeTypes.MOLECULAR_TRANSFORMER_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAAAA", "  aaaaa  ", "  ACACA  ", "  ACACA  ", "  AAAAA  ", "  DDDDD  ", "  DDDDD  ", "    D    ", "  DDDDD  ", "         ", "         ")
                    .aisle("AAAAAAAAA", " A     A ", " A     A ", " A     A ", " A     A ", " D     D ", " DEEEEED ", "  EEEEE  ", " DEEEEED ", "  AAAAA  ", "         ")
                    .aisle("AAAAAAAAA", "a       a", "A       A", "A       A", "A       A", "D       D", "DEE   EED", " EE   EE ", "DEE   EED", " AAFFFAA ", "   GGG   ")
                    .aisle("AAAAAAAAA", "a  G G  a", "C  G G  C", "C  G G  C", "A  G G  A", "D  G G  D", "DE G G ED", " E G G E ", "DE G G ED", " AFFFFFA ", "  GGFGG  ")
                    .aisle("AAAAAAAAA", "a   H   a", "A   H   A", "A   H   A", "A   H   A", "D   H   D", "DE  H  ED", "DE  H  ED", "DE  H  ED", " AFFFFFA ", "  GFFFG  ")
                    .aisle("AAAAAAAAA", "a  G G  a", "C  G G  C", "C  G G  C", "A  G G  A", "D  G G  D", "DE G G ED", " E G G E ", "DE G G ED", " AFFFFFA ", "  GGFGG  ")
                    .aisle("AAAAAAAAA", "a       a", "A       A", "A       A", "A       A", "D       D", "DEE   EED", " EE   EE ", "DEE   EED", " AAFFFAA ", "   GGG   ")
                    .aisle("AAAAAAAAA", " A     A ", " A     A ", " A     A ", " A     A ", " D     D ", " DEEEEED ", "  EEEEE  ", " DEEEEED ", "  AAAAA  ", "         ")
                    .aisle("AAAAAAAAA", "  aa~aa  ", "  ACACA  ", "  ACACA  ", "  AAAAA  ", "  DDDDD  ", "  DDDDD  ", "    D    ", "  DDDDD  ", "         ", "         ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('C', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('D', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('E', blocks(GCYMBlocks.MOLYBDENUM_DISILICIDE_COIL_BLOCK.get()))
                    .where('F', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('H', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('a', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(autoAbilities(true, false, true)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTOCore.id("block/multiblock/general1"))
            .register();

    public static final MultiblockMachineDefinition EXTREME_ELECTRIC_FURNACE = multiblock("extreme_electric_furnace", "极限电炉", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.ALLOY_SMELTER_RECIPES)
            .recipeTypes(GTRecipeTypes.FURNACE_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getExtremeElectricFurnaceTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('a', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE)))
                    .where('B', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadah)))
                    .where('E', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('F', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where('G', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenSteel)))
                    .where('I', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('J', blocks(GTOBlocks.HSSS_BOROSILICATE_GLASS.get()))
                    .where('K', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('L', blocks(GTBlocks.CASING_EXTREME_ENGINE_INTAKE.get()))
                    .where('M', blocks(GTOBlocks.SUPERCRITICAL_TURBINE_CASING.get()))
                    .where('N', heatingCoils())
                    .where('O', blocks(GTOBlocks.ENGINEERING_MECHANICAL_CASING.get()))
                    .where('P', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('Q', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('R', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('S', abilities(MUFFLER))
                    .where('T', blocks(GTBlocks.CASING_GRATE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/naquadah_reinforced_plant_casing"), GTOCore.id("block/multiblock/general0"))
            .register();

    public static final MultiblockMachineDefinition HIGH_TEMPERATURE_REACTION_HUB = multiblock("high_temperature_reaction_hub", "高温反应枢纽", CoilCrossRecipeMultiblockMachine.createHatchParallel(false))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.LIQUEFACTION_FURNACE_RECIPES)
            .recipeTypes(GTORecipeTypes.REACTION_FURNACE_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getHighTemperatureReactionHubTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('B', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where('b', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE)))
                    .where('C', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('D', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('E', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('F', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('G', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadah)))
                    .where('I', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('J', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('L', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('M', heatingCoils())
                    .where('N', abilities(MUFFLER))
                    .where('O', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('P', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('Q', blocks(GTBlocks.CASING_EXTREME_ENGINE_INTAKE.get()))
                    .where('S', blocks(GTOBlocks.OIL_GAS_TRANSPORTATION_PIPE_CASING.get()))
                    .where('T', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenSteel)))
                    .where('U', blocks(GTBlocks.HERMETIC_CASING_ZPM.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/high_temperature_smelting_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition COMPONENT_ASSEMBLER = multiblock("component_assembler", "部件组装机", ComponentAssemblerMachine::new)
            .allRotation()
            .tooltips(GTOMachineStories.INSTANCE.getComponentAssemblerTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getComponentAssemblerTooltips().getSupplier())
            .moduleTooltips()
            .recipeTypes(GTORecipeTypes.COMPONENT_ASSEMBLY_RECIPES)
            .overclock()
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AaaaaaA", "ACDDDCA", "ACDDDCA", "ACDDDCA", "AAAAAAA")
                    .aisle("aAEEEAa", "FG   GF", "FG   GF", "FG   GF", "AACACAA")
                    .aisle("aAEEEAa", "FHI IHF", "FJI IJF", "FG   GF", "AACACAA")
                    .aisle("aAEEEAa", "FG   GF", "FG   GF", "FG   GF", "AACACAA")
                    .aisle("AaaBaaA", "ACDDDCA", "ACDDDCA", "ACDDDCA", "AAAAAAA")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('a', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('D', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('E', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('F', GTOPredicates.tierBlock(CALMAP, COMPONENT_ASSEMBLY_CASING_TIER))
                    .where('G', blocks(GTOBlocks.MULTI_FUNCTIONAL_CASING.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('I', blocks(Blocks.IRON_BARS))
                    .where('J', blocks(GTBlocks.CASING_STEEL_GEARBOX.get()))
                    .where(' ', any())
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" CCCCCCCCCCCCCCCCCCCCCCCCCCC ", " C         C     C         C ", " C         C     C         C ", " C         C     C         C ", " C         C     C         C ", " CCCCCCCCCCCCCCCCCCCCCCCCCCC ")
                    .aisle("ADDDDDDDDDDDDDDDDDDDDDDDDDDDA", "AHMMMMMMMMHDHNNNHDHMMMMMMMMHA", "AHMMMMMMMMHDHNNNHDHMMMMMMMMHA", "AHMMMMMMMMHDHNNNHDHMMMMMMMMHA", "ADDDDDDDDDDDDDDDDDDDDDDDDDDDA", " CFFC  CFFC CFFFC CFFC  CFFC ")
                    .aisle("AEEEEEEEEEEDEEEEEDEEEEEEEEEEA", "B                           B", "A          J     J          A", "B                           B", "ADHHDDDDHHDDDHDHDDDHHDDDDHHDA", " CHHC  CHHC CHFHC CHHC  CHHC ")
                    .aisle("AFFFFFFFFFFDFFFFFDFFFFFFFFFFA", "BIIIIIIIIII  P P  IIIIIIIIIIB", "A          J P P J          A", "BJJJJJJJJJJ       JJJJJJJJJJB", "ADHHDDDDHHDDDHDHDDDHHDDDDHHDA", " CHHC  CHHC CHFHC CHHC  CHHC ")
                    .aisle("AGGGGGGGGGGDGGGGGDGGGGGGGGGGA", "B                           B", "AGGGGGGGGGGJGGGGGJGGGGGGGGGGA", "B                           B", "ADHHDDDDHHDDDHDHDDDHHDDDDHHDA", " CHHC  CHHC CHFHC CHHC  CHHC ")
                    .aisle("AFFFFFFFFFFDFFFFFDFFFFFFFFFFA", "BIIIIIIIIII  P P  IIIIIIIIIIB", "A          J P P J          A", "BJJJJJJJJJJ       JJJJJJJJJJB", "ADHHDDDDHHDDDHDHDDDHHDDDDHHDA", " CHHC  CHHC CHFHC CHHC  CHHC ")
                    .aisle("AEEEEEEEEEEDEEEEEDEEEEEEEEEEA", "B                           B", "A          J     J          A", "B                           B", "ADHHDDDDHHDDDHDHDDDHHDDDDHHDA", " CHHC  CHHC CHFHC CHHC  CHHC ")
                    .aisle("ADDDDDDDDDD       DDDDDDDDDDA", "AHDO OO ODH       HDO OO ODHA", "AHDO OO ODH       HDO OO ODHA", "AHD      DH       HD      DHA", "ADDDDDDDDDD       DDDDDDDDDDA", " CFFC  CFFC CFFFC CFFC  CFFC ")
                    .aisle(" CKKKKKKKKC       CKKKKKKKKC ", " CKO OO OKC       CKO OO OKC ", " CKO OO OKC       CKO OO OKC ", " CKKKKKKKKC       CKKKKKKKKC ", " CC      CC       CC      CC ", " CCCCCCCCCCCCCCCCCCCCCCCCCCC ")
                    .aisle(" CKFFFFFFKC       CKFFFFFFKC ", "  LO OO OL         LO OO OL  ", "  LO OO OL         LO OO OL  ", "  KNNNNNNK         KNNNNNNK  ", "  C      C         C      C  ", "                             ")
                    .aisle(" CKFFFFFFKC       CKFFFFFFKC ", "  LO OO OL         LO OO OL  ", "  LO OO OL         LO OO OL  ", "  KNNNNNNK         KNNNNNNK  ", "  C      C         C      C  ", "                             ")
                    .aisle(" CKFFFFFFKC   Q   CKFFFFFFKC ", "  L      L         L      L  ", "  L      L         L      L  ", "  KNNNNNNK         KNNNNNNK  ", "  C      C         C      C  ", "                             ")
                    .aisle(" CKKKKKKKKC       CKKKKKKKKC ", "  KNNNNNNK         KNNNNNNK  ", "  KNNNNNNK         KNNNNNNK  ", "  KKKKKKKK         KKKKKKKK  ", "                             ", "                             ")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes()))
                            .or(abilities(GTOPartAbility.ACCELERATE_HATCH).setMaxGlobalLimited(1)))
                    .where('B', GTOPredicates.tierBlock(CALMAP, COMPONENT_ASSEMBLY_CASING_TIER))
                    .where('C', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('D', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('E', blocks(GTBlocks.CASING_ASSEMBLY_CONTROL.get()))
                    .where('F', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('G', blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where('H', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Trinium)))
                    .where('J', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('K', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('L', blocks(GTOBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('M', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('N', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('O', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('P', blocks(Blocks.IRON_BARS))
                    .where('Q', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    public static final MultiblockMachineDefinition THREE_DIMENSIONAL_PRINTER = multiblock("three_dimensional_printer", "3D打印机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getThreeDimensionalPrinterTooltips().getSupplier())
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.THREE_DIMENSIONAL_PRINTER_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_TITANIUM_STABLE)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAA", "ABBBA", "AAAAA", "CEEEC", "CEEEC", "CEEEC", "CCCCC", "     ")
                    .aisle("ACCCA", "BBBBB", "B   B", "C   C", "E   E", "E   E", "CFFFC", " D D ")
                    .aisle("ACCCA", "BBBBB", "BFFFB", "CG GC", "E G E", "E G E", "CFIFC", " D D ")
                    .aisle("ACCCA", "BBBBB", "BFFFB", "CGGGC", "E   E", "E   E", "CFIFC", " D D ")
                    .aisle("ACCCA", "CBBBC", "CBBBC", "CCCCC", "C   C", "C   C", "CCICC", " D D ")
                    .aisle("ACCCA", "DCCCD", "DCICD", "DCICD", "DCICD", "DCICD", "DCICD", "DD DD")
                    .aisle("AAAAA", " AHA ", " AAA ", " CCC ", " CCC ", " CCC ", " CCC ", "     ")
                    .where('A', blocks(GTBlocks.CASING_TITANIUM_STABLE.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(autoAbilities(true, false, true)))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('C', blocks(GTBlocks.CASING_TITANIUM_STABLE.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('E', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('F', blocks(GTOBlocks.MULTI_FUNCTIONAL_CASING.get()))
                    .where('G', blocks(Blocks.IRON_BARS))
                    .where('H', controller(blocks(definition.get())))
                    .where('I', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_stable_titanium"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    public static final MultiblockMachineDefinition GRAVITY_BENDING_DEVICE = multiblock("gravity_bending_device", "引力弯折装置", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getGravityBendingDeviceTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.BENDER_RECIPES)
            .block(GTOBlocks.DIMENSION_INJECTION_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("                             ", "           A A A A           ", "AAA        A A A A        AAA", "AAABBBBBBBBAAAAAAABBBBBBBBAAA", "AAA        ACCCCCA        AAA", "AAA        AIIIIIA        AAA", "AAA        AIILIIA        AAA", "AAA        AIIIIIA        AAA", "AAA        ACCCCCA        AAA", "AAABBBBBBBBAAAAAAABBBBBBBBAAA", "AAA        A A A A        AAA", "           A A A A           ", "                             ")
                    .aisle("           A A A A           ", "AAA                       AAA", "AAABBBBBBBB       BBBBBBBBAAA", "A          DDDDDDD          A", "A          DDDDDDD          A", "A          DDDDDDD          A", "A          DDDDDDD          A", "A          DDDDDDD          A", "A          DDDDDDD          A", "A          DDDDDDD          A", "AAABBBBBBBB       BBBBBBBBAAA", "AAA                       AAA", "           A A A A           ")
                    .aisle("AAA        A A A A        AAA", "AAABBBBBBBB       BBBBBBBBAAA", "EFFFFFFFFFFDDDDDDDFFFFFFFFFFE", "EF        F       F        FE", "EF        F       F        FE", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "E         F                FE", "E         F                FE", "EFFFFFFFFFFDDDDDDDFFFFFFFFFFE", "AAABBBBBBBB       BBBBBBBBAAA", "AAA        A A A A        AAA")
                    .aisle("AAABBBBBBBBAAAAAAABBBBBBBBAAA", "A          DDDDDDD          A", "EF        F       F        FE", "A                           A", "AGGHHHHHHHGGGGGGGGGHHHHHHHGGA", "AGG       GGGGGGGGG       GGA", "AG        E       E        GA", "AGG       GGGGGGGGG       GGA", "AGGHHHHHHHGGGGGGGGGHHHHHHHGGA", "A                           A", "E         F                FE", "A          DDDDDDD          A", "AAABBBBBBBBAAAAAAABBBBBBBBAAA")
                    .aisle("AAA        AAAAAAA        AAA", "A          DDDDDDD          A", "EF        F       F        FE", "AGGHHHHHHHGGGGGGGGGHHHHHHHGGA", "AGG       GGGGGGGGG       GGA", "AG        E       E        GA", "AG        E       E        GA", "AG        E       E        GA", "AGG       GGGGGGGGG       GGA", "AGGHHHHHHHGGGGGGGGGHHHHHHHGGA", "E         F                FE", "A          DDDDDDD          A", "AAA        AAAAAAA        AAA")
                    .aisle("AAA        AAAAAAA        AAA", "A          DDDDDDD          A", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "AGG       GGGGGGGGG       GGA", "AG        E       E        GA", "IGJJAAJJAAKKKKKKKKKAAJJAAJJGI", "IG                         GI", "IGJJAAJJAAKKKKKKKKKAAJJAAJJGI", "AG        E       E        GA", "AGG       GGGGGGGGG       GGA", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "A          DDDDDDD          A", "AAA        AAAAAAA        AAA")
                    .aisle("AAA        AAAAAAA        AAA", "A          DDDDDDD          A", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "AG        E       E        GA", "AG        E       E        GA", "IG                         GI", "IG                         GI", "IG                         GI", "AG        E       E        GA", "AG        E       E        GA", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "A          DDDDDDD          A", "AAA        AAAAAAA        AAA")
                    .aisle("AAA        AAAAAAA        AAA", "A          DDDDDDD          A", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "AGG       GGGGGGGGG       GGA", "AG        E       E        GA", "IGJJAAJJAAKKKKKKKKKAAJJAAJJGI", "IG                         GI", "IGJJAAJJAAKKKKKKKKKAAJJAAJJGI", "AG        E       E        GA", "AGG       GGGGGGGGG       GGA", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "A          DDDDDDD          A", "AAA        AAAAAAA        AAA")
                    .aisle("AAA        AAAAAAA        AAA", "A          DDDDDDD          A", "EF        F       F        FE", "AGGHHHHHHHGGGGGGGGGHHHHHHHGGA", "AGG       GGGGGGGGG       GGA", "AG        E       E        GA", "AG        E       E        GA", "AG        E       E        GA", "AGG       GGGGGGGGG       GGA", "AGGHHHHHHHGGGGGGGGGHHHHHHHGGA", "EF                F         E", "A          DDDDDDD          A", "AAA        AAAAAAA        AAA")
                    .aisle("AAABBBBBBBBAAAAAAABBBBBBBBAAA", "A          DDDDDDD          A", "EF        F       F        FE", "A                           A", "AGGHHHHHHHGGGGGGGGGHHHHHHHGGA", "AGG       GGGGGGGGG       GGA", "AG        E       E        GA", "AGG       GGGGGGGGG       GGA", "AGGHHHHHHHGGGGGGGGGHHHHHHHGGA", "A                           A", "EF                F         E", "A          DDDDDDD          A", "AAABBBBBBBBAAAAAAABBBBBBBBAAA")
                    .aisle("AAA        A A A A        AAA", "AAABBBBBBBB       BBBBBBBBAAA", "EFFFFFFFFFFDDDDDDDFFFFFFFFFFE", "EF        F       F        FE", "EF        F       F        FE", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "EGGHHHHHHHGGGGGGGGGHHHHHHHGGE", "EF                F         E", "EF                F         E", "EFFFFFFFFFFDDDDDDDFFFFFFFFFFE", "AAABBBBBBBB       BBBBBBBBAAA", "AAA        A A A A        AAA")
                    .aisle("           A A A A           ", "AAA                       AAA", "AAABBBBBBBB       BBBBBBBBAAA", "A          DDDDDDD          A", "A          DDDDDDD          A", "A          DDDDDDD          A", "A          DDDDDDD          A", "A          DDDDDDD          A", "A          DDDDDDD          A", "A          DDDDDDD          A", "AAABBBBBBBB       BBBBBBBBAAA", "AAA                       AAA", "           A A A A           ")
                    .aisle("                             ", "           A A A A           ", "AAA        A A A A        AAA", "AAABBBBBBBBAAAAAAABBBBBBBBAAA", "AAA        ACCCCCA        AAA", "AAA        AAAAAAA        AAA", "AAA        AAAAAAA        AAA", "AAA        AAAAAAA        AAA", "AAA        ACCCCCA        AAA", "AAABBBBBBBBAAAAAAABBBBBBBBAAA", "AAA        A A A A        AAA", "           A A A A           ", "                             ")
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('B', GTOPredicates.absBlocks())
                    .where('C', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('D', blocks(GTOBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('E', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyC276)))
                    .where('G', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('H', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('I', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('J', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Neutronium)))
                    .where('L', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/dimension_injection_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition HAND_OF_ARACHNE = multiblock("hand_of_arachne", "阿拉克涅之手", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getHandOfArachneTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.LOOM_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.PRESSURE_CONTAINMENT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("                                         ", "  A A     A A               A A     A A  ", "  A A     A A       B       A A     A A  ", "  AAA     AAA    BCCCCCB    AAA     AAA  ", "  A A     A A    BDCKCDB    A A     A A  ", "  AAA     AAA    BCCCCCB    AAA     AAA  ", "  A A     A A       B       A A     A A  ", "  A A     A A               A A     A A  ", "                                         ")
                    .aisle("  A A     A A               A A     A A  ", "                    B                    ", "                  D B D                  ", "  EEE     EEE    DDDDDDD    EEE     EEE  ", "  EFE     EFE    DDDDDDD    EFE     EFE  ", "  EEE     EEE    DDDDDDD    EEE     EEE  ", "                  D B D                  ", "                    B                    ", "  A A     A A               A A     A A  ")
                    .aisle("  A A     A A       B       A A     A A  ", "                  D B D                  ", "  EEE     EEE    DDDDDDD    EEE     EEE  ", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGHFHHHHHHHFHHHHHHHHHHHHHHHHHFHHHHHHHFHGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "  EEE     EEE    DDDDDDD    EEE     EEE  ", "                  D B D                  ", "  A A     A A       B       A A     A A  ")
                    .aisle("  AAA     AAA    BBBBBBB    AAA     AAA  ", "  EEE     EEE    DDDDDDD    EEE     EEE  ", " GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG ", "G FFFFFFFFFFFF   FF   FF   FFFFFFFFFFFF G", "I  F       F A             A F       F  I", "G FFFFFFFFFFFF   FF   FF   FFFFFFFFFFFF G", " GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG ", "  EEE     EEE    DDDDDDD    EEE     EEE  ", "  AAA     AAA    BCCCCCB    AAA     AAA  ")
                    .aisle("  A A     A A    BDBBBDB    A A     A A  ", "  EFE     EFE    DDDDDDD    EFE     EFE  ", " GHFHHHHHHHFHHHHHHHHHHHHHHHHHFHHHHHHHFHG ", "G  F       F A             A F       F  G", "I JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ I", "G  F       F A             A F       F  G", " GHFHHHHHHHFHHHHHHHHHHHHHHHHHFHHHHHHHFHG ", "  EFE     EFE    DDDDDDD    EFE     EFE  ", "  A A     A A    BDCCCDB    A A     A A  ")
                    .aisle("  AAA     AAA    BBBBBBB    AAA     AAA  ", "  EEE     EEE    DDDDDDD    EEE     EEE  ", " GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG ", "G FFFFFFFFFFFF   FF   FF   FFFFFFFFFFFF G", "I  F       F A             A F       F  I", "G FFFFFFFFFFFF   FF   FF   FFFFFFFFFFFF G", " GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG ", "  EEE     EEE    DDDDDDD    EEE     EEE  ", "  AAA     AAA    BCCCCCB    AAA     AAA  ")
                    .aisle("  A A     A A       B       A A     A A  ", "                  D B D                  ", "  EEE     EEE    DDDDDDD    EEE     EEE  ", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "GGHFHHHHHHHFHHHHHHHHHHHHHHHHHFHHHHHHHFHGG", "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "  EEE     EEE    DDDDDDD    EEE     EEE  ", "                  D B D                  ", "  A A     A A       B       A A     A A  ")
                    .aisle("  A A     A A               A A     A A  ", "                    B                    ", "                  D B D                  ", "  EEE     EEE    DDDDDDD    EEE     EEE  ", "  EFE     EFE    DDDDDDD    EFE     EFE  ", "  EEE     EEE    DDDDDDD    EEE     EEE  ", "                  D B D                  ", "                    B                    ", "  A A     A A               A A     A A  ")
                    .aisle("                                         ", "  A A     A A               A A     A A  ", "  A A     A A       B       A A     A A  ", "  AAA     AAA    BCCCCCB    AAA     AAA  ", "  A A     A A    BDCCCDB    A A     A A  ", "  AAA     AAA    BCCCCCB    AAA     AAA  ", "  A A     A A       B       A A     A A  ", "  A A     A A               A A     A A  ", "                                         ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tungsten)))
                    .where('B', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('C', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('F', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('G', blocks(GTOBlocks.PIKYONIUM_MACHINE_CASING.get()))
                    .where('H', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('I', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/pressure_containment_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition CRACKER_HUB = multiblock("cracker_hub", "裂解反应枢纽", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.CRACKING_RECIPES)
            .recipeTypes(GTRecipeTypes.PYROLYSE_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getCrackerHubTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.NAQUADAH_ALLOY_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('A', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ultimet)))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyC276)))
                    .where('D', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('F', GTOPredicates.absBlocks())
                    .where('G', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('H', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('I', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('J', abilities(MUFFLER))
                    .where('K', blocks(GTOBlocks.OIL_GAS_TRANSPORTATION_PIPE_CASING.get()))
                    .where('L', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('M', blocks(GTOBlocks.CALCIUM_OXIDE_CERAMIC_ANTI_METAL_CORROSION_MECHANICAL_BLOCK.get()))
                    .where('N', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('O', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('P', heatingCoils())
                    .where('Q', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('R', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/cracking_unit"))
            .register();

    public static final MultiblockMachineDefinition CHEMICAL_VAPOR_DEPOSITION = multiblock("chemical_vapor_deposition", "化学气相沉积系统",
            CoilCustomParallelMultiblockMachine.createParallelCoil(m -> 1L << (2 * (m.getTier() - 1)), true, false, false))
            .nonYAxisRotation()
            .tooltips(GTOMachineTooltips.INSTANCE.getChemicalVaporDepositionTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.CHEMICAL_VAPOR_DEPOSITION_RECIPES)
            .recipeModifiers((machine, recipe) -> RecipeModifierFunction.recipeReduction(recipe, 1, Math.log(900) / Math.log(((ICoilMachine) machine).getTemperature())), RecipeModifierFunction.OVERCLOCKING)
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("     BBHBB", "     BGGGB", "     BGGGB", "     BGGGB", "     EEEEE")
                    .aisle("AAAAAEEEEB", "ACACAE   G", "ACACAE   G", "ACACAE   G", "     EDDDE")
                    .aisle("AAAAAEEEEB", "A   AE   G", "AC CAE   G", "A   AE   G", "AAAAAEDDDE")
                    .aisle("AAAAAEEEEB", "AFFFFF   G", "ACCCAE   G", "AFFFFFFFFG", "AAAAAEDDDE")
                    .aisle("AAAAABBBBB", "ACACABDDDB", "ACACABEEEB", "ACACABDDDB", "     EEEEE")
                    .where('A', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('B', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', heatingCoils())
                    .where('D', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('F', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('G', GTOPredicates.glass())
                    .where('H', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .additionalDisplay((controller, components) -> components.add(Component.translatable("gtocore.machine.duration_multiplier.tooltip", Component.literal(FormattingUtil.formatNumbers(Math.log(900) / Math.log(((ICoilMachine) controller).getTemperature()))))))
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition PHYSICAL_VAPOR_DEPOSITION = multiblock("physical_vapor_deposition", "物理气相沉积系统",
            TierCasingParallelMultiblockMachine.createParallel(m -> 1 << (2 * (m.getTier() - 1)), true, GLASS_TIER))
            .nonYAxisRotation()
            .tooltips(GTOMachineTooltips.INSTANCE.getPhysicalVaporDepositionTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.PHYSICAL_VAPOR_DEPOSITION_RECIPES)
            .recipeModifiers((machine, recipe) -> RecipeModifierFunction.recipeReduction(recipe, 1, Math.sqrt(1.0D / ((ITierCasingMachine) machine).getCasingTier(GLASS_TIER))), RecipeModifierFunction.OVERCLOCKING)
            .block(GTBlocks.PLASTCRETE)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAA     ", "AAAA     ", "JJJA     ", "AAJA     ", "AAAA     ")
                    .aisle("AAAACCCCC", "AAAECFFFC", "J  ACFFFC", "AA ACFFFC", "AAAAGGGGG")
                    .aisle("AAAAGHHHC", "J  EG   I", "J   G   I", "J   G   I", "JJJAGIIIG")
                    .aisle("AAAAGHHHC", "AAAEEEE G", "J  EG E G", "AA EEEE G", "AAAAGIIIG")
                    .aisle("AAAAGHHHC", "J  EG   I", "J   G   I", "J   G   I", "JJJAGIIIG")
                    .aisle("AAAACCDCC", "AAAECFFFC", "J  ACFFFC", "AA ACFFFC", "AAAAGGGGG")
                    .aisle("AAAA     ", "AAAA     ", "JJJA     ", "AAJA     ", "AAAA     ")
                    .where('A', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('C', blocks(GTBlocks.PLASTCRETE.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', controller(blocks(definition.get())))
                    .where('E', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('F', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('J', GTOPredicates.glass())
                    .where('G', blocks(GTBlocks.PLASTCRETE.get()))
                    .where('H', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('I', blocks(GTBlocks.FILTER_CASING.get()))
                    .where(' ', any())
                    .build())
            .additionalDisplay((controller, components) -> components.add(Component.translatable("gtocore.machine.duration_multiplier.tooltip", Component.literal(FormattingUtil.formatNumbers(Math.sqrt(1.0D / ((ITierCasingMachine) controller).getCasingTier(GLASS_TIER)))))))
            .workableCasingRenderer(GTCEu.id("block/casings/cleanroom/plascrete"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition PLASMA_CENTRIFUGE = multiblock("plasma_centrifuge", "等离子离心机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.PLASMA_CENTRIFUGE_RECIPES)
            .laserTooltips()
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('a', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('C', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('D', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('E', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('F', blocks(GTOBlocks.GRAVITY_STABILIZATION_CASING.get()))
                    .where('G', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('H', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('I', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('J', blocks(GTOBlocks.SHIELDED_ACCELERATOR.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Adamantium)))
                    .where('L', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('M', blocks(GTOBlocks.SPEEDING_PIPE.get()))
                    .where('N', blocks(GTOBlocks.QUARK_PIPE.get()))
                    .where('O', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition PLASMA_EXTRACTION = multiblock("plasma_extraction", "等离子体萃取罐", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.PLASMA_EXTRACTION_RECIPES)
            .laserTooltips()
            .block(GTOBlocks.DIMENSION_INJECTION_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('B', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('C', blocks(GTOBlocks.ADVANCED_FUSION_COIL.get()))
                    .where('D', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('F', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('G', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('H', blocks(GTOBlocks.SHIELDED_ACCELERATOR.get()))
                    .where('I', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('J', blocks(GTOBlocks.LAW_FILTER_CASING.get()))
                    .where('K', blocks(GTOBlocks.QUARK_PIPE.get()))
                    .where('L', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('M', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('a', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/dimension_injection_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition BIOCHEMICAL_REACTION = multiblock("biochemical_reaction", "生化反应室", BiochemicalReactionRoomMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.BIOCHEMICAL_REACTION_RECIPES)
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('B', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('C', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('D', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('E', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('F', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('G', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(blocks(GTOMachines.RADIATION_HATCH.getBlock()).setMaxGlobalLimited(2)))
                    .where('H', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('I', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('J', blocks(GTOBlocks.BIOLOGICAL_MECHANICAL_CASING.get()))
                    .where('K', blocks(GTBlocks.FILTER_CASING_STERILE.get()))
                    .where('L', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTOCore.id("block/multiblock/general0"))
            .register();

    public static final MultiblockMachineDefinition BIOCHEMICAL_EXTRACTION = multiblock("biochemical_extraction", "生物提取机", BiologicalExtractionMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineTooltips.INSTANCE.getBiochemicalExtractionTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.BIOCHEMICAL_EXTRACTION_RECIPES)
            .parallelizableTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("   AAAAA    ", "   BBBBB    ", "   CCCCC    ", "   CCCCC    ", "   CCCCC    ", "  BDDDDDB   ", "   CCCCC    ", "   CCCCC    ", "   CCCCC    ", "  BDDDDDB   ", "   CCCCC    ", "   CCCCC    ", "   CCCCC    ", "   BBBBB    ", "    BBB     ")
                    .aisle("  AAAAAAA   ", "  BBEEEBB   ", "  B     B   ", "  B     B   ", "  B     B   ", " BB     BB  ", "  B     B   ", "  B     B   ", "  B     B   ", " BB     BB  ", "  B     B   ", "  B     B   ", "  B     B   ", "  BFFFFFB   ", "  BBBBBBB   ")
                    .aisle(" AAAAAAAAA  ", " BBBBBBBBB  ", " B       B  ", " B G   G B  ", " B       B  ", "BB       BB ", " B       B  ", " B G   G B  ", " B       B  ", "BB       BB ", " B       B  ", " B G   G B  ", " B       B  ", " BFFFFFFFB  ", " BBBBBBBBB  ")
                    .aisle("aAAAAAAAAAA ", "BBBHEEEHBBB ", "C  H   H  C ", "C GHG GHG C ", "C  H   H  C ", "D  H   H  D ", "C  H   H  C ", "C GHG GHG C ", "C  H   H  C ", "D  H   H  D ", "C  H   H  C ", "C GHG GHG C ", "C  H   H  C ", "BFFFFFFFFFB ", " BBBBBBBBB  ")
                    .aisle("aAAAAAAAAAAa", "BEBEBBBEBEBa", "C         Ca", "C  G   G  C ", "C         C ", "D         D ", "C         C ", "C  G   G  C ", "C         C ", "D         D ", "C         C ", "C  G   G  C ", "C         C ", "BFFFFFFFFFB ", "BBBBDDDBBBB ")
                    .aisle("aAAAAAAAAAAa", "BEBEBFBEBEB~", "C    F    Ca", "C    F    C ", "C    F    C ", "D    F    D ", "C    F    C ", "C    F    C ", "C    F    C ", "D    F    D ", "C    F    C ", "C    F    C ", "C    F    C ", "BFFFFFFFFFB ", "BBBBDDDBBBB ")
                    .aisle("aAAAAAAAAAAa", "BEBEBBBEBEBa", "C         Ca", "C  G   G  C ", "C         C ", "D         D ", "C         C ", "C  G   G  C ", "C         C ", "D         D ", "C         C ", "C  G   G  C ", "C         C ", "BFFFFFFFFFB ", "BBBBDDDBBBB ")
                    .aisle("aAAAAAAAAAA ", "BBBHEEEHBBB ", "C  H   H  C ", "C GHG GHG C ", "C  H   H  C ", "D  H   H  D ", "C  H   H  C ", "C GHG GHG C ", "C  H   H  C ", "D  H   H  D ", "C  H   H  C ", "C GHG GHG C ", "C  H   H  C ", "BFFFFFFFFFB ", " BBBBBBBBB  ")
                    .aisle(" AAAAAAAAA  ", " BBBBBBBBB  ", " B       B  ", " B G   G B  ", " B       B  ", "BB       BB ", " B       B  ", " B G   G B  ", " B       B  ", "BB       BB ", " B       B  ", " B G   G B  ", " B       B  ", " BFFFFFFFB  ", " BBBBBBBBB  ")
                    .aisle("  AAAAAAA   ", "  BBEEEBB   ", "  B     B   ", "  B     B   ", "  B     B   ", " BB     BB  ", "  B     B   ", "  B     B   ", "  B     B   ", " BB     BB  ", "  B     B   ", "  B     B   ", "  B     B   ", "  BFFFFFB   ", "  BBBBBBB   ")
                    .aisle("   AAAAA    ", "   BBBBB    ", "   CCCCC    ", "   CCCCC    ", "   CCCCC    ", "  BDDDDDB   ", "   CCCCC    ", "   CCCCC    ", "   CCCCC    ", "  BDDDDDB   ", "   CCCCC    ", "   CCCCC    ", "   CCCCC    ", "   BBBBB    ", "    BBB     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('B', blocks(GTOBlocks.BIOLOGICAL_MECHANICAL_CASING.get()))
                    .where('C', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('D', blocks(GTBlocks.FILTER_CASING_STERILE.get()))
                    .where('E', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('G', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('H', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('a', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(GTOPartAbility.THREAD_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(GTOPartAbility.OVERCLOCK_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTOCore.id("block/multiblock/general0"))
            .register();

    public static final MultiblockMachineDefinition NANITES_INTEGRATED_PROCESSING_CENTER = multiblock("nanites_integrated_processing_center", "纳米集成加工中心", NanitesIntegratedMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getNanitesIntegratedProcessingCenterTooltips().getSupplier())
            .tooltips(GTOMachineStories.INSTANCE.getNanoswarmDataSheetTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.NANITES_INTEGRATED_PROCESSING_CENTER_RECIPES)
            .laserTooltips()
            .multipleRecipesTooltips()
            .parallelizableTooltips()
            .block(GTOBlocks.NAQUADAH_ALLOY_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('B', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('C', blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Polytetrafluoroethylene)))
                    .where('E', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('F', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('G', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('H', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.NeodymiumMagnetic)))
                    .where('J', heatingCoils())
                    .where('K', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('L', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('M', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('N', blocks(GTOBlocks.PPS_CORROSION_RESISTANT_MECHANICAL_HOUSING.get()))
                    .where('O', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('P', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('a', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition ORE_EXTRACTION_MODULE = multiblock("ore_extraction_module", "矿石萃取模块", h -> new NanitesModuleMachine(h, 1))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.NANITES_INTEGRATED_PROCESSING_CENTER_RECIPES)
            .parallelizableTooltips()
            .tooltips(GTOMachineStories.INSTANCE.getOreExtractionModuleTooltips().getSupplier())
            .laserTooltips()
            .block(GTBlocks.CASING_HSSE_STURDY)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where('B', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('C', frames(GTMaterials.Polytetrafluoroethylene))
                    .where('D', blocks(GCYMBlocks.MOLYBDENUM_DISILICIDE_COIL_BLOCK.get()))
                    .where('E', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('F', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('G', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('H', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('I', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('J', frames(GTMaterials.Invar))
                    .where('K', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('L', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('M', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('N', blocks(GTOBlocks.NAQUADAH_BOROSILICATE_GLASS.get()))
                    .where('O', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('a', blocks(GTBlocks.CASING_HSSE_STURDY.get()).or(abilities(PARALLEL_HATCH)).or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_sturdy_hsse"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition POLYMER_TWISTING_MODULE = multiblock("polymer_twisting_module", "聚合物扭曲模块", h -> new NanitesModuleMachine(h, 3))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.NANITES_INTEGRATED_PROCESSING_CENTER_RECIPES)
            .parallelizableTooltips()
            .tooltips(GTOMachineStories.INSTANCE.getPolymerTwistingModuleTooltips().getSupplier())
            .laserTooltips()
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where('B', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('C', frames(GTMaterials.Polytetrafluoroethylene))
                    .where('D', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('E', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('F', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('G', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('H', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('I', blocks(GTBlocks.HERMETIC_CASING_ZPM.get()))
                    .where('a', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition BIOENGINEERING_MODULE = multiblock("bioengineering_module", "生物工程模块", h -> new NanitesModuleMachine(h, 2))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.NANITES_INTEGRATED_PROCESSING_CENTER_RECIPES)
            .parallelizableTooltips()
            .tooltips(GTOMachineStories.INSTANCE.getBioengineeringModuleTooltips().getSupplier())
            .laserTooltips()
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where('B', frames(GTMaterials.Iridium))
                    .where('C', blocks(GTOBlocks.BIOACTIVE_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('E', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('F', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('G', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('H', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('I', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('J', blocks(GTBlocks.FILTER_CASING_STERILE.get()))
                    .where('K', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('L', frames(GTMaterials.Polytetrafluoroethylene))
                    .where('a', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition PLANET_CORE_DRILLING = multiblock("planet_core_drilling", "星核钻机", PlanetCoreDrillingMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getPlanetCoreDrillingTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getPlanetCoreDrillingTooltips().getSupplier())
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .laserTooltips()
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.ECHO_CASING.get()))
                    .where('B', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('C', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('E', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('F', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('G', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('H', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('I', blocks(GTOBlocks.ULTIMATE_STELLAR_CONTAINMENT_CASING.get()))
                    .where('J', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('K', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('L', blocks(GTOBlocks.MACHINE_CASING_GRINDING_HEAD.get()))
                    .where('M', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('N', blocks(GTOBlocks.TITANSTEEL_COIL_BLOCK.get()))
                    .where('O', blocks(GTOBlocks.EXTREME_DENSITY_CASING.get()))
                    .where('P', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('Q', blocks(GTOBlocks.LASER_CASING.get()))
                    .where('S', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('a', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setExactLimit(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(4).setMinGlobalLimited(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(2))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_INFINITE_DRILLER = multiblock("advanced_infinite_driller", "进阶无尽钻机", AdvancedInfiniteDrillMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .tooltips(GTOMachineTooltips.INSTANCE.getAdvancedInfiniteDrillerTooltips().getSupplier())
            .laserTooltips()
            .block(GTOBlocks.HYPER_MECHANICAL_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('C', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1)))
                    .where('D', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('E', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('F', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('G', abilities(EXPORT_FLUIDS).or(blocks(CustomMachines.ME_EXPORT_BUFFER.get(), GTAEMachines.FLUID_EXPORT_HATCH_ME.get())))
                    .where('H', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('I', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Amprosium)))
                    .where('K', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('L', blocks(GTOBlocks.MACHINE_CASING_GRINDING_HEAD.get()))
                    .where('M', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Vanadium)))
                    .where('N', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('O', controller(blocks(definition.get())))
                    .where('P', blocks(GTOBlocks.NAQUADRIATICTARANIUM_COIL_BLOCK.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/fluid_drilling_rig"))
            .register();

    public static final MultiblockMachineDefinition ENERGY_INJECTOR = multiblock("energy_injector", "能量注入仪", EnergyInjectorMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getEnergyInjectorTooltips().getSupplier())
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .laserTooltips()
            .block(GCYMBlocks.CASING_NONCONDUCTING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("AAGAA", "A   A", "A   A", "A   A", "BBBBB", " C C ", " DDD ", " C C ")
                    .aisle("ABBBA", " EEE ", " EFE ", " EEE ", "BCCCB", "CC CC", "DC CD", "CC CC")
                    .aisle("ABBBA", " EEE ", " FHF ", " EEE ", "BCCCB", "     ", "D   D", "     ")
                    .aisle("ABBBA", " EEE ", " EFE ", " EEE ", "BCCCB", "CC CC", "DC CD", "CC CC")
                    .aisle("AAAAA", "A   A", "A   A", "A   A", "BBBBB", " C C ", " DDD ", " C C ")
                    .where('A', blocks(GCYMBlocks.CASING_NONCONDUCTING.get())
                            .or(abilities(IMPORT_ITEMS).setExactLimit(1))
                            .or(abilities(EXPORT_ITEMS).setExactLimit(1))
                            .or(abilities(INPUT_ENERGY).setPreviewCount(1))
                            .or(abilities(INPUT_LASER).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('C', frames(GTMaterials.HSSG))
                    .where('D', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('E', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('F', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where('H', blocks(GTBlocks.BATTERY_EMPTY_TIER_II.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/nonconducting_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition NEUTRON_VORTEX = multiblock("neutron_vortex", "中子旋涡", NeutronVortexMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getNeutronVortexTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.NEUTRON_ACTIVATOR_RECIPES)
            .block(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING)
            .pattern(definition -> NeutronVortexMachine.getBlockPattern(0, definition))
            .shapeInfos(definition -> {
                List<MultiblockShapeInfo> shapeInfos = new ArrayList<>();
                for (int i = 0; i < 2; i++) {
                    shapeInfos.addAll(MultiblockDefinition.getMatchingShapes(false, NeutronVortexMachine.getBlockPattern(i, definition)));
                }
                return shapeInfos;
            })
            .workableCasingRenderer(GTOCore.id("block/casings/naquadah_reinforced_plant_casing"), GTOCore.id("block/multiblock/general2"))
            .register();

    public static final MultiblockMachineDefinition NEUTRON_COMPRESSOR = multiblock("neutron_compressor", "中子态素压缩机", ElectricMultiblockMachine::new)
            .allRotation()
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.NEUTRON_COMPRESSOR_RECIPES)
            .parallelizableOverclock()
            .perfectOCTooltips()
            .laserTooltips()
            .block(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .where('A', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('B', blocks(GTOBlocks.DIMENSIONAL_STABILITY_CASING.get()))
                    .where('C', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('D', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('E', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('F', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('G', blocks(GTOBlocks.SPACETIME_COMPRESSION_FIELD_GENERATOR.get()))
                    .where('H', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('I', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('J', blocks(GTOBlocks.INFINITY_COIL_BLOCK.get()))
                    .where('K', frames(GTMaterials.Neutronium))
                    .where('L', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('M', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('N', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('O', blocks(GTOBlocks.EXTREME_DENSITY_CASING.get()))
                    .where('P', blocks(GTOBlocks.INFINITY_GLASS.get()))
                    .where('Q', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('R', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/dimensionally_transcendent_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition NANITES_CIRCUIT_ASSEMBLY_FACTORY = multiblock("nanites_circuit_assembly_factory", "纳米蜂群电路组装厂", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getNanoswarmCircuitAssemblyFactoryTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.CIRCUIT_ASSEMBLER_RECIPES)
            .block(GTOBlocks.NAQUADAH_ALLOY_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle(" BBBBBBBBBBB ", " CCDDDLDDDCC ", " EEEEEEEEEEE ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("ABBBBBBBBBBBA", "AC  J L J  CA", "AFFFFFFFFFFFA", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFBFFFBFFE ", "    BFFFB    ", "    B   B    ", "    B   B    ", "    B   B    ", "    B   B    ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFFFFFFFFE ", "     FFF     ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFFFFFFFFE ", "   I FFF I   ", "   I     I   ", "   I     I   ", "   IIIIIII   ", "   IBI IBI   ", "             ", "             ")
                    .aisle("BBBBBBBBBBBBB", "BB  J L J  BB", "BFFFFFFFFFFFB", "     FFF     ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle("BBBBBBBBBBBBB", "BB  J L J  BB", "BFFFHFFFHFFFB", "     FFF     ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFHFFFHFFE ", "     FFF     ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFHFFFHFFE ", "     FFF     ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFFFFFFFFE ", "   I FFF I   ", "   I     I   ", "   I     I   ", "   IIIIIII   ", "   IBI IBI   ", "             ", "             ")
                    .aisle("ABBBBBBBBBBBA", "AC  K L K  CA", "AFFFFFFFFFFFA", " AAAAAAAAAAA ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " CCBKBKBKBCC ", " FFFFFFFFFFF ", "     F F     ", "     F F     ", "     F F     ", "   FFFFFFF   ", "   FBFFFBF   ", "    FFFFF    ", "             ")
                    .aisle("  EFFFFFFFE  ", "  EFKFKFKFE  ", "  EFFFFFFFE  ", "   FFFFFFF   ", "   CCCCCCC   ", "   FFFFFFF   ", "  FFFFFFFFF  ", "  FFBFFFBFF  ", "   FFFFFFF   ", "   FFFFFFF   ")
                    .aisle("  EFFFFFFFE  ", "  E K K K E  ", "  E       E  ", "  F       F  ", "  C       C  ", "  HF     FH  ", "  FF     FF  ", "  FFB   BFF  ", "  FF     FF  ", "   FFFFFFF   ")
                    .aisle("  EFFFFFFFE  ", "  E K K K G  ", "  E K K K E  ", "  F K K K F  ", "  C K K K C  ", "  HFK K KFH  ", "  FFK K KFF  ", "  FFK K KFF  ", "   F     F   ", "   FFFFFFF   ")
                    .aisle("  EFFFFFFFE  ", "  E K K K E  ", "  E       E  ", "  F       F  ", "  C       C  ", "  HF     FH  ", "  FF     FF  ", "  FFB   BFF  ", "  FF     FF  ", "   FFFFFFF   ")
                    .aisle("  EFFFFFFFE  ", "  EFKFKFKFE  ", "  EFFFFFFFE  ", "   FFFFFFF   ", "   CCCCCCC   ", "   FFFFFFF   ", "  FFFFFFFFF  ", "  FFBFFFBFF  ", "   FFFFFFF   ", "   FFFFFFF   ")
                    .aisle(" BBBBBBBBBBB ", " CCBKBKBKBCC ", " FFFFFFFFFFF ", "     F F     ", "     F F     ", "     F F     ", "   FFFFFFF   ", "   FBFFFBF   ", "    FFFFF    ", "             ")
                    .aisle("ABBBBBBBBBBBA", "AC  K L K  CA", "AFFFFFFFFFFFA", " AAAAAAAAAAA ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFFFFFFFFE ", "   I FFF I   ", "   I     I   ", "   I     I   ", "   IIIIIII   ", "   IBI IBI   ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFHFFFHFFE ", "     FFF     ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFHFFFHFFE ", "     FFF     ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle("BBBBBBBBBBBBB", "BB  J L J  BB", "BFFFHFFFHFFFB", "     FFF     ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle("BBBBBBBBBBBBB", "BB  J L J  BB", "BFFFFFFFFFFFB", "     FFF     ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFFFFFFFFE ", "   I FFF I   ", "   I     I   ", "   I     I   ", "   IIIIIII   ", "   IBI IBI   ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFFFFFFFFE ", "     FFF     ", "             ", "             ", "             ", "    B   B    ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " D  J L J  D ", " EFFBFFFBFFE ", "    BFFFB    ", "    B   B    ", "    B   B    ", "    B   B    ", "    B   B    ", "             ", "             ")
                    .aisle("ABBBBBBBBBBBA", "AC  J L J  CA", "AFFFFFFFFFFFA", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .aisle(" BBBBBBBBBBB ", " CCDDDLDDDCC ", " EEEEEEEEEEE ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .where('A', frames(GTOMaterials.HastelloyN))
                    .where('B', blocks(GTOBlocks.PIKYONIUM_MACHINE_CASING.get()))
                    .where('C', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('D', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('E', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('F', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where('H', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('I', frames(GTMaterials.HastelloyX))
                    .where('J', frames(GTOMaterials.Quantanium))
                    .where('K', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('L', blocks(GTOBlocks.MACHINE_CASING_CIRCUIT_ASSEMBLY_LINE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition PRECISION_ASSEMBLY_CENTER = multiblock("precision_assembly_center", "精密组装中心", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getPrecisionAssemblyCenterTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTORecipeTypes.PRECISION_ASSEMBLER_RECIPES)
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('C', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('E', frames(GTOMaterials.HastelloyN))
                    .where('F', blocks(GTOBlocks.ZIRCONIA_CERAMIC_HIGH_STRENGTH_BENDING_RESISTANCE_MECHANICAL_BLOCK.get()))
                    .where('G', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('H', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('I', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('J', frames(GTOMaterials.Trinaquadalloy))
                    .where('K', blocks(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE.get()))
                    .where('L', blocks(GTOBlocks.PRECISION_PROCESSING_MECHANICAL_CASING.get()))
                    .where('M', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('N', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('O', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('P', blocks(Blocks.IRON_BARS))
                    .where('Q', blocks(GTOBlocks.SPACETIME_ASSEMBLY_LINE_UNIT.get()))
                    .where('R', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('S', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('T', controller(blocks(definition.get())))
                    .where('U', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition THERMAL_POWER_PUMP = multiblock("thermal_power_pump", "热力泵", ThermalPowerPumpMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineTooltips.INSTANCE.getThermalPowerPumpTooltips().getSupplier())
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .block(GTOBlocks.BRASS_REINFORCED_WOODEN_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("FFF", "G G", "FFF")
                    .aisle("FHF", "HHH", "FFF")
                    .aisle("FFF", "GEG", "FFF")
                    .aisle("DDD", "DED", "DDD")
                    .aisle("CDC", "AEA", "CAC")
                    .aisle("CDC", "AEA", "CAC")
                    .aisle("CDC", "AEA", "CAC")
                    .aisle("AAA", "ABA", "AAA")
                    .where('A', blocks(GTOBlocks.BRASS_REINFORCED_WOODEN_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setExactLimit(1))
                            .or(abilities(EXPORT_FLUIDS).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('D', blocks(GTOBlocks.BRASS_REINFORCED_WOODEN_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('F', blocks(GTOBlocks.REINFORCED_WOOD_CASING.get()))
                    .where('G', frames(GTMaterials.TreatedWood))
                    .where('H', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/brass_reinforced_wooden_casing"), GTCEu.id("block/multiblock/multiblock_tank"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_STORAGE_TANK = multiblock("large_steam_storage_tank", "大型蒸汽储罐", LargeSteamStorageTank::new)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .addTooltipsFromClass(LargeSteamStorageTank.class)
            .block(GCYMBlocks.CASING_INDUSTRIAL_STEAM)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" AAA ", " ABA ", " ABA ", " A A ", " A A ", " A A ", " CCC ")
                    .aisle("AAAAA", "ADEDA", "ADDDA", "ADFDA", "ADFDA", "ADFDA", "C D C")
                    .aisle("AAAAA", "BEEEB", "BDEDB", " F F ", " F F ", " F F ", "CDBDC")
                    .aisle("AAAAA", "ADEDA", "ADDDA", "ADFDA", "ADFDA", "ADFDA", "C D C")
                    .aisle(" AAA ", " AGA ", " ABA ", " A A ", " A A ", " A A ", " CCC ")
                    .where('A', blocks(GTOBlocks.BRASS_REINFORCED_WOODEN_CASING.get()))
                    .where('B', blocks(GCYMBlocks.CASING_INDUSTRIAL_STEAM.get())
                            .or(blocks(GTMultiMachines.STEEL_TANK_VALVE.getBlock()).setMaxGlobalLimited(2, 2)))
                    .where('C', frames(GTMaterials.Bronze))
                    .where('D', blocks(GCYMBlocks.CASING_INDUSTRIAL_STEAM.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('F', blocks(Blocks.GLASS))
                    .where('G', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/industrial_steam_casing"), GTCEu.id("block/multiblock/multiblock_tank"))
            .register();
}
