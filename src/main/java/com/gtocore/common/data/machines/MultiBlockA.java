package com.gtocore.common.data.machines;

import com.gtocore.api.machine.part.GTOPartAbility;
import com.gtocore.api.pattern.GTOPredicates;
import com.gtocore.client.renderer.machine.DigitalMinerRenderer;
import com.gtocore.common.data.*;
import com.gtocore.common.data.translation.GTOMachineStories;
import com.gtocore.common.data.translation.GTOMachineTooltips;
import com.gtocore.common.machine.multiblock.electric.FishingGroundMachine;
import com.gtocore.common.machine.multiblock.electric.MoltenCoreMachine;
import com.gtocore.common.machine.multiblock.electric.StellarForgeMachine;
import com.gtocore.common.machine.multiblock.electric.assembly.PrecisionAssemblerMachine;
import com.gtocore.common.machine.multiblock.electric.miner.DigitalMiner;
import com.gtocore.common.machine.multiblock.electric.processing.IntegratedOreProcessor;
import com.gtocore.common.machine.multiblock.electric.voidseries.VoidFluidDrillingRigMachine;
import com.gtocore.common.machine.multiblock.electric.voidseries.VoidMinerMachine;
import com.gtocore.common.machine.multiblock.noenergy.AdvancedPrimitiveBlastFurnaceMachine;
import com.gtocore.common.machine.multiblock.steam.LargeSteamCircuitAssemblerMachine;
import com.gtocore.common.machine.multiblock.steam.LargeSteamMultiblockMachine;
import com.gtocore.common.machine.multiblock.steam.SteamMultiblockMachine;

import com.gtolib.GTOCore;
import com.gtolib.api.annotation.NewDataAttributes;
import com.gtolib.api.machine.feature.multiblock.ITierCasingMachine;
import com.gtolib.api.machine.multiblock.*;
import com.gtolib.api.recipe.modifier.ParallelLogic;
import com.gtolib.api.recipe.modifier.RecipeModifierFunction;
import com.gtolib.utils.MachineUtils;
import com.gtolib.utils.MultiBlockFileReader;
import com.gtolib.utils.RegistriesUtils;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.GTValues;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.machine.feature.IRecipeLogicMachine;
import com.gregtechceu.gtceu.api.machine.feature.multiblock.ICoilMachine;
import com.gregtechceu.gtceu.api.machine.multiblock.PartAbility;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.common.data.*;

import net.minecraft.network.chat.Component;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.material.Fluids;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gregtechceu.gtceu.api.pattern.util.RelativeDirection.*;
import static com.gregtechceu.gtceu.common.data.GTMaterials.Aluminium;
import static com.gtocore.api.machine.part.GTOPartAbility.*;
import static com.gtocore.common.block.BlockMap.CALMAP;
import static com.gtocore.common.block.BlockMap.SCMAP;
import static com.gtocore.common.data.GTORecipeTypes.*;
import static com.gtocore.utils.register.MachineRegisterUtils.CHEMICAL_PLANT_DISPLAY;
import static com.gtocore.utils.register.MachineRegisterUtils.multiblock;
import static com.gtolib.api.GTOValues.*;
import static com.hepdd.gtmthings.data.GTMTRecipeTypes.DIGITAL_MINER_RECIPE;

public final class MultiBlockA {

    public static void init() {}

    public static final MultiblockMachineDefinition DIGITAL_MINER = multiblock("digital_miner", "数字型采矿机", DigitalMiner::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getDigitalMinerTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getDigitalMinerTooltips().getSupplier())
            .block(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes(DIGITAL_MINER_RECIPE)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAA", "CDCDC", "C C C", "  C  ", " CCC ", "     ", "     ", "     ")
                    .aisle("AEEEA", "D   D", "     ", "     ", "     ", " CDC ", "     ", "     ")
                    .aisle("AEFEA", "D G D", "  F  ", "  F  ", "  F  ", "  F  ", " CDC ", "  E  ")
                    .aisle("AEEEA", "D   D", "     ", "     ", "     ", "     ", " CCC ", "     ")
                    .aisle("AABAA", "CDDDC", "C   C", "     ", "     ", "     ", "     ", "     ")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS))
                            .or(abilities(EXPORT_ITEMS)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('E', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('F', blocks(GTBlocks.CASING_STEEL_GEARBOX.get()))
                    .where('G', GTOPredicates.integralFramework())
                    .where(' ', any())
                    .build())
            .renderer(DigitalMinerRenderer::new)
            .hasTESR(true)
            .register();

    public static final MultiblockMachineDefinition EVAPORATION_PLANT = multiblock("evaporation_plant", "蒸发塔", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.EVAPORATION_RECIPES)
            .parallelizableOverclock()
            .moduleTooltips(PARALLEL_HATCH, ACCELERATE_HATCH)
            .block(GTOBlocks.STAINLESS_EVAPORATION_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RIGHT, BACK, UP)
                    .aisle("FYF", "YYY", "FYF")
                    .aisle("YSY", "Y#Y", "YYY")
                    .aisle("XXX", "X#X", "XXX").setRepeatable(5)
                    .aisle(" Z ", "ZZZ", " Z ")
                    .where('S', controller(blocks(definition.getBlock())))
                    .where('Y', blocks(GTOBlocks.STAINLESS_EVAPORATION_CASING.get())
                            .or(Predicates.blocks(GTMachines.CONTROL_HATCH.getBlock()).setMaxGlobalLimited(1).setPreviewCount(0))
                            .or(abilities(INPUT_ENERGY).setMinGlobalLimited(1).setMaxGlobalLimited(2))
                            .or(abilities(IMPORT_FLUIDS).setExactLimit(1)))
                    .where('X', blocks(GTOBlocks.STAINLESS_EVAPORATION_CASING.get())
                            .or(abilities(EXPORT_FLUIDS).setMaxLayerLimited(1)))
                    .where('Z', blocks(GTOBlocks.STAINLESS_EVAPORATION_CASING.get()))
                    .where('F', frames(Aluminium))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("HFH AAA", "FFF ACA", "FFF ACA", "FFF ACA", " G  AAA")
                    .aisle("FGGAAAA", "FDGDA A", "FDGDA A", "FDGAA A", " G  AEA")
                    .aisle("    AAA", "    A A", "    A A", "    A A", "    AAA")
                    .aisle("   AAAA", "   DA A", "   DA A", "   DA A", "   AAEA")
                    .aisle("    AAA", " B  ACA", "    ACA", "    ACA", "    AAA")
                    .where('A', blocks(GTBlocks.CASING_TITANIUM_STABLE.get()))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTBlocks.FIREBOX_TITANIUM.get()))
                    .where('D', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('E', abilities(MUFFLER))
                    .where('F', blocks(GTOBlocks.STAINLESS_EVAPORATION_CASING.get())
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(ACCELERATE_HATCH).setMaxGlobalLimited(1)))
                    .where('G', blocks(GTOBlocks.STAINLESS_EVAPORATION_CASING.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, Aluminium)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/stainless_evaporation_casing"), GTCEu.id("block/multiblock/evaporation_plant"))
            .register();

    public static final MultiblockMachineDefinition PLASMA_CONDENSER = multiblock("plasma_condenser", "等离子冷凝器",
            TierCasingMultiblockMachine.createMachine(GLASS_TIER))
            .recipeModifiers((machine, recipe) -> RecipeModifierFunction.recipeReduction(recipe, 1, Math.pow(1 / 1.1d, ((ITierCasingMachine) machine).getCasingTier(GLASS_TIER))), RecipeModifierFunction.OVERCLOCKING)
            .allRotation()
            .recipeTypes(GTORecipeTypes.PLASMA_CONDENSER_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getPlasmaCondenserTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getPlasmaCondenserTooltips().getSupplier())
            .perfectOCTooltips()
            .perfectOverclock()
            .block(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.COLD_ICE_CASING.get()))
                    .where('B', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTOBlocks.COBALT_OXIDE_CERAMIC_STRONG_THERMALLY_CONDUCTIVE_MECHANICAL_BLOCK.get()))
                    .where('D', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('E', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('F', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('G', blocks(GTOBlocks.OPTICAL_RESONANCE_CHAMBER.get()))
                    .where('H', blocks(GTOBlocks.IRIDIUM_PIPE_CASING.get()))
                    .where('I', blocks(GTOBlocks.LASER_CASING.get()))
                    .where('J', GTOPredicates.glass())
                    .where('K', blocks(GCYMBlocks.CASING_LASER_SAFE_ENGRAVING.get()))
                    .where('L', blocks(GTOBlocks.LASER_COOLING_CASING.get()))
                    .where('M', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/antifreeze_heatproof_machine_casing"), GTCEu.id("block/multiblock/vacuum_freezer"))
            .register();

    public static final MultiblockMachineDefinition RARE_EARTH_CENTRIFUGAL = multiblock("rare_earth_centrifugal", "稀土离心机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.RARE_EARTH_CENTRIFUGAL_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getRareEarthCentrifugalTooltips().getSupplier())
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTBlocks.CASING_HSSE_STURDY)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" bbb ", "bbbbb", "bbbbb", "bbbbb", " bbb ")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle("bbbbb", "bcdcb", "bcdcb", "bcdcb", "bbbbb")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle(" bbb ", "bbbbb", "bbabb", "bbbbb", " bbb ")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_HSSE_STURDY.get())
                            .setMinGlobalLimited(80)
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('d', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_sturdy_hsse"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_RARE_EARTH_CENTRIFUGAL = multiblock(
            "comprehensive_tombarthite_processing_facility",
            "稀土处理综合设施",
            TierCasingCrossRecipeMultiblockMachine.createParallel(m -> 1L << (m.getCasingTier(GLASS_TIER) << 1), GLASS_TIER))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.RARE_EARTH_CENTRIFUGAL_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getComprehensiveTombarthiteProcessingFacilityTooltips().getSupplier())
            .specialParallelizableTooltips()
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(h -> h.addLines("4^玻璃等级", "4^(Glass Tier)")))
            .laserTooltips()
            .block(GTOBlocks.SPS_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)// , RelativeDirection.FRONT,
                    // RelativeDirection.UP,
                    // RelativeDirection.RIGHT
                    .where('A', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('B', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('C', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('D', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('E', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', GTOPredicates.light())
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Duranium)))
                    .where('I', blocks(GTOBlocks.PPS_CORROSION_RESISTANT_MECHANICAL_HOUSING.get()))
                    .where('J', blocks(GTOBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Amprosium)))
                    .where('L', blocks(GTOBlocks.HASTELLOY_N_75_CASING.get()))
                    .where('M', blocks(GTOBlocks.CALCIUM_OXIDE_CERAMIC_ANTI_METAL_CORROSION_MECHANICAL_BLOCK.get()))
                    .where('N', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('O', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('P', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Polytetrafluoroethylene)))
                    .where('Q', blocks(GTOBlocks.INDUSTRIAL_FRAMELESS_GLASS.get()))
                    .where('R', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('S', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('T', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('U', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('V', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('W', blocks(GTOBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('X', GTOPredicates.glass())
                    .where('Y', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('Z', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('[', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('\\', blocks(GTOBlocks.SPS_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(']', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('^', controller(blocks(definition.get())))
                    .where('_', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_SPINDLE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/sps_casing"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition SPS_CRAFTING = multiblock("sps_crafting", "超临界合成机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.TRANSCENDING_CRAFTING_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getSpsCraftingTooltips().getSupplier())
            .perfectOCTooltips()
            .perfectOverclock()
            .block(GTBlocks.FUSION_CASING_MK2)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("bbbbbbb", "bcccccb", "bcfffcb", "bcfffcb", "bcfffcb", "bcccccb", "bbbbbbb")
                    .aisle("bcccccb", "c     c", "c     c", "c     c", "c     c", "c     c", "bcccccb")
                    .aisle("bcccccb", "c ddd c", "f ddd f", "f ddd f", "f ddd f", "c ddd c", "bcccccb")
                    .aisle("bcccccb", "c ded c", "f ded f", "f dgd f", "f ded f", "c ded c", "bcccccb")
                    .aisle("bcccccb", "c ddd c", "f ddd f", "f ddd f", "f ddd f", "c ddd c", "bcccccb")
                    .aisle("bcccccb", "c     c", "c     c", "c     c", "c     c", "c     c", "bcccccb")
                    .aisle("bbbbbbb", "bccaccb", "bcfffcb", "bcfffcb", "bcfffcb", "bcccccb", "bbbbbbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('c', blocks(GTBlocks.FUSION_CASING_MK2.get())
                            .setMinGlobalLimited(100)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('d', blocks(Blocks.CRYING_OBSIDIAN))
                    .where('e', blocks(Blocks.REINFORCED_DEEPSLATE))
                    .where('f', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('g', blocks(GTOBlocks.MAGIC_CORE.get()))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/fusion/fusion_casing_mk2"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_SPS_CRAFTING = multiblock("advanced_sps_crafting", "进阶超临界合成机", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.TRANSCENDING_CRAFTING_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getAdvancedSpsCraftingTooltips().getSupplier())
            .parallelizableTooltips()
            .multipleRecipesTooltips()
            .laserTooltips()
            .block(GTBlocks.FUSION_CASING_MK2)
            .pattern(definition -> MultiBlockFileReader.start(definition, FRONT, UP, RIGHT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.SPS_CASING.get())
                            .setMinGlobalLimited(800)
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTOBlocks.FUSION_CASING_MK4.get()))
                    .where('C', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('E', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('F', blocks(Blocks.CRYING_OBSIDIAN))
                    .where('G', blocks(GTOBlocks.ACCELERATED_PIPELINE.get()))
                    .where('H', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('I', blocks(GCYMBlocks.MOLYBDENUM_DISILICIDE_COIL_BLOCK.get()))
                    .where('J', blocks(GTOBlocks.MAGIC_CORE.get()))
                    .where('K', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('L', blocks(GTOBlocks.FUSION_COIL_MK2.get()))
                    .where('M', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('N', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/fusion/fusion_casing_mk2"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public static final MultiblockMachineDefinition MATTER_FABRICATOR = multiblock("matter_fabricator", "物质生成机", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .recipeTypes(GTORecipeTypes.MATTER_FABRICATOR_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getMatterFabricatorTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .moduleTooltips(OVERCLOCK_HATCH)
            .parallelizableOverclock()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" CCCCDDDDDCCCC ", "EFFFFDGGGDFFFFE", "EFFFFDHHHDFFFFE", "EFFFFDGGGDFFFFE", " CCCCDDDDDCCCC ")
                    .aisle("EFFFFDGGGDFFFFE", "F I IIIIIII I F", "F I I     I I F", "F I IIIIIII I F", "EFFFFDGGGDFFFFE")
                    .aisle("EFFFFDHHHDFFFFE", "F I I     I I F", "FJJJJJJJJJJJJJF", "F I I     I I F", "EFFFFDHHHDFFFFE")
                    .aisle("EFFFFDGGGDFFFFE", "F I IIIIIII I F", "F I I     I I F", "F I IIIIIII I F", "EFFFFDGGGDFFFFE")
                    .aisle(" CCCCDDDDDCCCC ", "EFFFFDGGGDFFFFE", "EFFFFDHHHDFFFFE", "EFFFFDGGGDFFFFE", " CCCCDDDDDCCCC ")
                    .aisle("               ", "   AAA   AAA   ", "   ABA   AAA   ", "   AAA   AAA   ", "               ")
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('D', blocks(GTBlocks.MACHINE_CASING_UHV.get()))
                    .where('E', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('F', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('G', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('H', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('I', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('A', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("               ", "   JJJ   JJJ   ", "   JJJ   JJJ   ", "   JJJ   JJJ   ", "               ", "               ", "               ", "               ")
                    .aisle(" EEEEMMMMMEEEE ", "ABBBBMNNNMBBBBA", "ABBBBMOOOMBBBBA", "ABBBBMNNNMBBBBA", " EEEEMMMMMEEEE ", "               ", "               ", "               ")
                    .aisle("ABBBBMOOOMBBBBA", "BGGGGB   BGGGGB", "B    B   B    B", "B    B   B    B", "ABBBBMOOOMBBBBA", "CCCKLKLKLKLKCCC", "CIC         CIC", "CCC         CCC")
                    .aisle("ABBBBMNNNMBBBBA", "BHHHHHHHHHHHHHB", "B    B   B    B", "BHHHHHHHHHHHHHB", "ABBBBMNNNMBBBBA", "CCCKLKLKLKLKCCC", "DFD         DFD", "CAC         CAC")
                    .aisle("ABBBBMOOOMBBBBA", "BGGGGB   BGGGGB", "B    B   B    B", "B    B   B    B", "ABBBBMOOOMBBBBA", "CCCKLKLKLKLKCCC", "DFDKDKIKIKDKDFD", "CAC         CAC")
                    .aisle("ABBBBMNNNMBBBBA", "BFFFFBFFFBFFFFB", "BHHHHHHHHHHHHHB", "BFFFFBFFFBFFFFB", "ABBBBMNNNMBBBBA", "CCCLLLLLLLLLCCC", "DFDKDKIKIKDKDFD", "CAC         CAC")
                    .aisle(" EEEEMMMMMEEEE ", "ABBBBMNNNMBBBBA", "ABBBBMOOOMBBBBA", "ABBBBMNNNMBBBBA", "CEEEEMMMMMEEEEC", "CCCLLLLLLLLLCCC", "DFDKDKIKIKDKDFD", "CAC         CAC")
                    .aisle("               ", "               ", "               ", "               ", "C             C", "CCCLLLLLLLLLCCC", "DFDKDKIKIKDKDFD", "CAC         CAC")
                    .aisle("               ", "               ", "               ", "               ", "               ", "CCCKLKLKLKLKCCC", "DFDKDKIKIKDKDFD", "CAC         CAC")
                    .aisle("               ", "               ", "               ", "               ", "               ", "CCCKLKLKLKLKCCC", "DFD         DFD", "CAC         CAC")
                    .aisle("               ", "               ", "               ", "               ", "               ", "CCCKLKLKLKLKCCC", "CIC         CIC", "CCC         CCC")
                    .aisle("               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "    P          ", "               ", "               ", "               ", "               ", "               ")
                    .where('A', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('B', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('C', blocks(GTOBlocks.TUNGSTEN_ALLOY_RADIATION_SHIELDING_MECHANICAL_BLOCK.get()))
                    .where('D', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.OdysseyNanoSuperalloy)))
                    .where('F', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('G', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('I', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('J', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes()))
                            .or(abilities(OVERCLOCK_HATCH).setMaxGlobalLimited(1)))
                    .where('K', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('L', blocks(GTOBlocks.ENERGY_CONTROL_CASING_MK3.get()))
                    .where('M', blocks(GTBlocks.MACHINE_CASING_UHV.get()))
                    .where('N', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('O', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('P', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition VOID_FLUID_DRILLING_RIG = multiblock("void_fluid_drilling_rig", "虚空流体钻机", VoidFluidDrillingRigMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getVoidFluidDrillTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getVoidFluidDrillTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTBlocks.CASING_HSSE_STURDY)
            .pattern(definition -> FactoryBlockPattern.start(definition, BACK, UP, LEFT)
                    .aisle("ABBBBA ", "AAAAAA ", " C C   ", " C C   ", " C C   ", " C C   ", "       ", "       ")
                    .aisle("B   BBB", "A   DDD", "    DDD", "    DDD", " C CDDD", " EEE   ", "       ", "       ")
                    .aisle("B FGBBB", "H IGDDD", "  IGD D", "  IGD D", "  IGD D", " EIEDDD", "  I    ", "  I    ")
                    .aisle("B   BBB", "A   DDD", "    DDD", "    DDD", " C CDDD", " EEE   ", "       ", "       ")
                    .aisle("ABBBBA ", "AAAAAA ", " C C   ", " C C   ", " C C   ", " C C   ", "       ", "       ")
                    .where('B', blocks(GTOBlocks.COBALT_OXIDE_CERAMIC_STRONG_THERMALLY_CONDUCTIVE_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('D', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSSG)))
                    .where('F', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('G', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where('I', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('A', blocks(GTBlocks.CASING_HSSE_STURDY.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setMinGlobalLimited(1))
                            .or(abilities(GTOPartAbility.ITEMS_INPUT).setExactLimit(1))
                            .or(abilities(EXPORT_FLUIDS).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_sturdy_hsse"), GTCEu.id("block/multiblock/fluid_drilling_rig"))
            .register();

    public static final MultiblockMachineDefinition VOID_MINER = multiblock("void_miner", "虚空采矿机", VoidMinerMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineTooltips.INSTANCE.getVoidMinerTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start(definition, FRONT, UP, RIGHT)
                    .aisle(" AAAAA ", " BBBBB ", "  C C  ", "  C C  ", "  CCC  ", "       ")
                    .aisle("AAA AAA", "BCD DCB", "B DED B", "B D D B", " CD DC ", "  C C  ")
                    .aisle("AA   AA", "B  F  B", "  FEF  ", "   F   ", "       ", "  C C  ")
                    .aisle("AA   AA", "B     G", "   E   ", "       ", "       ", "  C C  ")
                    .aisle("AA   AA", "B  F  B", "  FEF  ", "   F   ", "       ", "  C C  ")
                    .aisle("AAA AAA", "BCD DCB", "B DED B", "B D D B", " CD DC ", "  C C  ")
                    .aisle(" AAAAA ", " BBBBB ", "  C C  ", "  C C  ", "  CCC  ", "       ")
                    .where('A', blocks(GTOBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('E', blocks(GTBlocks.MACHINE_CASING_HV.get()))
                    .where('F', blocks(GTBlocks.CASING_STAINLESS_STEEL_GEARBOX.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where('B', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setMinGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setExactLimit(1))
                            .or(abilities(EXPORT_ITEMS).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/large_miner"))
            .register();

    public static final MultiblockMachineDefinition LARGE_VOID_MINER = multiblock("large_void_miner", "大型虚空采矿厂", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.LARGE_VOID_MINER_RECIPES)
            .recipeTypes(GTORecipeTypes.RANDOM_ORE_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getLargeVoidMinerTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getLargeVoidMinerTooltips().getSupplier())
            .disabledCombined()
            .recipeModifier((machine, recipe) -> {
                if (((ElectricMultiblockMachine) machine).getRecipeType() == GTORecipeTypes.RANDOM_ORE_RECIPES) {
                    return RecipeModifierFunction.overclocking(machine, ParallelLogic.accurateParallel(machine, recipe, 1L << ((((ElectricMultiblockMachine) machine).getTier() - GTValues.ZPM) << 1)));
                }
                return RecipeModifierFunction.overclocking(machine, recipe);
            })
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("bbbbbbbbb", "bbbbbbbbb", "b       b", "b       b", "b       b", "bbbbbbbbb", "bcccccccb", "bcccccccb", "b       b", "b       b")
                    .aisle("b       b", "b       b", "         ", "         ", "         ", "b   d   b", "c  ddd  c", "c  ddd  c", "   ddd   ", "         ")
                    .aisle("b       b", "b       b", "         ", "    d    ", "   ddd   ", "b  ddd  b", "c dd dd c", "c d   d c", "  d   d  ", "         ")
                    .aisle("b   d   b", "b   d   b", "   ddd   ", "   d d   ", "  dd dd  ", "b d   d b", "cdd   ddc", "cd     dc", " d     d ", "         ")
                    .aisle("b  d d  b", "b  d d  b", "   d d   ", "  d   d  ", "  d   d  ", "bdd   ddb", "cd     dc", "cd     dc", " d     d ", "         ")
                    .aisle("b   d   b", "b   d   b", "   ddd   ", "   d d   ", "  dd dd  ", "b d   d b", "cdd   ddc", "cd     dc", " d     d ", "         ")
                    .aisle("b       b", "b       b", "         ", "    d    ", "   ddd   ", "b  ddd  b", "c dd dd c", "c d   d c", "  d   d  ", "         ")
                    .aisle("b       b", "b       b", "         ", "         ", "         ", "b   d   b", "c  ddd  c", "c  ddd  c", "   ddd   ", "         ")
                    .aisle("bbbbbbbbb", "bbbbabbbb", "b       b", "b       b", "b       b", "bbbbbbbbb", "bcccccccb", "bcccccccb", "b       b", "b       b")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .setMinGlobalLimited(110)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ultimet)))
                    .where('d', blocks(GTBlocks.CASING_TITANIUM_STABLE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/large_miner"))
            .register();

    public static final MultiblockMachineDefinition CHEMICAL_PLANT = multiblock("chemical_plant", "化工厂", CoilMultiblockMachine.createCoilMachine(false, false))
            .allRotation()
            .recipeTypes(GTORecipeTypes.LARGE_CHEMICAL_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getChemicalFactoryTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getChemicalFactoryTooltips().getSupplier())
            .parallelizableTooltips()
            .perfectOCTooltips()
            .recipeModifier(RecipeModifierFunction.coilReductionOverclock(0.25))
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("b   b", "bbbbb", "b   b", "bbbbb", "b   b")
                    .aisle("bbbbb", "bcccb", "bdddb", "bcccb", "bbbbb")
                    .aisle("b   b", "bdddb", "bcccb", "bdddb", "b   b")
                    .aisle("bbbbb", "bcccb", "bdddb", "bcccb", "bbbbb")
                    .aisle("b   b", "abbbb", "b   b", "bbbbb", "b   b")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .setMinGlobalLimited(60)
                            .or(abilities(GTOPartAbility.CATALYST_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(GTOPredicates.autoAccelerateAbilities(definition.getRecipeTypes()))
                            .or(blocks(GTOMachines.MACHINE_ACCESS_LINK.getBlock()).setMaxGlobalLimited(1, 0))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', heatingCoils())
                    .where('d', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where(' ', any())
                    .build())
            .additionalDisplay(CHEMICAL_PLANT_DISPLAY)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/machines/chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition DECAY_HASTENER = multiblock("decay_hastener", "衰变加速器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.DECAY_HASTENER_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getDecayAcceleratorTooltips().getSupplier())
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.HYPER_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAA", "ABBBA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "ABBBA", "AAAAA")
                    .aisle("A   A", "BEEEB", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "BEEEB", "A   A")
                    .aisle("A   A", "BEEEB", "DGHGD", "EGHGE", "FGHGF", "EGHGE", "DGHGD", "EGHGE", "FGHGF", "EGHGE", "DGHGD", "BEEEB", "A   A")
                    .aisle("A   A", "BEEEB", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "BEEEB", "A   A")
                    .aisle("AAAAA", "ABCBA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "ABBBA", "AAAAA")
                    .where('A', blocks(GTOBlocks.FISSION_REACTOR_CASING.get()))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('E', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('G', blocks(GTBlocks.FUSION_CASING.get()))
                    .where('H', blocks(GTBlocks.HERMETIC_CASING_UV.get()))
                    .where('B', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get())
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/data_bank"))
            .register();

    public static final MultiblockMachineDefinition RECYCLER = multiblock("recycler", "回收机", CustomParallelMultiblockMachine.createParallel(m -> 1L << Math.max(0, (2 * (m.getTier() - 4))), true))
            .allRotation()
            .recipeTypes(GTORecipeTypes.RECYCLER_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getRecyclingMachineTooltips().getSupplier())
            .specialParallelizableTooltips()
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(
                    h -> h.addLines("自EV起，每升一级电压，获得的并行x4", "From EV, every voltage tier increase grants x4 parallelism"),
                    c -> c.addCommentLines("公式 : 2^(max(0, (2 * (tier - 4)))), 算去吧", "Formula: 2^(max(0, (2 * (tier - 4)))), do the math")))
            .overclock()
            .block(GTBlocks.STEEL_HULL)
            .pattern(definition -> FactoryBlockPattern.start(definition, RIGHT, UP, BACK)
                    .aisle("DDDDD", "DDGDD", "EEEEE", "EEEEE")
                    .aisle("DEEED", "D   D", "E   E", "EFFFE")
                    .aisle("DEEED", "D   D", "EEEEE", "EEEEE")
                    .aisle("AAAAA", "ACCCA", "AAAAA", "CAAAC")
                    .aisle("AAAAA", "B   B", "A   A", "CAAAC")
                    .aisle("AAAAA", "B   B", "A   A", "CAAAC")
                    .aisle("AAAAA", "B   B", "A   A", "CAAAC")
                    .aisle("AAAAA", "ABBBA", "AAAAA", "     ")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('B', blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('E', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('F', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.STEEL_HULL.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/steam/steel/side"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .onWorking(m -> {
                if (m.getProgress() == m.getMaxProgress() - 1 && m.getRecipeLogic().getLastRecipe() != null && m.getRecipeLogic().getLastRecipe().data.getBoolean("isCustom")) {
                    m.getRecipeLogic().markLastRecipeDirty();
                }
                return true;
            })
            .register();

    public static final MultiblockMachineDefinition MASS_FABRICATOR = multiblock("mass_fabricator", "质量发生器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.MASS_FABRICATOR_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getMassGeneratorTooltips().getSupplier())
            .parallelizableTooltips()
            .perfectOCTooltips()
            .parallelizablePerfectOverclock()
            .block(GTBlocks.MACHINE_CASING_UHV)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("bbbbb", " c c ", " c c ", " c c ", "bbbbb")
                    .aisle("bbbbb", "cdfdc", "cdfdc", "cdfdc", "bbbbb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", "cdfdc", "cdfdc", "cdfdc", "bbbbb")
                    .aisle("bbabb", " c c ", " c c ", " c c ", "bbbbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.MACHINE_CASING_UHV.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(16).setPreviewCount(16))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('d', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('e', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('f', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/uhv/side"), GTCEu.id("block/multiblock/gcym/large_electrolyzer"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_MASS_FABRICATOR = multiblock("advanced_mass_fabricator", "进阶质量发生器", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .recipeTypes(GTORecipeTypes.MASS_FABRICATOR_RECIPES)
            .parallelizableTooltips()
            .tooltips(GTOMachineStories.INSTANCE.getAdvancedMassFabricatorTooltips().getSupplier())
            .multipleRecipesTooltips()
            .laserTooltips()
            .block(GTBlocks.MACHINE_CASING_UXV)
            .pattern(definition -> FactoryBlockPattern.start(definition, BACK, UP, LEFT)
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "                     ", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "CAAAAAAAAA AAAAAAAAAC", "C                    ", "CAAAAAAAAA AAAAAAAAAC", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("                     ", " DDDDDDDD   DDDDDDDD ", " EEEEEEEEEEEEEEEEEEE ", " EEEEEEEEEEEEEEEEEEE ", " DDDDDDDD   DDDDDDDD ", "C                    ", "G                    ", "C                    ", " DDDDDDDD   DDDDDDDD ", " EEEEEEEEEEEEEEEEEEE ", " EEEEEEEEEEEEEEEEEEE ", " DDDDDDDD   DDDDDDDD ", "                     ")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "CAAAAAAAAA AAAAAAAAAC", "C                    ", "CAAAAAAAAA AAAAAAAAAC", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "                     ", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA")
                    .where('A', blocks(GTBlocks.MACHINE_CASING_UXV.get()))
                    .where('B', blocks(GTOBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where('C', blocks(GTBlocks.MACHINE_CASING_UXV.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTOBlocks.TITANSTEEL_COIL_BLOCK.get()))
                    .where('E', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('F', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/uxv/side"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition PRECISION_ASSEMBLER = multiblock("precision_assembler", "精密组装机", PrecisionAssemblerMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.PRECISION_ASSEMBLER_RECIPES)
            .recipeTypes(GTRecipeTypes.ASSEMBLER_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getPrecisionAssemblerTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getPrecisionAssemblerTooltips().getSupplier())
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(
                    h -> h.addLines("由玻璃等级决定", "Determined by glass tier"),
                    c -> c.addCommentLines(
                            "高等级玻璃可以提供更多的并行数量",
                            "Higher tier glass provides more parallelism")))
            .laserTooltips()
            .recipeModifier(RecipeModifierFunction::laserLossOverclocking)
            .block(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("bbbbbbbbb", "d       d", "d       d", "d       d", "bbbbbbbbb")
                    .aisle("bAAAAAAAb", "bcccccccb", "bcccccccb", "bcccccccb", "bbbbbbbbb")
                    .aisle("bAAAAAAAb", "b-------b", "b-------b", "b-------b", "bbbbbbbbb")
                    .aisle("bAAAAAAAb", "bcccccccb", "bcccccccb", "bcccccccb", "bbbbbbbbb")
                    .aisle("bbbbabbbb", "d       d", "d       d", "d       d", "bbbbbbbbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get())
                            .setMinGlobalLimited(70)
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', GTOPredicates.glass())
                    .where('d', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('A', GTOPredicates.machineCasing())
                    .where('-', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/oxidation_resistant_hastelloy_n_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    public static final MultiblockMachineDefinition FISHING_GROUND = multiblock("fishing_ground", "渔场", FishingGroundMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getFishingFarmTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getFishingFarmTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.FISHING_GROUND_RECIPES)
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.ALUMINIUM_BRONZE_CASING)
            .disabledCombined()
            .pattern(definition -> FactoryBlockPattern.start(definition, RIGHT, UP, BACK)
                    .aisle("    AAAAA    ", "    AAFAA    ", "    BBBBB    ", "             ")
                    .aisle("   BBBBBBB   ", "   BCCCCCB   ", "   BB E BB   ", "             ")
                    .aisle("  BBBBBBBBB  ", "  BCCCCCCCB  ", "  BB  E  BB  ", "             ")
                    .aisle(" BBBBBBBBBBB ", " BCCCCCCCCCB ", " BB   E   BB ", "             ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCCCCCCCCA", "BB    E    BB", "             ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCBEBCCCCA", "B    BEB    B", "     BBB     ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCEDECCCCA", "BEEEEEDEEEEEB", "     BBB     ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCBEBCCCCA", "B    BDB    B", "     BBB     ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCCCCCCCCA", "BB    D    BB", "             ")
                    .aisle(" BBBBBBBBBBB ", " BCCCCCCCCCB ", " BB   D   BB ", "             ")
                    .aisle("  BBBBBBBBB  ", "  BCCCCCCCB  ", "  BB  D  BB  ", "             ")
                    .aisle("   BBBBBBB   ", "   BCCCCCB   ", "   BB D BB   ", "             ")
                    .aisle("    AAAAA    ", "    AAAAA    ", "    BBBBB    ", "             ")
                    .where('A', blocks(GTOBlocks.ALUMINIUM_BRONZE_CASING.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTOBlocks.ALUMINIUM_BRONZE_CASING.get()))
                    .where('C', fluids(Fluids.WATER))
                    .where('D', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('F', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/aluminium_bronze_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    public static final MultiblockMachineDefinition LAVA_FURNACE = multiblock("lava_furnace", "熔岩炉", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.LAVA_FURNACE_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getLavaFurnaceTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getLavaFurnaceTooltips().getSupplier())
            .overclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("CCC", "DDD", "DDD")
                    .aisle("CCC", "D D", "DMD")
                    .aisle("CCC", "DAD", "DDD")
                    .where('A', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(autoAbilities(definition.getRecipeTypes())))
                    .where('M', abilities(MUFFLER))
                    .where('C', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_oven"))
            .recoveryStaticItems(() -> ChemicalHelper.get(TagPrefix.dustTiny, GTMaterials.Obsidian).getItem())
            .register();

    public static final MultiblockMachineDefinition LARGE_GAS_COLLECTOR = multiblock("large_gas_collector", "大型集气室", CustomParallelMultiblockMachine.createParallel(m -> 100000, true))
            .noneRotation()
            .tooltips(GTOMachineStories.INSTANCE.getAtmosphereCollectorRoomTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.LARGE_GAS_COLLECTOR_RECIPES)
            .overclock()
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("aaaaa", "abbba", "abbba", "abbba", "aaaaa")
                    .aisle("aaaaa", "bcccb", "bcccb", "bcccb", "abbba")
                    .aisle("aaaaa", "bcccb", "bcecb", "bcccb", "abdba")
                    .aisle("aaaaa", "bcccb", "bcccb", "bcccb", "abbba")
                    .aisle("aaaaa", "abbba", "abbba", "abbba", "aaaaa")
                    .where('d', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .setMinGlobalLimited(40)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('b', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('e', blocks(GTBlocks.HERMETIC_CASING_IV.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/machines/gas_collector"))
            .register();

    public static final MultiblockMachineDefinition ENGRAVING_LASER_PLANT = multiblock("engraving_laser_plant", "激光蚀刻工厂", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getEngravingLaserPlantTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getEngravingLaserPlantTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.PRECISION_LASER_ENGRAVER_RECIPES)
            .recipeTypes(GTRecipeTypes.LASER_ENGRAVER_RECIPES)
            .recipeTypes(GTORecipeTypes.LASER_WELDER_RECIPES)
            .specialParallelizableTooltips()
            .perfectOCTooltips()
            .recipeModifiers((machine, recipe) -> {
                if (machine instanceof ElectricMultiblockMachine workableElectricMultiblockMachine) {
                    if (recipe.getType() == GTRecipeTypes.LASER_ENGRAVER_RECIPES)
                        return RecipeModifierFunction.hatchParallel(workableElectricMultiblockMachine, recipe);
                    if (recipe.getType() == GTORecipeTypes.LASER_WELDER_RECIPES) {
                        recipe.duration = recipe.duration / 5;
                        return RecipeModifierFunction.hatchParallel(workableElectricMultiblockMachine, recipe);
                    }
                }
                return recipe;
            }, RecipeModifierFunction.PERFECT_OVERCLOCKING)
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RIGHT, UP, BACK)
                    .aisle("       aaaaaaa       ", "       aaaaaaa       ", "       aaa~aaa       ", "       aaaaaaa       ", "        aaaaa        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        JDIDJ        ", "        A   A        ", "         AAA         ", "          B          ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        JDIDJ        ", "        A   A        ", "         AAA         ", "          B          ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  JDIDJ  FAF   ", "   FAF  A   A  FAF   ", "   FAF   AAA   FAF   ", "   FAF    B    FAF   ", "   FAF         FAF   ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FMDMF JDIDJ FBDBF  ", "  FM MF A   A FB BF  ", "  FM MF  AAA  FB BF  ", "  FM MF   B   FB BF  ", "  FMDMF       FBDBF  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  ADDDA JDIDJ ADDDA  ", "  A I A A   A A I A  ", "  A I A  AAA  A I A  ", "  A I A   B   A I A  ", "  ADDDA       ADDDA  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FMDMF JDIDJ FBDBF  ", "  FM MF A   A FB BF  ", "  FM MF  AAA  FB BF  ", "  FM MF   B   FB BF  ", "  FMDMF       FBDBF  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  JDIDJ  FAF   ", "   FAF  A   A  FAF   ", "   FAF   AAA   FAF   ", "   FAF    B    FAF   ", "   FAF         FAF   ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("       AAAAAAA       ", "       JADIDAJ       ", "       AABBBAA       ", "    I   AAAAA   I    ", "         AAA         ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle(" AAA   AAAAAAA   AAA ", " AKA   JDBBBDJ   ALA ", " AKA   ABDDDBA   ALA ", " AKAI  AABBBAA  IALA ", " AKA    AAAAA    ALA ", " AAA    AAHAA    AAA ", "         AHA         ", "         AHA         ", "         AHA         ", "         AHA         ", "         AAA         ", "                     ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB   BDJ ABBBA", "ACDCA ABD I DBA ACDCA", "ACDCA  AB   BA  ACDCA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AAD DAA  ALLLA", " AAA    AD DA    AAA ", "        AD DA        ", "        AD DA        ", "        AAAAA        ", "        ABBBA        ", "         BBB         ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB I BDJ ABBBA", "AD DA ABDIIIDBA AD DA", "AD DAIIAB I BAIIAD DA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AH I HA  ALLLA", " AAACCCCH I HCCCCAAA ", "        H I H        ", "        H I H        ", "        HAAAH        ", "        ABBBA        ", "         BBB         ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB   BDJ ABBBA", "ACDCA ABD I DBA ACDCA", "ACDCA  AB   BA  ACDCA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AAD DAA  ALLLA", " AAA    AD DA    AAA ", "        AD DA        ", "        AD DA        ", "        AAAAA        ", "        ABBBA        ", "         BBB         ")
                    .aisle(" AAA   AAAAAAA   AAA ", " AKA   JDBBBDJ   ALA ", " AKA   ABDDDBA   ALA ", " AKAI  AABBBAA  IALA ", " AKA    AAAAA    ALA ", " AAA    AAHAA    AAA ", "         AHA         ", "         AHA         ", "         AHA         ", "         AHA         ", "         AAA         ", "                     ")
                    .aisle("       AAAAAAA       ", "       JJDDDJJ       ", "       AABBBAA       ", "    I   AAAAA   I    ", "         AAA         ", "         AAA         ", "          C          ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA   AAA   AAA   ", "   FAF   JJJ   FAF   ", "   FAF   AAA   FAF   ", "   FAF    I    FAF   ", "   FAF         FAF   ", "   FAF         FAF   ", "   AAA    C    AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA       AAAAA  ", "  FHDHF       FEDEF  ", "  FH HF       FE EF  ", "  FH HF   I   FE EF  ", "  FH HF       FE EF  ", "  FHDHF       FEDEF  ", "  ABBBA   C   ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA  AAA  AAAAA  ", "  ADDDA  AAA  ADDDA  ", "  A I A  AAA  A I A  ", "  A I AIIAAAIIA I A  ", "  A I A  AAA  A I A  ", "  ADDDA  AAA  ADDDA  ", "  ABBBA   C   ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FHDHF ABBBA FEDEF  ", "  FH HF ACDCA FE EF  ", "  FH HF ACDCA FE EF  ", "  FH HF ABBBA FE EF  ", "  FHDHF AEEEA FEDEF  ", "  ABBBA  AAA  ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  GBBBG  FAF   ", "   FAF  GD DG  FAF   ", "   FAF  GD DG  FAF   ", "   FAF  GBBBG  FAF   ", "   FAF  AEEEA  FAF   ", "   AAA   AAA   AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        ABBBA        ", "        ACDCA        ", "        ACDCA        ", "        ABBBA        ", "        AEEEA        ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where('D', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('E', blocks(GTOBlocks.COMPONENT_ASSEMBLY_LINE_CASING_UV.get()))
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('H', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('I', blocks(GTOBlocks.OPTICAL_RESONANCE_CHAMBER.get()))
                    .where('J', blocks(GTBlocks.FILTER_CASING_STERILE.get()))
                    .where('K', blocks(GTOBlocks.ADVANCED_COMPRESSED_FUSION_COIL.get()))
                    .where('L', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('M', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('a', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_ITEMS).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setPreviewCount(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(EXPORT_ITEMS).setPreviewCount(1))
                            .or(abilities(COMPUTATION_DATA_RECEPTION).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/gcym/large_engraving_laser"))
            .register();

    public static final MultiblockMachineDefinition MAGNETIC_CONFINEMENT_DIMENSIONALITY_SHOCK_DEVICE = multiblock("magnetic_confinement_dimensionality_shock_device", "磁约束维度震荡装置", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .recipeTypes(GTORecipeTypes.DIMENSIONALLY_TRANSCENDENT_SHOCK_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getMagneticConfinementDimensionalityShockDeviceTooltips().getSupplier())
            .parallelizableTooltips()
            .multipleRecipesTooltips()
            .laserTooltips()
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('D', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('E', blocks(GTBlocks.FUSION_COIL.get()))
                    .where('F', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('G', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('K', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTOMaterials.AttunedTengam)))
                    .where('M', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('N', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('O', blocks(GTOBlocks.ACCELERATOR_MAGNETIC_CONSTRAINED_RAIL_CASING.get()))
                    .where('P', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTOMaterials.HeavyQuarkDegenerateMatter)))
                    .where('Q', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition QUANTUM_FORCE_TRANSFORMER = multiblock("quantum_force_transformer", "量子操纵者", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.QUANTUM_FORCE_TRANSFORMER_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.MANIPULATOR)
            .pattern(definition -> MultiBlockFileReader.start(definition, BACK, UP, LEFT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('B', blocks(GTOBlocks.FORCE_FIELD_GLASS.get()))
                    .where('C', blocks(GTOBlocks.QUANTUM_FORCE_TRANSFORMER_COIL.get()))
                    .where('D', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('E', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('F', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('G', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('H', blocks(GTOBlocks.SPACETIME_BENDING_CORE.get()))
                    .where('I', blocks(GTOBlocks.SPACETIME_CONTINUUM_RIPPER.get()))
                    .where('J', blocks(GTOBlocks.LAW_FILTER_CASING.get()))
                    .where('K', blocks(GTOBlocks.MANIPULATOR.get()))
                    .where('L', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('N', blocks(GTOBlocks.MANIPULATOR.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/manipulator"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition CHEMICAL_COMPLEX = multiblock("chemical_complex", "化工复合体", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .allRotation()
            .recipeTypes(LARGE_CHEMICAL_RECIPES, POLYMERIZATION_REACTOR_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getChemicalComplexTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(abilities(GTOPartAbility.CATALYST_HATCH).setMaxGlobalLimited(2))
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.BabbittAlloy)))
                    .where('E', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Polytetrafluoroethylene)))
                    .where('G', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('H', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('I', heatingCoils())
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('K', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('L', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/machines/chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition INTEGRATED_ORE_PROCESSOR = multiblock("integrated_ore_processor", "集成矿石处理厂", IntegratedOreProcessor::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.INTEGRATED_ORE_PROCESSOR)
            .tooltips(GTOMachineTooltips.INSTANCE.getIntegratedOreProcessorTooltips().getSupplier())
            .parallelizableTooltips()
            .moduleTooltips(new PartAbility[0])
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("aaaaaa     ", "abbbba     ", "abbbba     ", "abbbba     ", "abbbba     ", "aaaaaa     ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .aisle("aaaaaaaaaaa", "bd  d accca", "bd  d accca", "bd  d accca", "bd  d accca", "aaaaaaaccca", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "           ")
                    .aisle("aaaaaaaaaaa", "b ee  c   c", "b ee  ffffc", "b ee  c   c", "b ee  ffffc", "aaaaaac   c", "      cfffc", "      c   c", "      cfffc", "      c   c", "      cfffc", "       gcc ")
                    .aisle("aaaaaaaaaaa", "b ee  c   c", "b ee  ffffc", "b ee  c   c", "b ee  ffffc", "aaaaaac   c", "      cfffc", "      c   c", "      cfffc", "      c   c", "      cfffc", "       ccc ")
                    .aisle("aaaaaaaaaaa", "bd  d accca", "bd  d ac~ca", "bd  d accca", "bd  d accca", "aaaaaaaccca", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "           ")
                    .aisle("aaaaaa     ", "abbbba     ", "abbbba     ", "abbbba     ", "abbbba     ", "aaaaaa     ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .where('~', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('c', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(60)
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('b', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('d', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlueSteel)))
                    .where('e', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('f', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('g', abilities(MUFFLER))
                    .where(' ', any())
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("    AAAAAA     ", "    AGGGGA     ", "    AGGGGA     ", "    AGGGGA     ", "    AGGGGA     ", "    AAAAAA     ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("AAAAAAAAAAAAAAA", "ABBAGFFFFFAQQQA", "ABBAG     AQQQA", "ABBAG     AQQQA", "ABBAGFFFFFAQQQA", "ABBAAAAAAAAQQQA", " BB JJJJJJJQQQ ", "    JLLLLJJQQQ ", "    JJJJJJJQQQ ", "           QQQ ", "           QQQ ", "               ")
                    .aisle("AAAAAAAAAAAAAAA", "BBBBG     QQQQQ", "BDDBIMMMMMIEREQ", "B  BINNNNNIEREQ", "BDDBG     QEREQ", "B  BAAAAAAQEREQ", "BDDBJJJJJJQEREQ", " BB LOOOOOQEREQ", "    JLLLLJQEREQ", "          QEREQ", "          QEREQ", "           QQQ ")
                    .aisle("AAAAAAAAAAAAAAA", "BBBBG     QQQQQ", "BDDBINNNNNIEREQ", "B  BIMMMMMIEREQ", "BDDBG     QEREQ", "B  BAAAAAAQEREQ", "BDDBJJJJJJQEREQ", " BB LOOOOOQEREQ", "    JLLLLJQEREQ", "          QEREQ", "          QEREQ", "           QQQ ")
                    .aisle("AAAAAAAAAAAAAAA", "ABBAGFFFFFAQQQA", "ABBAG     AQQQA", "ABBAG     AQQQA", "ABBAGFFFFFAQQQA", "ABBAAAAAAAAQQQA", " BB JJJJJJJQQQ ", "    JLLLLJJQQQ ", "    JJJJJJJQQQ ", "           QQQ ", "           QQQ ", "               ")
                    .aisle("AAAAAAAAAAAAAAA", " CC AGGGGA CCCT", " CC AGGGGA CCCT", " CC AGGGGA CCCT", " CC AGGGGA CCCT", "AAAAAAAAAAAAAAA", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("    AHHHHA     ", " CC H    H CCCT", " CC H    H CCCT", " CC H    H CCCT", " CC H    H CCCT", "    AHHHHA     ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("AAAA      AAAAA", " CC        CCCT", " CC        CCCT", " CC        CCCT", " CC        CCCT", "AAAA      AAAAA", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("AAAA           ", "ABBA           ", "ABBA           ", "ABBA           ", "ABBA           ", "ABBA           ", "BBBBKKKKKKK    ", " BB KPPPPKK    ", "BBBBKKKKKKK    ", " BB            ", "               ", "               ")
                    .aisle("AAAA           ", "BBBB           ", "BEFB           ", "BF B           ", "B EB           ", "B  B           ", "BEFBKKKKKK     ", "B  BEEEEEE     ", "B  BKKKKKK     ", "BBBB           ", "               ", "               ")
                    .aisle("AAAA           ", "BBBB           ", "BFEB           ", "B  B           ", "BEFB           ", "B  B           ", "BFEBKKKKKK     ", "B  BEEEEEE     ", "B  BKKKKKK     ", "BBBB           ", "               ", "               ")
                    .aisle("AAAA           ", "ABBA           ", "ABBA        S  ", "ABBA           ", "ABBA           ", "ABBA           ", "BBBBKKKKKKK    ", " BB KPPPPKK    ", "BBBBKKKKKKK    ", " BB            ", "               ", "               ")
                    .where('A', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('B', blocks(GCYMBlocks.CASING_VIBRATION_SAFE.get()))
                    .where('C', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('D', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('E', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where('G', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('H', blocks(GTBlocks.FILTER_CASING_STERILE.get()))
                    .where('I', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_MECHANICAL_CASING.get()))
                    .where('J', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('K', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('L', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('M', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_SPINDLE.get()))
                    .where('N', blocks(GTOBlocks.IRIDIUM_GEARBOX.get()))
                    .where('O', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('P', blocks(GTBlocks.CASING_EXTREME_ENGINE_INTAKE.get()))
                    .where('Q', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('R', blocks(GTBlocks.HERMETIC_CASING_UV.get()))
                    .where('S', controller(blocks(definition.get())))
                    .where('T', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .recoveryStacks(GTMachineModify::tinydustFromDustOutput)
            .register();

    public static final MultiblockMachineDefinition DRAGON_EGG_COPIER = multiblock("dragon_egg_copier", "龙蛋复制机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.DRAGON_EGG_COPIER_RECIPES)
            .parallelizableTooltips()
            .perfectOCTooltips()
            .parallelizablePerfectOverclock()
            .block(GTOBlocks.DRAGON_STRENGTH_TRITANIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("bbb", "bbb", "bbb")
                    .aisle("bbb", "bcb", "bdb")
                    .aisle("bbb", "bab", "bbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTOBlocks.DRAGON_STRENGTH_TRITANIUM_CASING.get())
                            .setMinGlobalLimited(10)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTOBlocks.MAGIC_CORE.get()))
                    .where('d', abilities(MUFFLER))
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/extreme_strength_tritanium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .recoveryStaticItems(GTOItems.DRACONIUM_DIRT)
            .register();

    public static final MultiblockMachineDefinition LARGE_CRACKER = multiblock("large_cracker", "大型裂化机", CoilMultiblockMachine.createCoilMachine(false, false))
            .allRotation()
            .recipeTypes(GTRecipeTypes.CRACKING_RECIPES)
            .parallelizableTooltips()
            .recipeModifiers(RecipeModifierFunction.HATCH_PARALLEL, RecipeModifierFunction::crackerOverclock)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("aaaaaaaaa", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ")
                    .aisle("aaaaaaaaa", "aabbbbbaa", "aabaaabaa", "aabaaabaa", "aabaaabaa", "aabbbbbaa", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", "aabbbbbaa", "aabaaabaa", "aabaaabaa", "aabaaabaa", "aabbbbbaa", "aaaaaaaaa")
                    .aisle("aaaa~aaaa", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ")
                    .where('~', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(200)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('b', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('c', heatingCoils())
                    .build())
            .additionalDisplay((controller, components) -> components.add(Component.translatable("gtceu.multiblock.cracking_unit.energy", Math.max(20, 100 - 10 * ((ICoilMachine) controller).getCoilTier()))))
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/cracking_unit"))
            .register();

    public static final MultiblockMachineDefinition STEAM_PISTON_HAMMER = multiblock("steam_piston_hammer", "蒸汽活塞锤", SteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.FORGE_HAMMER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAA", " E ", "   ", "   ", "   ")
                    .aisle("ABA", "E#E", "EBE", "ECE", "EDE")
                    .aisle("AAA", " S ", "   ", "   ", "   ")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1)))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.WroughtIron)))
                    .where('C', blockDirection(Blocks.STICKY_PISTON, DOWN))
                    .where('D', abilities(STEAM))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/forge_hammer"))
            .register();

    public static final MultiblockMachineDefinition STEAM_PRESSOR = multiblock("steam_pressor", "蒸汽挤压机", SteamMultiblockMachine::new)
            .allRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.COMPRESSOR_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("XXX", "XXX", "XXX")
                    .aisle("XXX", "X#X", "XXX")
                    .aisle("XXX", "X#X", "XXX")
                    .aisle("XXX", "XSX", "XXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM).setExactLimit(1)))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_pressor"))
            .register();

    public static final MultiblockMachineDefinition STEAM_FOUNDRY = multiblock("steam_foundry", "蒸汽铸造炉", SteamMultiblockMachine::new)
            .allRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.ALLOY_SMELTER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("FFF", "XXX", "XXX")
                    .aisle("FFF", "X#X", "XXX")
                    .aisle("FFF", "XSX", "XXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('F', blocks(GTBlocks.FIREBOX_BRONZE.get())
                            .or(abilities(STEAM).setExactLimit(1)))
                    .where('X', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1)))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/alloy_smelter"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_MACERATOR = multiblock("large_steam_macerator", "大型蒸汽研磨机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.MACERATOR_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition, BACK, UP, LEFT)
                    .aisle("AaaaA", "BaaaB", "BaaaB", "ABBBA")
                    .aisle("ABBBA", "aCDCa", "aDCDa", "ABBBA")
                    .aisle("ABBBA", "EDFDa", "aCFCa", "ABGBA")
                    .aisle("ABBBA", "aCDCa", "aDCDa", "ABBBA")
                    .aisle("AaaaA", "BaaaB", "BaaaB", "ABBBA")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('a', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('E', controller(blocks(definition.get())))
                    .where('F', blocks(RegistriesUtils.getBlock("ad_astra:steel_block")))
                    .where('G', abilities(MUFFLER))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_grinder"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_CIRCUIT_ASSEMBLER = multiblock("large_steam_circuit_assembler", "大型蒸汽电路组装机", LargeSteamCircuitAssemblerMachine::new)
            .allRotation()
            .addTooltipsFromClass(LargeSteamCircuitAssemblerMachine.class)
            .tooltips(GTOMachineStories.INSTANCE.getLargeSteamCircuitAssemblerTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getLargeSteamCircuitAssemblerTooltips().getSupplier())
            .maxTier(2)
            .recipeTypes(GTRecipeTypes.CIRCUIT_ASSEMBLER_RECIPES)
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAA", "AAA", "DDD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ASA", "DDD", " D ")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1)))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('C', blocks(GTOBlocks.STEAM_ASSEMBLY_BLOCK.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(GTOPartAbility.STEAM_IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_circuit_assembler"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_MIXER = multiblock("large_steam_mixer", "大型蒸汽搅拌机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .tooltips(GTOMachineTooltips.INSTANCE.getSteamMixerTooltips().getSupplier())
            .recipeTypes(GTRecipeTypes.MIXER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ")
                    .aisle("AAAAAAAAA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA  B  AA")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A   D   A", "A CCCCC A", "A   D   A", "A CCCCC A", "A   D   A", "ABBBBBBBA")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA  B  AA")
                    .aisle(" AAAAAAA ", " AAASAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(4))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_mixer"))
            .register();

    public static final MultiblockMachineDefinition STEAM_MIXER = multiblock("steam_mixer", "蒸汽搅拌机", SteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.MIXER_RECIPES)
            .tooltips(GTOMachineTooltips.INSTANCE.getSteamMixerTooltips().getSupplier())
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" AAA ", " AAA ", " AAA ")
                    .aisle("AAAAA", "ABCBA", "AEEEA")
                    .aisle("AAAAA", "ACDCA", "AEEEA")
                    .aisle("AAAAA", "ABCBA", "AEEEA")
                    .aisle(" AAA ", " ASA ", " AAA ")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', air())
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(blocks(Blocks.GLASS))
                            .or(air()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_mixer"))
            .register();

    public static final MultiblockMachineDefinition STEAM_SEPARATOR = multiblock("steam_separator", "蒸汽分离机", (holder) -> new SteamMultiblockMachine(holder, 8))
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.CENTRIFUGE_RECIPES)
            .steamOverclock(0)
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition, RIGHT, UP, BACK)
                    .aisle("AAAAA", " B~B ", " BBB ", " BBB ", "  B  ")
                    .aisle("AAAAA", "BC CB", "B   B", "BC CB", " BBB ")
                    .aisle("AAAAA", "B D B", "B D B", "B D B", "BBBBB")
                    .aisle("AAAAA", "BC CB", "B   B", "BC CB", " BBB ")
                    .aisle("AAAAA", " BBB ", " BBB ", " BBB ", "  B  ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.BRONZE_BRICKS_HULL.get()))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(GTOPartAbility.STEAM_IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(GTOPartAbility.STEAM_EXPORT_FLUIDS).setMaxGlobalLimited(4).setPreviewCount(1)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_CENTRIFUGE = multiblock("large_steam_centrifuge", "大型蒸汽离心机", (holder) -> new LargeSteamMultiblockMachine(holder, 8))
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.CENTRIFUGE_RECIPES)
            .steamOverclock(0)
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("           ", "   AAAAA   ", "  AAAAAAA  ", "   AAAAA   ", "           ")
                    .aisle("  AAAAAAA  ", "  A     A  ", " AB     BA ", "  A     A  ", "  AAAAAAA  ")
                    .aisle(" AAAAAAAAA ", " A       A ", "AB   C   BA", " A       A ", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A         A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A    E    A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A   ECE   A", "A CCCCCCC A", "A    C    A", " AAAAFAAAA ")
                    .aisle(" AAAAAAAAA ", "A    E    A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A         A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", " A       A ", "AB   C   BA", " A       A ", " AAAAAAAAA ")
                    .aisle("  AAAAAAA  ", "  A     A  ", " AB     BA ", "  A     A  ", "  AAAAAAA  ")
                    .aisle("           ", "   AAAAA   ", "  AAASAAA  ", "   AAAAA   ", "           ")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('F', abilities(MUFFLER))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(GTOPartAbility.STEAM_IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(GTOPartAbility.STEAM_EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(4))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(4)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_THERMAL_CENTRIFUGE = multiblock("large_steam_thermal_centrifuge", "大型蒸汽热力离心机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.THERMAL_CENTRIFUGE_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" AAAAA ", " BBBBB ", " BBBBB ", " BBBBB ", "       ")
                    .aisle("ABBABBA", "BC   CB", "BC   CB", "BC   CB", " BBBBB ")
                    .aisle("ABAAABA", "B     B", "B     B", "B     B", " BBBBB ")
                    .aisle("AAAAAAA", "B  D  B", "B  D  B", "B  D  B", " BBEBB ")
                    .aisle("ABAAABA", "B     B", "B     B", "B     B", " BBBBB ")
                    .aisle("ABBABBA", "BC   CB", "BC   CB", "BC   CB", " BBBBB ")
                    .aisle(" AAAAA ", " BBBBB ", " BBSBB ", " BBBBB ", "       ")
                    .where('S', controller(blocks(definition.get())))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('A', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where('E', abilities(MUFFLER))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_thermal_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_BATH = multiblock("large_steam_bath", "大型蒸汽浸洗机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "ABBBBBBBA", "ABBBDBBBA", "ABBBBBBBA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "AB     BA", "AB  D  BA", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "AB  D  BA", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "ABBBBBBBA", "ABBBDBBBA", "ABBBBBBBA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAASAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('C', blocks(Blocks.GLASS))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Potin)))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(GTOPartAbility.STEAM_IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition STEAM_BATH = multiblock("steam_bath", "蒸汽浸洗机", SteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAA", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "ABCBA", "ADDDA")
                    .aisle("AAAAA", "ABCBA", "ADDDA")
                    .aisle("AAAAA", "AASAA", "AAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(GTOPartAbility.STEAM_IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', air())
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Potin)))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(blocks(Blocks.GLASS))
                            .or(air()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_ORE_WASHER = multiblock("large_steam_ore_washer", "大型蒸汽洗矿机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.ORE_WASHER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A   B   A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "ABBBDBBBA", "A  BBB  A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A   B   A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAASAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('C', blocks(Blocks.GLASS))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(GTOPartAbility.STEAM_IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_ore_washer"))
            .register();

    public static final MultiblockMachineDefinition STEAM_ORE_WASHER = multiblock("steam_ore_washer", "蒸汽洗矿机", SteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.ORE_WASHER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAA", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "A C A", "A E A")
                    .aisle("AAAAA", "ACDCA", "AEDEA")
                    .aisle("AAAAA", "A C A", "A E A")
                    .aisle("AAAAA", "AASAA", "AAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(GTOPartAbility.STEAM_IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_ore_washer"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_FURNACE = multiblock("large_steam_furnace", "大型蒸汽熔炉", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.FURNACE_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition, RIGHT, UP, BACK)
                    .aisle("   A    A", "   A    A", "   A    A", "   A    A", "   A    A", "    AAAA ", "         ", "         ")
                    .aisle("BBBCCCCCC", "BKBDEEEED", "BBBDDDDDD", "DDDDDDDDD", "   DDDDDD", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("GGGCHHHHC", "GAGD    D", "GIGD II D", "GGGD JJ D", "GGGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("GGGCHHHHC", "GAGD    D", "GIGD II D", "GGGD JJ D", "GGGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("BBBCCCCCC", "BBBDDDDDD", "BBBDEEEED", "DDDDDDDDD", "   DDDDDD", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("   A    A", "   A    A", "   A    A", "   A    A", "   A    A", "    AAAA ", "         ", "         ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where('C', blocks(GTBlocks.BRONZE_BRICKS_HULL.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('E', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where('F', blocks(GTBlocks.BRONZE_HULL.get()))
                    .where('G', blocks(GCYMBlocks.CASING_INDUSTRIAL_STEAM.get()))
                    .where('H', blocks(Blocks.STONE_BRICKS))
                    .where('I', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_oven"))
            .register();

    public static final MultiblockMachineDefinition LEAP_FORWARD_ONE_BLAST_FURNACE = multiblock("leap_forward_one_blast_furnace", "跃进一号高炉", AdvancedPrimitiveBlastFurnaceMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineTooltips.INSTANCE.getLeapForwardOneBlastFurnaceTooltips().getSupplier())
            .recipeTypes(GTRecipeTypes.PRIMITIVE_BLAST_FURNACE_RECIPES)
            .block(GTBlocks.CASING_PRIMITIVE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(definition, BACK, RIGHT, UP)
                    .aisle("     AAAAA     ", "  DDDDDDDDDDD  ", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", "  DDDDDDDDDDD  ", "     AAAAA     ")
                    .aisle("     AAAAA     ", "    DEEEEED    ", "   DE     ED   ", "  DE       ED  ", " DE         ED ", "AE           EA", "AE           EA", "GE           EA", "AE           EA", "AE           EA", " DE         ED ", "  DE       ED  ", "   DE     ED   ", "    DEEEEED    ", "     AAAAA     ")
                    .aisle("     BCCCB     ", "    D     D    ", "   D       D   ", "  D         D  ", " D           D ", "B             B", "C             C", "C             C", "C             C", "B             B", " D           D ", "  D         D  ", "   D       D   ", "    D     D    ", "     BCCCB     ")
                    .aisle("     BCCCB     ", "    D     D    ", "   D       D   ", "  D         D  ", " D           D ", "B             B", "C             C", "C             C", "C             C", "B             B", " D           D ", "  D         D  ", "   D       D   ", "    D     D    ", "     BCCCB     ")
                    .aisle("     DDDDD     ", "    DEEEEED    ", "   DE     ED   ", "  DE       ED  ", " DE         ED ", "DE           ED", "DE           ED", "DE           ED", "DE           ED", "DE           ED", " DE         ED ", "  DE       ED  ", "   DE     ED   ", "    DEEEEED    ", "     DDDDD     ")
                    .aisle("               ", "     DDDDD     ", "    DDEEEDD    ", "   DEDFFFDED   ", "  DEEDFFFDEED  ", " DDDDDDDDDDDDDD", " DEFFDE EDFFEDF", " DEFFD   DFFEDF", " DEFFDE EDFFEDF", " DDDDDDDDDDDDDD", "  DEEDFFFDEED  ", "   DEDFFFDED   ", "    DDEEEDD    ", "     DDDDD     ", "               ")
                    .aisle("               ", "       D       ", "      EDE      ", "    EE   EE    ", "   EE     EE   ", "   E       E   ", "  E    E    E F", " DD   E E   DD ", "  E    E    E F", "   E       E   ", "   EE     EE   ", "    EE   EE    ", "      EDE      ", "       D       ", "               ")
                    .aisle("               ", "               ", "      EDE      ", "     E   E     ", "    E     E    ", "   E       E   ", "  E    E    E F", "  D   E E   D  ", "  E    E    E H", "   E       E   ", "    E     E    ", "     E   E     ", "      EDE      ", "               ", "               ").setRepeatable(2, 32)
                    .aisle("               ", "               ", "      DDD      ", "     DEEED     ", "    D     D    ", "   D       D   ", "  DE   E   ED F", "  DE  E E  ED  ", "  DE   E   ED F", "   D       D   ", "    D     D    ", "     DEEED     ", "      DDD      ", "               ", "               ")
                    .aisle("               ", "               ", "     FFFFF     ", "    FDEDEDF    ", "   FDEE EEDF   ", "  FDEE   EEDF  ", "  FEE  E  EEFFF", "  FD  E E  DF F", "  FEE  E  EEFFF", "  FDEE   EEDF  ", "   FDEE EEDF   ", "    FDEDEDF    ", "     FFFFF     ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "      EDE      ", "     EEEEE     ", "    EEEEEEE    ", "   EEEEEEEEE   ", "   DEEE EEED   ", "   EEEEEEEEE   ", "    EEEEEEE    ", "     EEEEE     ", "      EDE      ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "      EEE      ", "     E   E     ", "    E     E    ", "   E       E   ", "   E       E   ", "   E       E   ", "    E     E    ", "     E   E     ", "      EEE      ", "               ", "               ", "               ")
                    .where('A', blocks(GTBlocks.CASING_PRIMITIVE_BRICKS.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(4, 1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(2, 1)))
                    .where('B', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('C', blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where('D', blocks(Blocks.STONE_BRICKS))
                    .where('E', blocks(GTBlocks.CASING_PRIMITIVE_BRICKS.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('G', controller(blocks(definition.get())))
                    .where('H', GTOPredicates.countBlock("SteelFrame", ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_primitive_bricks"), GTCEu.id("block/multiblock/primitive_blast_furnace"))
            .register();

    public static final MultiblockMachineDefinition PETROCHEMICAL_PLANT = multiblock("petrochemical_plant", "石化工厂", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.PETROCHEMICAL_PLANT_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getPetrochemicalPlantTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .moduleTooltips(OVERCLOCK_HATCH, THREAD_HATCH)
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('B', blocks(GTOBlocks.SUPERCRITICAL_TURBINE_CASING.get()))
                    .where('C', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('E', blocks(GTOBlocks.OIL_GAS_TRANSPORTATION_PIPE_CASING.get()))
                    .where('F', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('G', blocks(GTOBlocks.PIKYONIUM_MACHINE_CASING.get()))
                    .where('H', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .setMinGlobalLimited(5)
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(ACCELERATE_HATCH).setMaxGlobalLimited(1)))
                    .where('I', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tungsten)))
                    .where('L', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('M', heatingCoils())
                    .where('N', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteelGC4)))
                    .where('O', blocks(GTBlocks.COMPUTER_CASING.get()))
                    .where('P', blocks(GTBlocks.COMPUTER_HEAT_VENT.get()))
                    .where('R', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('S', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('T', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('U', controller(blocks(definition.get())))
                    .where('V', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('W', abilities(MUFFLER))
                    .where('X', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('Y', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('Z', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('[', blocks(GTOBlocks.IRIDIUM_PIPE_CASING.get()))
                    .where('r', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where(']', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('^', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .addSubPattern(definition -> MultiBlockFileReader.builder().name("petrochem_crossrecipe").startBuild(definition)
                    .where('A', controller(blocks(definition.get())))
                    .where('B', blocks(GTOBlocks.THREE_PROOF_COMPUTER_CASING.get()))
                    .where('C', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(Predicates.abilities(THREAD_HATCH).setMaxGlobalLimited(1))
                            .or(Predicates.abilities(GTOPartAbility.OVERCLOCK_HATCH).setMaxGlobalLimited(1)))
                    .where('D', blocks(GTOBlocks.TUNGSTEN_ALLOY_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('E', blocks(GTOBlocks.STAINLESS_STEEL_CORROSION_RESISTANT_CASING.get()))
                    .where('F', blocks(GTOBlocks.MACHINING_CONTROL_CASING_MK3.get()))
                    .where('G', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('H', blocks(GTOBlocks.COOLANT_PIPE_CASING.get()))
                    .where('I', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('J', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('K', blocks(GTOBlocks.IRIDIUM_PIPE_CASING.get()))
                    .where('L', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('M', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('N', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('O', blocks(GTOBlocks.SENSOR_PROTECTIVE_COVER_CASING.get()))
                    .where('P', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('Q', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('R', blocks(GTOBlocks.INDUSTRIAL_FRAMELESS_GLASS.get()))
                    .where(' ', any())
                    .build())
            .register();

    public static final MultiblockMachineDefinition LARGE_PYROLYSE_OVEN = multiblock("large_pyrolyse_oven", "大型热解炉", CoilMultiblockMachine.createCoilMachine(false, false))
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.PYROLYSE_RECIPES)
            .parallelizableTooltips()
            .recipeModifiers(RecipeModifierFunction.HATCH_PARALLEL, RecipeModifierFunction::pyrolyseOvenOverclock)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAAAAAAAA", "ACCCCCCCCCCCA", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "             ")
                    .aisle("             ", "A FGFGFGFGF A", "BBBBBBDBBBBBB", "BDDDDDDDDDDDB", "BBBBBBDBBBBBB", "  FGFGFGFGF  ")
                    .aisle("             ", "A FGFGFGFGF A", "BBBBBBDBBBBBB", "B           B", "BEBBBBDBBBBEB", "  FGFGFGFGF  ")
                    .aisle("             ", "A FGFGFGFGF A", "BBBBBBDBBBBBB", "BDDDDDDDDDDDB", "BBBBBBDBBBBBB", "  FGFGFGFGF  ")
                    .aisle("AAAAAAAAAAAAA", "ACCCCCHCCCCCA", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "             ")
                    .where('A', frames(GTMaterials.Ruridit))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('C', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(autoAbilities(true, false, true)))
                    .where('D', heatingCoils())
                    .where('E', abilities(MUFFLER))
                    .where('F', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('G', frames(GTMaterials.StainlessSteel))
                    .where('H', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller instanceof ICoilMachine machine) {
                    components.add(Component.translatable("gtceu.multiblock.pyrolyse_oven.speed", machine.getCoilTier() == 0 ? 75 : 50 * (machine.getCoilTier() + 15)));
                }
            })
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/pyrolyse_oven"))
            .recoveryStacks(GTMachineModify::tinydustFromDustOutput)
            .register();

    public static final MultiblockMachineDefinition MEGA_WIREMILL = multiblock("mega_wiremill", "特大线材轧机", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.WIREMILL_RECIPES, FIBER_EXTRUSION_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getMegaWiremillTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_INVAR_HEATPROOF)
            .pattern(definition -> MultiBlockFileReader.start(definition, RIGHT, UP, BACK)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_MECHANICAL_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('C', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', frames(GTMaterials.TungstenSteel))
                    .where('E', blocks(GTOBlocks.PIKYONIUM_MACHINE_CASING.get()))
                    .where('F', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('G', blocks(GTBlocks.CASING_ASSEMBLY_CONTROL.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('I', heatingCoils())
                    .where('J', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_SPINDLE.get()))
                    .where('K', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('L', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_heatproof"), GTCEu.id("block/multiblock/gcym/large_wiremill"))
            .register();

    public static final MultiblockMachineDefinition SUPERCONDUCTING_MAGNETIC_PRESSER = multiblock("superconducting_magnetic_presser", "超导磁驱冲击装置", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getSuperconductingMagneticPresserTooltips().getSupplier())
            .recipeTypes(GTRecipeTypes.FORMING_PRESS_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('C', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('D', blocks(GTOBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('F', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('G', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('H', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where('I', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('J', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('K', blocks(GTOBlocks.AMPROSIUM_BOROSILICATE_GLASS.get()))
                    .where('L', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('M', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('N', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTOMaterials.Amprosium)))
                    .where('O', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('P', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('Q', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyC276)))
                    .where('R', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('S', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    // #592 deleted field_forge_press

    public static final MultiblockMachineDefinition HEAVY_ROLLING = multiblock("heavy_rolling", "重型辊轧机", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(ROLLING_RECIPES, CLUSTER_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getHeavyRollingTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING)
            .pattern(definition -> MultiBlockFileReader.start(definition, BACK, UP, LEFT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where('B', frames(GTMaterials.NaquadahAlloy))
                    .where('C', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('E', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('G', heatingCoils())
                    .where('H', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('I', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('J', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('K', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('L', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('M', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_SPINDLE.get()))
                    .where('N', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('O', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('P', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('Q', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('a', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/high_temperature_smelting_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition PHASE_CHANGE_CUBE = multiblock("phase_change_cube", "相变魔方", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.EXTRACTOR_RECIPES)
            .recipeTypes(GTRecipeTypes.FLUID_SOLIDFICATION_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getPhaseChangeCubeTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('B', frames(GTMaterials.HastelloyC276))
                    .where('C', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('D', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('E', heatingCoils())
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('I', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition PARTICLE_STREAM_MATRIX_FILLING_MACHINE = multiblock("particle_stream_matrix_filling_machine", "粒子流矩阵封装机", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.CANNER_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getParticleStreamMatrixFillingMachineTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.LAFIUM_MECHANICAL_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('C', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('E', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('F', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Trinaquadalloy)))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('I', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('J', blocks(GTOBlocks.ELECTRON_PERMEABLE_AMPROSIUM_COATED_GLASS.get()))
                    .where('K', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('L', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('M', heatingCoils())
                    .where('N', blocks(GTOBlocks.MULTI_FUNCTIONAL_CASING.get()))
                    .where('O', blocks(GTOBlocks.SPEEDING_PIPE.get()))
                    .where('P', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/lafium_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_extractor"))
            .register();

    public static final MultiblockMachineDefinition DISASSEMBLY = multiblock("disassembly", "拆解机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.DISASSEMBLY_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getDisassemblyTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getDisassemblyTooltips().getSupplier())
            .overclock()
            .block(GTOBlocks.PROCESS_MACHINE_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, BACK, UP, LEFT)
                    .aisle("AAA", "AAA", "AAA")
                    .aisle("BCB", "BDB", "CCC")
                    .aisle("BCB", "EFE", "GGG")
                    .aisle("HCB", "E#E", "GGG")
                    .aisle("BCB", "EFE", "GGG")
                    .aisle("BCB", "BDB", "CCC")
                    .aisle("AAA", "AAA", "AAA")
                    .where('A', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('C', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('D', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('E', frames(GTMaterials.StainlessSteel))
                    .where('F', blocks(Blocks.IRON_BARS))
                    .where('G', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where('B', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/process_machine_casing"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public static final MultiblockMachineDefinition ELEMENT_COPYING = multiblock("element_copying", "元素复制机", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .recipeTypes(GTORecipeTypes.ELEMENT_COPYING_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getElementCopyingTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("     AAFAA     ", "     AAFAA     ", "      AAA      ")
                    .aisle("   AAAAAAAAA   ", "   AACCCCCAA   ", "     ADADA     ")
                    .aisle("  AAAAABAAAAA  ", "  ACCCABACCCA  ", "   AAE ~ EAA   ")
                    .aisle(" AAAAA   AAAAA ", " ACCAA   AACCA ", "  AE       EA  ")
                    .aisle(" AAA       AAA ", " ACA       ACA ", "  A         A  ")
                    .aisle("AAAA       AAAA", "ACCA       ACCA", " AE         EA ")
                    .aisle("AAA         AAA", "ACA         ACA", "AD           DA")
                    .aisle("FAB         BAF", "FCB         BCF", "AA           AA")
                    .aisle("AAA         AAA", "ACA         ACA", "AD           DA")
                    .aisle("AAAA       AAAA", "ACCA       ACCA", " AE         EA ")
                    .aisle(" AAA       AAA ", " ACA       ACA ", "  A         A  ")
                    .aisle(" AAAAA   AAAAA ", " ACCAA   AACCA ", "  AE       EA  ")
                    .aisle("  AAAAABAAAAA  ", "  ACCCABACCCA  ", "   AAE   EAA   ")
                    .aisle("   AAAAAAAAA   ", "   AACCCCCAA   ", "     ADADA     ")
                    .aisle("     AAFAA     ", "     AAFAA     ", "      AAA      ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(5).setPreviewCount(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(GTOPartAbility.THREAD_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(OVERCLOCK_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('B', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('C', blocks(GTOBlocks.MOLECULAR_COIL.get()))
                    .where('D', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('E', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('F', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition ATOMIC_ENERGY_EXCITATION_PLANT = multiblock("atomic_energy_excitation_plant", "原子能激发工厂", CoilMultiblockMachine.createCoilMachine(false, true))
            .allRotation()
            .recipeTypes(GTORecipeTypes.ATOMIC_ENERGY_EXCITATION_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where('B', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('C', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('D', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('E', blocks(GTOBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where('F', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.BabbittAlloy)))
                    .where('H', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('I', blocks(GTOBlocks.ACCELERATED_PIPELINE.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Trinium)))
                    .where('K', blocks(GTOBlocks.BOROSILICATE_GLASS.get()))
                    .where('L', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('M', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Amprosium)))
                    .where('N', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('O', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('P', heatingCoils())
                    .where('Q', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/dimensionally_transcendent_casing"), GTCEu.id("block/multiblock/cleanroom"))
            .register();

    public static final MultiblockMachineDefinition INDUSTRIAL_FLOTATION_CELL = multiblock("industrial_flotation_cell", "工业浮选机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.FLOTATING_BENEFICIATION_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getIndustrialFlotationCellTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getIndustrialFlotationCellTooltips().getSupplier())
            .parallelizableTooltips()
            .perfectOCTooltips()
            .fromSourceTooltips("GTNH")
            .parallelizablePerfectOverclock()
            .block(GTOBlocks.HASTELLOY_N_75_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RIGHT, BACK, UP)
                    .aisle("  AAA  ", " AAAAA ", "AAAAAAA", "AAAAAAA", "AAAAAAA", " AAAAA ", "  AAA  ")
                    .aisle("  A~A  ", " AADAA ", "AADDDAA", "ADDDDDA", "AADDDAA", " AADAA ", "  AAA  ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "       ", "   E   ", "  EEE  ", "   E   ", "       ", "       ")
                    .where('~', controller(blocks(definition.get())))
                    .where('D', blocks(GTOBlocks.HASTELLOY_N_75_GEARBOX.get()))
                    .where('B', blocks(GTOBlocks.FLOTATION_CELL.get()))
                    .where('A', blocks(GTOBlocks.HASTELLOY_N_75_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(PARALLEL_HATCH).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTOBlocks.HASTELLOY_N_75_PIPE.get()))
                    .where('E', blocks(GTOBlocks.HASTELLOY_N_75_CASING.get()))
                    .where(' ', any())
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hastelloy_n_75_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition VACUUM_DRYING_FURNACE = multiblock("vacuum_drying_furnace", "真空干燥炉", CoilCustomParallelMultiblockMachine.createParallelCoil(m -> {
        if (m.getRecipeType() == GTORecipeTypes.DEHYDRATOR_RECIPES) {
            return 1L << (long) (m.getTemperature() / 900.0D);
        }
        return 1;
    }, true, false, false))
            .allRotation()
            .recipeTypes(GTORecipeTypes.VACUUM_DRYING_RECIPES)
            .recipeTypes(GTORecipeTypes.DEHYDRATOR_RECIPES)
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.2")
            .tooltipsKey("gtocore.machine.recipe.run", Component.translatable("gtceu.vacuum_drying"))
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.0")
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.1")
            .tooltipsKey("gtocore.machine.recipe.run", Component.translatable("gtceu.dehydrator"))
            .coilParallelTooltips()
            .disabledCombined()
            .recipeModifier((m, r) -> {
                if (m instanceof CoilCustomParallelMultiblockMachine machine) {
                    if (machine.getRecipeType() == GTORecipeTypes.DEHYDRATOR_RECIPES) {
                        return RecipeModifierFunction.overclocking(m, r);
                    } else {
                        return RecipeModifierFunction.ebfOverclock(m, r);
                    }
                }
                return null;
            })
            .block(GTOBlocks.RED_STEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAA", "BBB", "BBB", "BBB", "AAA")
                    .aisle("AAA", "B B", "B B", "B B", "ACA")
                    .aisle("A~A", "BBB", "BBB", "BBB", "AAA")
                    .where('~', controller(blocks(definition.get())))
                    .where('C', abilities(MUFFLER).setExactLimit(1))
                    .where('A', blocks(GTOBlocks.RED_STEEL_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', heatingCoils())
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/red_steel_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .recoveryStacks((m, r) -> {
                if (m instanceof IRecipeLogicMachine lm && lm.getRecipeTypes()[lm.getActiveRecipeType()] == GTORecipeTypes.VACUUM_DRYING_RECIPES)
                    return GTMachineModify.tinydustFromDustOutput(m, r);
                return ChemicalHelper.get(TagPrefix.dustTiny, GTMaterials.Salt);
            })
            .register();

    public static final MultiblockMachineDefinition MOLTEN_CORE = multiblock("molten_core", "熔火之心", MoltenCoreMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.FLUID_HEATER_RECIPES, GTORecipeTypes.DISTILLERY_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getMoltenCoreTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("       AAA       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "                 ")
                    .aisle("      AABAA      ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ")
                    .aisle("    AACCCCCAA    ", "      CCCCC      ", "      CCCCC      ", "      DDDDD      ", "                 ", "      DDDDD      ", "      CCCCC      ", "      CCCCC      ", "       A A       ", "       ABA       ")
                    .aisle("   ACCEEEEECCA   ", "    CCEEEEECC    ", "    CCEEEEECC    ", "    DDEEEEEDD    ", "      FFFFF      ", "    DDEEEEEDD    ", "    CCEEEEECC    ", "    CCEEEEECC    ", "      GGGGG      ", "       ABA       ")
                    .aisle("  ACEEEEEEEEECA  ", "   CEEE   EEEC   ", "   CEEE   EEEC   ", "   DEEE   EEED   ", "    FFF   FFF    ", "   DEEE   EEED   ", "   CEEE   EEEC   ", "   CEEEEEEEEEC   ", "     GGGGGGG     ", "       BBB       ")
                    .aisle("  ACEEEEEEEEECA  ", "   CE   H   EC   ", "   CE   H   EC   ", "   DE B H B ED   ", "    F   H   F    ", "   DE B H B ED   ", "   CE   H   EC   ", "   CEEEEEEEEEC   ", "    GGGGGGGGG    ", "      BGGGB      ")
                    .aisle(" ACEEEEEEEEEEECA ", "  CEE       EEC  ", "  CEE       EEC  ", "  DEEBBBBBBBEED  ", "   FF       FF   ", "  DEEBBBBBBBEED  ", "  CEE       EEC  ", "  CEEEEEEEEEEEC  ", "   GGGGEEEGGGG   ", "     BGIIIGB     ")
                    .aisle("AACEEEEEEEEEEECAA", "AACE    J    ECAA", "AACE    J    ECAA", "AADE  B J B  EDAA", "AA F    J    F AA", "AADE  B J B  EDAA", "AACE    J    ECAA", "AACEEEE J EEEECAA", "AAAGGGEEJEEGGGAAA", " AAABGIIIIIGBAAA ")
                    .aisle("ABCEEEEEEEEEEECBA", " BCE H J J H ECB ", " BCE H J J H ECB ", " BDE HBJ JBH EDB ", " B F H J J H F B ", " BDE HBJ JBH EDB ", " BCE H J J H ECB ", " BCEEEEJ JEEEECB ", " B GGGEJ JEGGG B ", " BBBBGIIKIIGBBBB ")
                    .aisle("AACEEEEEEEEEEECAA", "AACE    J    ECAA", "AACE    J    ECAA", "AADE  B J B  EDAA", "AA F    J    F AA", "AADE  B J B  EDAA", "AACE    J    ECAA", "AACEEEE J EEEECAA", "AAAGGGEEJEEGGGAAA", " AAABGIIIIIGBAAA ")
                    .aisle(" ACEEEEEEEEEEECA ", "  CEE       EEC  ", "  CEE       EEC  ", "  DEEBBBBBBBEED  ", "   FF       FF   ", "  DEEBBBBBBBEED  ", "  CEE       EEC  ", "  CEEEEEEEEEEEC  ", "   GGGGEEEGGGG   ", "     BGIIIGB     ")
                    .aisle("  ACEEEEEEEEECA  ", "   CE   H   EC   ", "   CE   H   EC   ", "   DE B H B ED   ", "    F   H   F    ", "   DE B H B ED   ", "   CE   H   EC   ", "   CEEEEEEEEEC   ", "    GGGGGGGGG    ", "      BGGGB      ")
                    .aisle("  ACEEEEEEEEECA  ", "   CEEE   EEEC   ", "   CEEE   EEEC   ", "   DEEE   EEED   ", "    FFF   FFF    ", "   DEEE   EEED   ", "   CEEE   EEEC   ", "   CEEEEEEEEEC   ", "     GGGGGGG     ", "       BBB       ")
                    .aisle("   ACCEEEEECCA   ", "    CCEEEEECC    ", "    CCEEEEECC    ", "    DDEEEEEDD    ", "      FFFFF      ", "    DDEEEEEDD    ", "    CCEEEEECC    ", "    CCEEEEECC    ", "      GGGGG      ", "       ABA       ")
                    .aisle("    AACCCCCAA    ", "      CCCCC      ", "      CCCCC      ", "      DDDDD      ", "                 ", "      DDDDD      ", "      CCCCC      ", "      CCCCC      ", "       A A       ", "       ABA       ")
                    .aisle("      AABAA      ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ")
                    .aisle("       AAA       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "                 ")
                    .where('A', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('B', frames(GTOMaterials.Inconel792))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTOBlocks.PI_HIGH_TEMPERATURE_INSULATION_MECHANICAL_HOUSING.get()))
                    .where('E', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('I', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('J', heatingCoils())
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAHHHHHAAAAAA", "A  A  HHHHH  A  A", "A  A  HHHHH  A  A", "AAAA         AAAA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("A  AAAAAAAAAAA  A", " BB   DDDDD   BB ", " BB   AAAAA   BB ", "A  A         A  A", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "      AAAAA      ", "                 ")
                    .aisle("A  AAAAAAAAAAA  A", " BB  DAEEEAD  BB ", "ABB  AAEEEAA  BBA", "A  A  FEGEF  A  A", "      FEGEF      ", "      FEGEF      ", "      FEGEF      ", "      FEGEF      ", "      FEGEF      ", "      FEGEF      ", "     AAEEEAA     ", "                 ")
                    .aisle("A  AAAAAAAAAAA  A", "ABB  DEEEEED  BBA", " BB  AE   EA  BB ", "A  A  E   E  A  A", "      E   E      ", "      E   E      ", "      E   E      ", "      E   E      ", "      E   E      ", "      E   E      ", "     AE   EA     ", "       EEE       ")
                    .aisle("A  AAAAAAAAAAA  A", " BB  DEEEEED  BB ", " BB  AE C EA  BB ", "A  A  G C G  A  A", "      G C G      ", "      G C G      ", "      G C G      ", "      G C G      ", "      G C G      ", "      G C G      ", "    AAE C EA     ", "       ECE       ")
                    .aisle("A  AAAAAAAAAAA  A", " BB ADEEEEEDA BB ", "ABB AAE   EAA BBA", "A  AA E   E AA  A", "    AEE   EEA    ", "    A E   E A    ", "    AEE   EEA    ", "    A E   E A    ", "    AEE   EEA    ", "    A E   E A    ", "   AA E   EAAA   ", "    AAAEEEAAA    ")
                    .aisle("A  AAAAAAAAAAA  A", "ABBDDEEEEEEEDDBBA", " BBAAEEEEEEEAABB ", "A  A EEEEEEE A  A", "    EEEEEEEEE    ", "     EEEEEEE     ", "    EEEEEEEEE    ", "     EEEEEEE     ", "    EEEEEEEEE    ", "     EEEEEEE     ", "   A EEEEEEE A   ", "      AAAAA      ")
                    .aisle("A  AAAAAAAAAAA  A", " BBDEEEEEEEEEDBB ", " BBAE   E   EABB ", "A  AE   E   EA  A", "    E   E   E    ", "    E   E   E    ", "    E   E   E    ", "    E   E   E    ", "    E   E   E    ", "    E   E   E    ", "   AE   E   EA   ", "     EEEAEEE     ")
                    .aisle("A  AAAAAAAAAAA  A", " BBDEEEEEEEEEDBB ", "ABBAE C E C EABBA", "A  AG C E C GA  A", "    G C E C G    ", "    G C E C G    ", "    G C E C G    ", "    G C E C G    ", "    G C E C G    ", "    G C E C G    ", "   AE C E C EA   ", "     ECEAECE     ")
                    .aisle("A  AAAAAAAAAAA  A", "ABBDEEEEEEEEEDBBA", " BBAE   E   EABB ", "A  AE   E   EA  A", "    E   E   E    ", "    E   E   E    ", "    E   E   E    ", "    E   E   E    ", "    E   E   E    ", "    E   E   E    ", "   AE   E   EA   ", "     EEEAEEE     ")
                    .aisle("A  AAAAAAAAAAA  A", " BBDAEEEAEEEADBB ", " BBAAEEEAEEEAABB ", "A  AFEEEAEEEFA  A", "    FEEEAEEEF    ", "    FEEEAEEEF    ", "    FEEEAEEEF    ", "    FEEEAEEEF    ", "    FEEEAEEEF    ", "    FEEEAEEEF    ", "   AAEEEAEEEAA   ", "        A        ")
                    .aisle("A  AAAAAAAAAAA  A", " BB DDDDADDDD BB ", "ABB AAAAAAAAA BBA", "A  A         A  A", "                 ", "                 ", "                 ", "       AAA       ", "       ACA       ", "       AAA       ", "    AAAAAAAAA    ", "                 ")
                    .aisle("A  AAAA   AAAA  A", "ABBC    C    CBBA", " BBC    C    CBB ", "A  A    C    A  A", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "       AAA       ", "       AAA       ", "                 ")
                    .aisle("A  AAA     AAA  A", " BBC         CBB ", " BBC         CBB ", "A  A         A  A", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "       AAA       ", "                 ")
                    .aisle("AAAA         AAAA", "A  A         A  A", "A  A         A  A", "AAAA         AAAA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAA           AAA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AA             AA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AA             AA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("A               A", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "        I        ", "                 ", "                 ")
                    .where('A', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('B', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('C', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('D', blocks(GTOBlocks.PI_HIGH_TEMPERATURE_INSULATION_MECHANICAL_HOUSING.get()))
                    .where('E', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Inconel792)))
                    .where('G', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('H', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes())))
                    .where('I', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTOCore.id("block/machines/molten_core"))
            .register();

    public static final MultiblockMachineDefinition ELECTRIC_IMPLOSION_COMPRESSOR = multiblock("electric_implosion_compressor", "电力聚爆压缩机", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .moduleTooltips(INPUT_LASER, OVERCLOCK_HATCH)
            .recipeTypes(GTORecipeTypes.ELECTRIC_IMPLOSION_COMPRESSOR_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("XXXXX", "F###F", "F###F", "F###F", "F###F", "F###F", "F###F", "XXXXX")
                    .aisle("XXXXX", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "XXXXX")
                    .aisle("XXXXX", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "XXMXX")
                    .aisle("XXXXX", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "XXXXX")
                    .aisle("XXSXX", "F###F", "F###F", "F###F", "F###F", "F###F", "F###F", "XXXXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('X',
                            blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()).setMinGlobalLimited(40)
                                    .or(GTOPredicates.autoAccelerateAbilities(definition.getRecipeTypes()))
                                    .or(autoAbilities(true, false, true)))
                    .where('P', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('G', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('F', frames(GTMaterials.TungstenSteel))
                    .where('A', air())
                    .where('#', any())
                    .where('M', abilities(MUFFLER))
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAAAAAAAA", "AAAAAAAAAAAAA", "AIIAAHHHAAIIA", "AIIAAHHHAAIIA", "AAAAAHHHAAAAA", "   AAHHHAA   ", "   AAHHHAA   ", "    AAAAA    ")
                    .aisle("AAAAAAAAAAAAA", "ADDAAAAAAADDA", "D  D K K D  D", "D  D     D  E", "ADDA K K ADDA", "   E     E   ", "   A K K A   ", "    AEDEA    ")
                    .aisle("AAAAAAAAAAAAA", "AEEAJEDEJAEEA", "E  E K K E  E", "E  E     E  E", "AEEA K K AEEA", "   E     E   ", "   A K K A   ", "    AEDEA    ")
                    .aisle("AAAAAAAAAAAAA", "ADDAJEDEJADDA", "D  D K K D  D", "D  D     D  D", "ADDA K K ADDA", "   E     E   ", "   A K K A   ", "    AEDEA    ")
                    .aisle("AAAAAAAAAAAAA", "ADDAJEDEJADDA", "D  D K K D  D", "D  D     D  D", "ADDA K K ADDA", "   E     E   ", "   A K K A   ", "    AEDEA    ")
                    .aisle("AAAAAAAAAAAAA", "AEEAJEDEJAEEA", "E  E K K E  E", "E  E     E  E", "AEEA K K AEEA", "   E     E   ", "   A K K A   ", "    AEDEA    ")
                    .aisle("AAAAAAAAAAAAA", "ADDAJEDEJADDA", "D  D K K D  D", "D  D     D  D", "ADDA K K ADDA", "   E     E   ", "   A K K A   ", "    AEDEA    ")
                    .aisle("AAAAAAAAAAAAA", "AAAAAAAAAAAAA", "AHHAAK KAAHHA", "AHHAA   AAHHA", "AAAAAK KAAAAA", "   AA   AA   ", "   AAK KAA   ", "    AAAAA    ")
                    .aisle("AAAA     AAAA", "BBBB     BBBB", "CGGC HHH CGGC", "CGGC HHH CGGC", "BBBB HHH BBBB", "     HHH     ", "     HHH     ", "             ")
                    .aisle("AAAA     AAAA", "BBBB     BBBB", "CBBC     CBBC", "CBBC     CBBC", "BBBB     BBBB", "             ", "             ", "             ")
                    .aisle("AAAA     AAAA", "BBBB     BBBB", "CBBC     CBBC", "CBBC     CBBC", "BBBB     BBBB", "             ", "             ", "             ")
                    .aisle("AAAA     AAAA", "BBBB     BBBB", "CBBC     CBBC", "CBBC     CBBC", "BBBB     BBBB", "             ", "             ", "             ")
                    .aisle("AAAA  L  AAAA", "BBBB     BBBB", "CFFC     CFFC", "CFFC     CFFC", "BBBB     BBBB", "             ", "             ", "             ")
                    .where('A', blocks(GTOBlocks.TUNGSTEN_ALLOY_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('B', blocks(GTOBlocks.THREE_PROOF_COMPUTER_CASING.get()))
                    .where('C', blocks(GTOBlocks.ENERGY_CONTROL_CASING_MK3.get()))
                    .where('D', blocks(GTOBlocks.AMPROSIUM_BOROSILICATE_GLASS.get()))
                    .where('E', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('F', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(2))
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes()))
                            .or(Predicates.abilities(OVERCLOCK_HATCH).setMaxGlobalLimited(1)))
                    .where('G', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('H', blocks(GTOBlocks.TUNGSTEN_ALLOY_RADIATION_SHIELDING_MECHANICAL_BLOCK.get()))
                    .where('I', abilities(MUFFLER))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.TungstenAlloyYG10)))
                    .where('K', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('L', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"),
                    GTCEu.id("block/multiblock/implosion_compressor"))
            .register();

    public static final MultiblockMachineDefinition STELLAR_FORGE = multiblock("stellar_forge", "恒星炎炀锻炉", StellarForgeMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.STELLAR_FORGE_RECIPES)
            .tooltips(GTOMachineTooltips.INSTANCE.getStellarForgeTooltips().getSupplier())
            .laserTooltips()
            .block(GCYMBlocks.CASING_ATOMIC)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('B', blocks(GCYMBlocks.CASING_ATOMIC.get()))
                    .where('C', blocks(GCYMBlocks.CASING_ATOMIC.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Trinium)))
                    .where('E', blocks(GTOBlocks.ADVANCED_FUSION_COIL.get()))
                    .where('F', blocks(GTOBlocks.RADIATION_ABSORBENT_CASING.get()))
                    .where('G', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('H', blocks(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE.get()))
                    .where('I', blocks(GTOBlocks.ENHANCE_HYPER_MECHANICAL_CASING.get()))
                    .where('J', blocks(GTOBlocks.MAGNESIUM_OXIDE_CERAMIC_HIGH_TEMPERATURE_INSULATION_MECHANICAL_BLOCK.get()))
                    .where('K', blocks(GTOBlocks.MAGTECH_CASING.get()))
                    .where('L', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('M', GTOPredicates.tierBlock(SCMAP, STELLAR_CONTAINMENT_TIER))
                    .where('N', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('O', blocks(GTOBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('P', blocks(GTOBlocks.EXTREME_DENSITY_CASING.get()))
                    .where('Q', controller(blocks(definition.get())))
                    .where('R', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('S', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/atomic_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition COMPONENT_ASSEMBLY_LINE = multiblock("component_assembly_line", "部件装配车间", TierCasingCrossRecipeMultiblockMachine.createParallel(MachineUtils::getHatchParallel, COMPONENT_ASSEMBLY_CASING_TIER))
            .allRotation()
            .recipeTypes(GTORecipeTypes.COMPONENT_ASSEMBLY_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getComponentAssemblyLineTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('C', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('D', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('F', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('G', blocks(GTOBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('H', blocks(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE.get()))
                    .where('I', blocks(GTOBlocks.PRECISION_PROCESSING_MECHANICAL_CASING.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSLASteel)))
                    .where('K', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(abilities(PARALLEL_HATCH).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes())))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('M', blocks(GTBlocks.CASING_EXTREME_ENGINE_INTAKE.get()))
                    .where('N', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('O', blocks(GTBlocks.HERMETIC_CASING_LuV.get()))
                    .where('P', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('Q', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('R', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('S', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('T', blocks(GTOBlocks.ZIRCONIA_CERAMIC_HIGH_STRENGTH_BENDING_RESISTANCE_MECHANICAL_BLOCK.get()))
                    .where('U', GTOPredicates.light())
                    .where('V', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('W', blocks(GTOBlocks.MACHINE_CASING_CIRCUIT_ASSEMBLY_LINE.get()))
                    .where('X', blocks(GTOBlocks.SPACETIME_ASSEMBLY_LINE_UNIT.get()))
                    .where('Y', blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where('Z', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('[', GTOPredicates.tierBlock(CALMAP, COMPONENT_ASSEMBLY_CASING_TIER))
                    .where('\\', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_INTEGRATED_ORE_PROCESSOR = multiblock("advanced_integrated_ore_processor", "进阶集成矿石处理厂", CrossRecipeMultiblockMachine.createParallel(false, false, m -> Long.MAX_VALUE))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.INTEGRATED_ORE_PROCESSOR)
            .tooltips(GTOMachineStories.INSTANCE.getAdvancedIntegratedOreProcessorTooltips().getSupplier())
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(Long.MAX_VALUE))
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.DIMENSION_INJECTION_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('C', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes())))
                    .where('D', controller(blocks(definition.get())))
                    .where('E', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('F', blocks(GCYMBlocks.CASING_ATOMIC.get()))
                    .where('G', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('H', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('I', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('J', frames(GTOMaterials.Mithril))
                    .where('K', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('L', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('M', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('N', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('O', blocks(GTOBlocks.AMPROSIUM_BOROSILICATE_GLASS.get()))
                    .where('P', blocks(GTOBlocks.HASTELLOY_N_75_CASING.get()))
                    .where('Q', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('R', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('S', blocks(GTOBlocks.QUARK_EXCLUSION_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/dimension_injection_casing"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public static final MultiblockMachineDefinition INTEGRATED_ASSEMBLER = multiblock("integrated_assembler", "综合组装车间", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(ASSEMBLER_RECIPES, LAMINATOR_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getIntegratedAssemblerTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, FRONT, UP, RIGHT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('B', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('E', frames(GTMaterials.HSLASteel))
                    .where('F', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('G', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('H', blocks(GTOBlocks.SPACETIME_ASSEMBLY_LINE_UNIT.get()))
                    .where('I', frames(GTMaterials.StainlessSteel))
                    .where('J', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('K', blocks(GTBlocks.LAMPS.get(DyeColor.WHITE).get()))
                    .where('L', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('M', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('O', blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where('P', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('Q', blocks(GTOBlocks.MACHINE_CASING_CIRCUIT_ASSEMBLY_LINE.get()))
                    .where('R', blocks(Blocks.IRON_BARS))
                    .where('S', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('T', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();
}
