package com.gtocore.common.data.machines;

import com.gtocore.api.machine.part.GTOPartAbility;
import com.gtocore.api.pattern.GTOPredicates;
import com.gtocore.common.data.*;
import com.gtocore.common.machine.multiblock.electric.FishingGroundMachine;
import com.gtocore.common.machine.multiblock.electric.StellarForgeMachine;
import com.gtocore.common.machine.multiblock.electric.assembly.PrecisionAssemblerMachine;
import com.gtocore.common.machine.multiblock.electric.voidseries.VoidFluidDrillingRigMachine;
import com.gtocore.common.machine.multiblock.electric.voidseries.VoidMinerMachine;
import com.gtocore.common.machine.multiblock.noenergy.AdvancedPrimitiveBlastFurnaceMachine;
import com.gtocore.common.machine.multiblock.steam.LargeSteamCircuitAssemblerMachine;
import com.gtocore.common.machine.multiblock.steam.LargeSteamMultiblockMachine;
import com.gtocore.common.machine.multiblock.steam.SteamMultiblockMachine;

import com.gtolib.GTOCore;
import com.gtolib.api.annotation.NewDataAttributes;
import com.gtolib.api.annotation.component_builder.ComponentBuilder;
import com.gtolib.api.annotation.component_builder.StyleBuilder;
import com.gtolib.api.machine.feature.multiblock.ICoilMachine;
import com.gtolib.api.machine.multiblock.*;
import com.gtolib.api.recipe.modifier.ParallelLogic;
import com.gtolib.api.recipe.modifier.RecipeModifierFunction;
import com.gtolib.utils.MultiBlockFileReader;
import com.gtolib.utils.RegistriesUtils;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.GTValues;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.machine.multiblock.PartAbility;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.MultiblockShapeInfo;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.*;

import net.minecraft.core.Direction;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.DirectionalBlock;
import net.minecraft.world.level.material.Fluids;

import appeng.core.definitions.AEBlocks;

import java.util.Comparator;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gregtechceu.gtceu.api.pattern.util.RelativeDirection.*;
import static com.gregtechceu.gtceu.common.data.GTMaterials.Aluminium;
import static com.gtocore.common.block.BlockMap.CALMAP;
import static com.gtocore.common.block.BlockMap.SCMAP;
import static com.gtolib.api.GTOValues.*;
import static com.gtolib.utils.register.MachineRegisterUtils.CHEMICAL_PLANT_DISPLAY;
import static com.gtolib.utils.register.MachineRegisterUtils.multiblock;

public final class MultiBlockA {

    public static void init() {}

    public static final MultiblockMachineDefinition EVAPORATION_PLANT = multiblock("evaporation_plant", "蒸发塔", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.EVAPORATION_RECIPES)
            .overclock()
            .block(GTOBlocks.STAINLESS_EVAPORATION_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RIGHT, BACK, UP)
                    .aisle("FYF", "YYY", "FYF")
                    .aisle("YSY", "Y#Y", "YYY")
                    .aisle("XXX", "X#X", "XXX").setRepeatable(5)
                    .aisle(" Z ", "ZZZ", " Z ")
                    .where('S', Predicates.controller(blocks(definition.getBlock())))
                    .where('Y', blocks(GTOBlocks.STAINLESS_EVAPORATION_CASING.get())
                            .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setMinGlobalLimited(1)
                                    .setMaxGlobalLimited(2))
                            .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setExactLimit(1))
                            .or(Predicates.abilities(PartAbility.EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where('X', blocks(GTOBlocks.STAINLESS_EVAPORATION_CASING.get())
                            .or(Predicates.abilities(PartAbility.EXPORT_FLUIDS_1X).setMinLayerLimited(1)
                                    .setMaxLayerLimited(1)))
                    .where('Z', blocks(GTOBlocks.STAINLESS_EVAPORATION_CASING.get()))
                    .where('F', Predicates.frames(Aluminium))
                    .where('#', Predicates.air())
                    .where(' ', Predicates.any())
                    .build())
            .partSorter(Comparator.comparingInt(a -> a.self().getPos().getY()))
            .workableCasingRenderer(GTOCore.id("block/casings/stainless_evaporation_casing"), GTCEu.id("block/multiblock/evaporation_plant"))
            .register();

    public static final MultiblockMachineDefinition PLASMA_CONDENSER = multiblock("plasma_condenser", "等离子冷凝器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.PLASMA_CONDENSER_RECIPES)
            .perfectOCTooltips()
            .perfectOverclock()
            .block(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("       ", "       ", "  aaa  ", "  aaa  ", "  aaa  ", "       ", "       ")
                    .aisle("       ", "  aaa  ", " aaaaa ", " aabaa ", " aaaaa ", "  aaa  ", "       ")
                    .aisle("  aaa  ", " aaaaa ", "aabbbaa", "aabcbaa", "aabbbaa", " aaaaa ", "  aaa  ")
                    .aisle("  aaa  ", " aabaa ", "aabcbaa", "abcccba", "aabcbaa", " aabaa ", "  aaa  ")
                    .aisle("  aaa  ", " aaaaa ", "aabbbaa", "aabcbaa", "aabbbaa", " aaaaa ", "  aaa  ")
                    .aisle("       ", "  aaa  ", " aaaaa ", " aabaa ", " aaaaa ", "  aaa  ", "       ")
                    .aisle("       ", "       ", "  aaa  ", "  ada  ", "  aaa  ", "       ", "       ")
                    .where('a', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get())
                            .setMinGlobalLimited(120)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('b', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('c', blocks(GTOBlocks.LASER_COOLING_CASING.get()))
                    .where('d', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/antifreeze_heatproof_machine_casing"), GTCEu.id("block/multiblock/vacuum_freezer"))
            .register();

    public static final MultiblockMachineDefinition RARE_EARTH_CENTRIFUGAL = multiblock("rare_earth_centrifugal", "稀土离心机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.RARE_EARTH_CENTRIFUGAL_RECIPES)
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTBlocks.CASING_HSSE_STURDY)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" bbb ", "bbbbb", "bbbbb", "bbbbb", " bbb ")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle("bbbbb", "bcdcb", "bcdcb", "bcdcb", "bbbbb")
                    .aisle("bbbbb", "bcccb", "bcccb", "bcccb", "bbbbb")
                    .aisle(" bbb ", "bbbbb", "bbabb", "bbbbb", " bbb ")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_HSSE_STURDY.get())
                            .setMinGlobalLimited(80)
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('d', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_sturdy_hsse"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_RARE_EARTH_CENTRIFUGAL = multiblock("advanced_rare_earth_centrifugal", "进阶稀土离心机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.RARE_EARTH_CENTRIFUGAL_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.SPS_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("   AAAAAAA              ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("  AADDDDDAA             ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ")
                    .aisle(" AADDDDDDDA             ", "  B  D  B               ", "  B  E  B               ", " CB EEE BC              ", "  B EEE B               ", "  B EEE B               ", " CB EEE BC              ", "  B EEE B               ", "  B  E  B               ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("AADDDDDDDDA             ", "     D                  ", "   EEEEE                ", "C  EEEEE  C             ", "   E F E                ", "   E F E                ", "C  E F E  C             ", "   EEEEE                ", "   EEEEE                ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDAA            ", "    DDD                 ", "   EEEEE                ", "C EEGGGEE C             ", "  E H H E               ", "  E H H E               ", "C E H H E C             ", "  EEGGGEE               ", "   EEEEE                ", "    DDD                 ", "                        ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDAAA  AAAAA   ", "B DDDDDDD B             ", "B EEEEEE  B             ", "C EEGGGEE C             ", "B EF G FE B             ", "B EF G FE B             ", "C EF G FE C             ", "B EEGGGEE B             ", "B EEEGEEE B             ", "    D D                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDDDAAAADDDAA  ", "    DDD          B      ", "   EEEEE         B      ", "C EEGGGEE C    CCCCC    ", "  E H H E        B      ", "  E H H E        B      ", "C E H H E C    CCCCC    ", "  EEGGGEE        B      ", "   EEEEE         B      ", "    DAD                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDDDDADDDDDDA  ", "     D                  ", "   EEEEE                ", "C  EEEEE  C   C     C   ", "   E F E                ", "   E F E                ", "C  E F E  C   C     C   ", "   EEEEE                ", "   EEEEE                ", "                        ", "    IAI                 ", "    IAI                 ", "                        ")
                    .aisle("AAADDDDDDDDDDDDDDDDDDAb ", "  B  D  B     B  D  B   ", "  B  E  B     B  E  B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B EEE B     B EEE B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B  E  B     B  E  B   ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("  AADDDDDDDDDDDDDDDDDDb ", "                 D      ", "               EEEEE    ", "  C     C   C  EEEEE  C ", "               E F E    ", "               E F E    ", "  C     C   C  E F E  C ", "               EEEEE    ", "               EEEEE    ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("   ADDDDDDDDDDDDDDDDDDAb", "     B   A      DDD   Ab", "     B   A     EEEEE  Ab", "   CCCCC A  C EEGGGEE C ", "     B   A    E H H E   ", "     B   A    E H H E   ", "   CCCCC A  C E H H E C ", "     B   A    EEGGGEE   ", "     B   A     EEEEE    ", "         A      DDD     ", "         A     III      ", "    IAAAAAIIIIII        ", "     DDDDDDDD           ")
                    .aisle("   ADDDDDDDDDDDDDDDDDDAb", "        AAA B DDDDDDD B~", "        AAA B EEEEEE  Bb", "        AAA C EEGGGEE C ", "        AAA B EF G FE B ", "        AAA B EF G FE B ", "        AAA C EF G FE C ", "        AAA B EEGGGEE B ", "        AAA B EEEGEEE B ", "        AAA     AGD     ", "        AAA    AAA      ", "    IIIIAAAAAAAA        ", "     DDDDDDDD           ")
                    .aisle("   ADDDDDDDDDDDDDDDDDDAb", "     B   A      DDD   Ab", "     B   A     EEEEE  Ab", "   CCCCC A  C EEGGGEE C ", "     B   A    E H H E   ", "     B   A    E H H E   ", "   CCCCC A  C E H H E C ", "     B   A    EEGGGEE   ", "     B   A     EEEEE    ", "         A      DDD     ", "         A     III      ", "    IAAAAAIIIIII        ", "     DDDDDDDD           ")
                    .aisle("  AADDDDDDDDDDDDDDDDDDb ", "                 D      ", "               EEEEE    ", "  C     C   C  EEEEE  C ", "               E F E    ", "               E F E    ", "  C     C   C  E F E  C ", "               EEEEE    ", "               EEEEE    ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("AAADDDDDDDDDDDDDDDDDDAb ", "  B  D  B     B  D  B   ", "  B  E  B     B  E  B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B EEE B     B EEE B   ", " CB EEE BC   CB EEE BC  ", "  B EEE B     B EEE B   ", "  B  E  B     B  E  B   ", "                        ", "                        ", "    IAI                 ", "                        ")
                    .aisle("ADDDDDDDDDDDDDADDDDDDA  ", "     D                  ", "   EEEEE                ", "C  EEEEE  C   C     C   ", "   E F E                ", "   E F E                ", "C  E F E  C   C     C   ", "   EEEEE                ", "   EEEEE                ", "                        ", "    IAI                 ", "    IAI                 ", "                        ")
                    .aisle("ADDDDDDDDDDDDAAAADDDAA  ", "    DDD          B      ", "   EEEEE         B      ", "C EEGGGEE C    CCCCC    ", "  E H H E        B      ", "  E H H E        B      ", "C E H H E C    CCCCC    ", "  EEGGGEE        B      ", "   EEEEE         B      ", "    DAD                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDDAAA  AAAAA   ", "B DDDDDDD B             ", "B EEEEEE  B             ", "C EEGGGEE C             ", "B EF G FE B             ", "B EF G FE B             ", "C EF G FE C             ", "B EEGGGEE B             ", "B EEEGEEE B             ", "    D D                 ", "    IAI                 ", "                        ", "                        ")
                    .aisle("ADDDDDDDDDAA            ", "    DDD                 ", "   EEEEE                ", "C EEGGGEE C             ", "  E H H E               ", "  E H H E               ", "C E H H E C             ", "  EEGGGEE               ", "   EEEEE                ", "    DDD                 ", "                        ", "                        ", "                        ")
                    .aisle("AADDDDDDDDA             ", "     D                  ", "   EEEEE                ", "C  EEEEE  C             ", "   E F E                ", "   E F E                ", "C  E F E  C             ", "   EEEEE                ", "   EEEEE                ", "                        ", "                        ", "                        ", "                        ")
                    .aisle(" AADDDDDDDA             ", "  B  D  B               ", "  B  E  B               ", " CB EEE BC              ", "  B EEE B               ", "  B EEE B               ", " CB EEE BC              ", "  B EEE B               ", "  B  E  B               ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("  AADDDDDAA             ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "  C     C               ", "                        ", "                        ", "                        ", "                        ", "                        ", "                        ")
                    .aisle("   AAAAAAA              ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "   CCCCC                ", "     B                  ", "     B                  ", "                        ", "                        ", "                        ", "                        ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('B', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('C', blocks(GTOBlocks.ADVANCED_FUSION_COIL.get()))
                    .where('D', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('F', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('G', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where('b', blocks(GTOBlocks.SPS_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/sps_casing"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition SPS_CRAFTING = multiblock("sps_crafting", "超临界合成机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.TRANSCENDING_CRAFTING_RECIPES)
            .perfectOCTooltips()
            .perfectOverclock()
            .block(GTBlocks.FUSION_CASING_MK2)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("bbbbbbb", "bcccccb", "bcfffcb", "bcfffcb", "bcfffcb", "bcccccb", "bbbbbbb")
                    .aisle("bcccccb", "c     c", "c     c", "c     c", "c     c", "c     c", "bcccccb")
                    .aisle("bcccccb", "c ddd c", "f ddd f", "f ddd f", "f ddd f", "c ddd c", "bcccccb")
                    .aisle("bcccccb", "c ded c", "f ded f", "f dgd f", "f ded f", "c ded c", "bcccccb")
                    .aisle("bcccccb", "c ddd c", "f ddd f", "f ddd f", "f ddd f", "c ddd c", "bcccccb")
                    .aisle("bcccccb", "c     c", "c     c", "c     c", "c     c", "c     c", "bcccccb")
                    .aisle("bbbbbbb", "bccaccb", "bcfffcb", "bcfffcb", "bcfffcb", "bcccccb", "bbbbbbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('c', blocks(GTBlocks.FUSION_CASING_MK2.get())
                            .setMinGlobalLimited(100)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('d', blocks(Blocks.CRYING_OBSIDIAN))
                    .where('e', blocks(Blocks.REINFORCED_DEEPSLATE))
                    .where('f', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('g', blocks(GTOBlocks.MAGIC_CORE.get()))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/fusion/fusion_casing_mk2"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_SPS_CRAFTING = multiblock("advanced_sps_crafting", "进阶超临界合成机", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.TRANSCENDING_CRAFTING_RECIPES)
            .parallelizableTooltips()
            .multipleRecipesTooltips()
            .laserTooltips()
            .block(GTBlocks.FUSION_CASING_MK2)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle
                    .aisle("         CCCCCCCCCCCCCCC        ", "         DDEABBBBBBBAEDD        ", "          CEABBA ABBAEC         ", "           EABBA ABBAE          ", "           EABBA ABBAE          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("        CCCCCCCCCCCCCCCCC       ", "        DDAAABBBBBBBAAADD       ", "         CAAABFBBBFBAAAC        ", "          AAABFBBBFBAAA         ", "           AABBBBBBBAA          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       DD AAABBBBBBBAAA DD      ", "        C AEFB  G  BFEA C       ", "          AGFB     BFGA         ", "          AAAB BBB BAAA         ", "             BBCCCBB            ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       D  AAABBBBBBBAAA  D      ", "       C  AEFB  G  BFEA  C      ", "          AGFB     BFGA         ", "          AAABBBBBBBAAA         ", "               AAA              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      DD  AAABBBBBBBAAA  DD     ", "       C  AEFBBBGBBBFEA  C      ", "          AGFBBBBBBBFGA         ", "          AAA  AAA  AAA         ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      D   AAA  AAA  AAA   D     ", "      C   AAA  AGA  AAA   C     ", "          AGA  AAA  AGA         ", "           AA       AA          ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     DD                   DD    ", "      C         G         C     ", "           G    G    G          ", "                G               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     D AAA             AAA D    ", "     C AAA             AAA C    ", "       HHH G         G HHH      ", "       HHH      G      HHH      ", "       AAA             AAA      ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    DDAAAAA           AAAAADD   ", "     CAFEFIIIIIIIIIIIIIFEFAC    ", "      HF FHG         GHF FH     ", "      HFEFH     G     HFEFH     ", "      AAAAA           AAAAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA           AAAAA D   ", "    C AEEEA  I     I  AEEEA C   ", "      H J HG         GH J H     ", "      HEEEH     G     HEEEH     ", "      AAEAA           AAEAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA    C C    AAAAA D   ", "    C AFEFIIII C C IIIIFEFA C   ", "      HF FHG   C C   GHF FH     ", "      HFEFH    CGC    HFEFH     ", "      AAAAA    C C    AAAAA     ", "               C C              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   DD  AAA   KKKEKKK   AAA  DD  ", "    C  AAA   BBBBBBB   AAA  C   ", "       HHH G BHBBBHB G HHH      ", "       HHH   BHBGBHB   HHH      ", "       AAA   BBBBBBB   AAA      ", "             KKKKKKK            ", "               CBC              ", "                B               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D        KAAAEAAAK        D  ", "   C        BB     BB        C  ", "           GBB     BBG          ", "            BB     BB           ", "            BB     BB           ", "            KK  E  KK           ", "             BBBBBBB            ", "              BBBBB             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              BBBBB             ", "                E               ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D       KAAAAEAAAAK       D  ", "   C       BB       BB       C  ", "           GB       BG          ", "           BB       BB          ", "           BB       BB          ", "           KK   E   KK          ", "            BB     BB           ", "             BB   BB            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             BB B BB            ", "              BBBBB             ", "                E               ", "                                ")
                    .aisle("  CCCCCCCCCCCCCCCCCCCCCCCCCCCCC ", "  DD      KAAAAAEAAAAAK      DD ", "   C      BB         BB      C  ", "          BG         GB         ", "          BB         BB         ", "          BB         BB         ", "          KK    E    KK         ", "           BB       BB          ", "            BB     BB           ", "            HH LLL HH           ", "            HH  L  HH           ", "            HH  L  HH           ", "            HH LLL HH           ", "            BB     BB           ", "             BBBBBBB            ", "              AAEAA             ", "                                ")
                    .aisle(" ACCCCCCCCCCCCCCCCCCCCCCCCCCCCCA", " ADAAAACC KAAAAAEAAAAAK CCAAAADA", " AAAAAAAAAB   F   F   BAAAAAAAAA", "       AAAB   FFFFF   BAAA      ", "        AAB   F   F   BAA       ", "        AAB   FFFFF   BAA       ", "         AK   F E F   KA        ", "         AAB  FFFFF  BAA        ", "           BB       BB          ", "           HH L L L HH          ", "           HH       HH          ", "           HH       HH          ", "           HH L L L HH          ", "           BB       BB          ", "            BB     BB           ", "             AAAKAAA            ", "                                ")
                    .aisle("  MCCCCCCCCCCCCCCCCCCCCCCCCCCCMA", "  MMMMMMM KAAAAAEAAAAAK MMMMMMMA", " ACCCCCCC B           B CCCCCCCA", "   AAAANN B   F   F   B NNAAAA  ", "       NN B           B NN      ", "        N B   F   F   B N       ", "        NAK     E     KAN       ", "        NAAB  F   F  BAAN       ", "         AAB         BAA        ", "           H L  L  L H          ", "           H         H          ", "           H         H          ", "           H L  L  L H          ", "           B         B          ", "            BB     BB           ", "             AAEKEAA            ", "               AAA              ")
                    .aisle("  MCCCCCCCCCCCCCCCCCCCCCCCCCCCMA", "  MMMMMMM EEEEEEJEEEEEE MMMMMMM~", " ACCCCCCC B     J     B CCCCCCCA", "  AAEEENN B   F J F   B NNEEEAA ", "       NN B     J     B NN      ", "       NN B   F J F   B NN      ", "       NNAEEEEEEJEEEEEEANN      ", "        NABB  F J F  BBAN       ", "        NABB    J    BBAN       ", "           B LLLJLLL B          ", "           B L  J  L B          ", "           B L  J  L B          ", "           B LLLJLLL B          ", "           BB   J   BB          ", "           EBB  K  BBE          ", "            EEKKKKKEE           ", "               AAA              ")
                    .aisle("  MCCCCCCCCCCCCCCCCCCCCCCCCCCCMA", "  MMMMMMM KAAAAAEAAAAAK MMMMMMMA", " ACCCCCCC B           B CCCCCCCA", "   AAAANN B   F   F   B NNAAAA  ", "       NN B           B NN      ", "        N B   F   F   B N       ", "        NAK     E     KAN       ", "        NAAB  F   F  BAAN       ", "         AAB         BAA        ", "           H L  L  L H          ", "           H         H          ", "           H         H          ", "           H L  L  L H          ", "           B         B          ", "            BB     BB           ", "             AAEKEAA            ", "               AAA              ")
                    .aisle(" ACCCCCCCCCCCCCCCCCCCCCCCCCCCCCA", " ADAAAACC KAAAAAEAAAAAK CCAAAADA", " AAAAAAAAAB   F   F   BAAAAAAAAA", "       AAAB   FFFFF   BAAA      ", "        AAB   F   F   BAA       ", "        AAB   FFFFF   BAA       ", "         AK   F E F   KA        ", "         AAB  FFFFF  BAA        ", "           BB       BB          ", "           HH L L L HH          ", "           HH       HH          ", "           HH       HH          ", "           HH L L L HH          ", "           BB       BB          ", "            BB     BB           ", "             AAAKAAA            ", "                                ")
                    .aisle("  CCCCCCCCCCCCCCCCCCCCCCCCCCCCC ", "  DD      KAAAAAEAAAAAK      DD ", "   C      BB         BB      C  ", "          BG         GB         ", "          BB         BB         ", "          BB         BB         ", "          KK    E    KK         ", "           BB       BB          ", "            BB     BB           ", "            HH LLL HH           ", "            HH  L  HH           ", "            HH  L  HH           ", "            HH LLL HH           ", "            BB     BB           ", "             BBBBBBB            ", "              AAEAA             ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D       KAAAAEAAAAK       D  ", "   C       BB       BB       C  ", "           GB       BG          ", "           BB       BB          ", "           BB       BB          ", "           KK   E   KK          ", "            BB     BB           ", "             BB   BB            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             HH   HH            ", "             BB B BB            ", "              BBBBB             ", "                E               ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   D        KAAAEAAAK        D  ", "   C        BB     BB        C  ", "           GBB     BBG          ", "            BB     BB           ", "            BB     BB           ", "            KK  E  KK           ", "             BBBBBBB            ", "              BBBBB             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              HHBHH             ", "              BBBBB             ", "                E               ", "                                ", "                                ")
                    .aisle("   CCCCCCCCCCCCCCCCCCCCCCCCCCC  ", "   DD  AAA   KKKEKKK   AAA  DD  ", "    C  AAA   BBBBBBB   AAA  C   ", "       HHH G BHBBBHB G HHH      ", "       HHH   BHBBBHB   HHH      ", "       AAA   BBBBBBB   AAA      ", "             KKKKKKK            ", "               CBC              ", "                B               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA    C C    AAAAA D   ", "    C AFEFIIII C C IIIIFEFA C   ", "      HF FHG   C C   GHF FH     ", "      HFEFH    CGC    HFEFH     ", "      AAAAA    C C    AAAAA     ", "               C C              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    D AAAAA           AAAAA D   ", "    C AEEEA  I     I  AEEEA C   ", "      H J HG         GH J H     ", "      HEEEH     G     HEEEH     ", "      AAEAA           AAEAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("    CCCCCCCCCCCCCCCCCCCCCCCCC   ", "    DDAAAAA           AAAAADD   ", "     CAFEFAIIIIIIIIIIIIFEFAC    ", "      HF FHG         GHF FH     ", "      HFEFH     G     HFEFH     ", "      AAAAA           AAAAA     ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     D AAA             AAA D    ", "     C AAA             AAA C    ", "       HHH G         G HHH      ", "       HHH      G      HHH      ", "       AAA             AAA      ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("     CCCCCCCCCCCCCCCCCCCCCCC    ", "     DD                   DD    ", "      C         G         C     ", "           G    G    G          ", "                G               ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      D   AAA  AAA  AAA   D     ", "      C   AAA  AGA  AAA   C     ", "          AGA  AAA  AGA         ", "           AA       AA          ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("      CCCCCCCCCCCCCCCCCCCCC     ", "      DD  AAABBBBBBBAAA  DD     ", "       C  AEFBBBGBBBFEA  C      ", "          AGFBBBBBBBFGA         ", "          AAA  AAA  AAA         ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       D  AAABBBBBBBAAA  D      ", "       C  AEFB  G  BFEA  C      ", "          AGFB     BFGA         ", "          AAABBBBBBBAAA         ", "               AAA              ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("       CCCCCCCCCCCCCCCCCCC      ", "       DD AAABBBBBBBAAA DD      ", "        C AEFB  G  BFEA C       ", "          AGFB     BFGA         ", "          AAAB BBB BAAA         ", "             BBCCCBB            ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("        CCCCCCCCCCCCCCCCC       ", "        DDAAABBBBBBBAAADD       ", "         CAAABFBBBFBAAAC        ", "          AAABFBBBFBAAA         ", "           AABBBBBBBAA          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("         CCCCCCCCCCCCCCC        ", "         DDEABBBBBBBAEDD        ", "          CEABBA ABBAEC         ", "           EABBA ABBAE          ", "           EABBA ABBAE          ", "            CBBCCCBBC           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .aisle("            AAAA AAAA           ", "            ABBA ABBA           ", "            ABBA ABBA           ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ", "                                ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.SPS_CASING.get())
                            .setMinGlobalLimited(800)
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTOBlocks.FUSION_CASING_MK4.get()))
                    .where('C', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('E', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('F', blocks(Blocks.CRYING_OBSIDIAN))
                    .where('G', blocks(GTOBlocks.ACCELERATED_PIPELINE.get()))
                    .where('H', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('I', blocks(GCYMBlocks.MOLYBDENUM_DISILICIDE_COIL_BLOCK.get()))
                    .where('J', blocks(GTOBlocks.MAGIC_CORE.get()))
                    .where('K', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('L', blocks(GTOBlocks.FUSION_COIL_MK2.get()))
                    .where('M', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('N', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/fusion/fusion_casing_mk2"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public static final MultiblockMachineDefinition MATTER_FABRICATOR = multiblock("matter_fabricator", "物质生成机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.MATTER_FABRICATOR_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .parallelizableOverclock()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" CCCCDDDDDCCCC ", "EFFFFDGGGDFFFFE", "EFFFFDHHHDFFFFE", "EFFFFDGGGDFFFFE", " CCCCDDDDDCCCC ")
                    .aisle("EFFFFDGGGDFFFFE", "F I IIIIIII I F", "F I I     I I F", "F I IIIIIII I F", "EFFFFDGGGDFFFFE")
                    .aisle("EFFFFDHHHDFFFFE", "F I I     I I F", "FJJJJJJJJJJJJJF", "F I I     I I F", "EFFFFDHHHDFFFFE")
                    .aisle("EFFFFDGGGDFFFFE", "F I IIIIIII I F", "F I I     I I F", "F I IIIIIII I F", "EFFFFDGGGDFFFFE")
                    .aisle(" CCCCDDDDDCCCC ", "EFFFFDGGGDFFFFE", "EFFFFDHHHDFFFFE", "EFFFFDGGGDFFFFE", " CCCCDDDDDCCCC ")
                    .aisle("               ", "   AAA   AAA   ", "   ABA   AAA   ", "   AAA   AAA   ", "               ")
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('D', blocks(GTBlocks.MACHINE_CASING_UHV.get()))
                    .where('E', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('F', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('G', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('H', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('I', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('A', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition VOID_FLUID_DRILLING_RIG = multiblock("void_fluid_drilling_rig", "虚空流体钻机", VoidFluidDrillingRigMachine::new)
            .nonYAxisRotation()
            .tooltipsText("需要最低30720EU/t的功率", "Requires a minimum power of 30,720EU/t")
            .tooltipsText("按维度和电路值输出流体", "Outputs fluids based on the dimension and circuit value")
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .alwaysTryModifyRecipe(true)
            .block(GTBlocks.CASING_HSSE_STURDY)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("ABBBBA ", "AAAAAA ", " C C   ", " C C   ", " C C   ", " C C   ", "       ", "       ")
                    .aisle("B   BBB", "A   DDD", "    DDD", "    DDD", " C CDDD", " EEE   ", "       ", "       ")
                    .aisle("B FGBBB", "H IGDDD", "  IGD D", "  IGD D", "  IGD D", " EIEDDD", "  I    ", "  I    ")
                    .aisle("B   BBB", "A   DDD", "    DDD", "    DDD", " C CDDD", " EEE   ", "       ", "       ")
                    .aisle("ABBBBA ", "AAAAAA ", " C C   ", " C C   ", " C C   ", " C C   ", "       ", "       ")
                    .where('B', blocks(GTOBlocks.COBALT_OXIDE_CERAMIC_STRONG_THERMALLY_CONDUCTIVE_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('D', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSSG)))
                    .where('F', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('G', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where('I', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('A', blocks(GTBlocks.CASING_HSSE_STURDY.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setMinGlobalLimited(1))
                            .or(abilities(GTOPartAbility.ITEMS_INPUT).setExactLimit(1))
                            .or(abilities(EXPORT_FLUIDS).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_sturdy_hsse"), GTCEu.id("block/multiblock/fluid_drilling_rig"))
            .register();

    public static final MultiblockMachineDefinition VOID_MINER = multiblock("void_miner", "虚空采矿机", VoidMinerMachine::new)
            .nonYAxisRotation()
            .tooltipsText("需要输入1B钻井液和最低1920EU/t的功率", "Requires 1B drilling fluid and a minimum power of 1920EU/t")
            .tooltipsText("按维度随机选取4分矿石输出，电压等级决定最大输出数量，电流决定并行数", "Randomly selects 4 types of ores output based on the dimension, with the voltage level determining the maximum output quantity and the current determining the parallels")
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .alwaysTryModifyRecipe(true)
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle(" AAAAA ", " BBBBB ", "  C C  ", "  C C  ", "  CCC  ", "       ")
                    .aisle("AAA AAA", "BCD DCB", "B DED B", "B D D B", " CD DC ", "  C C  ")
                    .aisle("AA   AA", "B  F  B", "  FEF  ", "   F   ", "       ", "  C C  ")
                    .aisle("AA   AA", "B     G", "   E   ", "       ", "       ", "  C C  ")
                    .aisle("AA   AA", "B  F  B", "  FEF  ", "   F   ", "       ", "  C C  ")
                    .aisle("AAA AAA", "BCD DCB", "B DED B", "B D D B", " CD DC ", "  C C  ")
                    .aisle(" AAAAA ", " BBBBB ", "  C C  ", "  C C  ", "  CCC  ", "       ")
                    .where('A', blocks(GTOBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('E', blocks(GTBlocks.MACHINE_CASING_HV.get()))
                    .where('F', blocks(GTBlocks.CASING_STAINLESS_STEEL_GEARBOX.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where('B', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setMinGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setExactLimit(1))
                            .or(abilities(EXPORT_ITEMS).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/large_miner"))
            .register();

    public static final MultiblockMachineDefinition LARGE_VOID_MINER = multiblock("large_void_miner", "大型虚空采矿厂", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.LARGE_VOID_MINER_RECIPES)
            .recipeTypes(GTORecipeTypes.RANDOM_ORE_RECIPES)
            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    h -> h.addLines("工作模式", "Operating Modes", StyleBuilder::setGold),
                    c -> c.addLines(
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("精准模式:", "Precision Mode:", StyleBuilder::setBold),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("消耗精华采集指定矿脉", "Consumes resources to collect specified veins", StyleBuilder::setAqua),
                                    p -> p,
                                    StyleBuilder::setTwoTabs),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("随机模式:", "Random Mode:", StyleBuilder::setBold),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("消耗10KB的钻井液", "Consumes 10KB of drilling fluid", StyleBuilder::setAqua),
                                    p -> p,
                                    StyleBuilder::setTwoTabs),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("耗时更长随机采集所有矿石", "Longer duration to randomly collect all ores", StyleBuilder::setAqua),
                                    p -> p,
                                    StyleBuilder::setTwoTabs),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("注意: 确保输出空间足够", "Note: Ensure enough output space", StyleBuilder::setRed),
                                    p -> p,
                                    StyleBuilder::setTwoTabs))))
            .recipeModifier((machine, recipe) -> {
                if (((ElectricMultiblockMachine) machine).getRecipeType() == GTORecipeTypes.RANDOM_ORE_RECIPES) {
                    return RecipeModifierFunction.overclocking(machine, ParallelLogic.accurateParallel(machine, recipe, 1 << ((((ElectricMultiblockMachine) machine).getTier() - GTValues.ZPM) << 1)));
                }
                return RecipeModifierFunction.overclocking(machine, recipe);
            })
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("bbbbbbbbb", "bbbbbbbbb", "b       b", "b       b", "b       b", "bbbbbbbbb", "bcccccccb", "bcccccccb", "b       b", "b       b")
                    .aisle("b       b", "b       b", "         ", "         ", "         ", "b   d   b", "c  ddd  c", "c  ddd  c", "   ddd   ", "         ")
                    .aisle("b       b", "b       b", "         ", "    d    ", "   ddd   ", "b  ddd  b", "c dd dd c", "c d   d c", "  d   d  ", "         ")
                    .aisle("b   d   b", "b   d   b", "   ddd   ", "   d d   ", "  dd dd  ", "b d   d b", "cdd   ddc", "cd     dc", " d     d ", "         ")
                    .aisle("b  d d  b", "b  d d  b", "   d d   ", "  d   d  ", "  d   d  ", "bdd   ddb", "cd     dc", "cd     dc", " d     d ", "         ")
                    .aisle("b   d   b", "b   d   b", "   ddd   ", "   d d   ", "  dd dd  ", "b d   d b", "cdd   ddc", "cd     dc", " d     d ", "         ")
                    .aisle("b       b", "b       b", "         ", "    d    ", "   ddd   ", "b  ddd  b", "c dd dd c", "c d   d c", "  d   d  ", "         ")
                    .aisle("b       b", "b       b", "         ", "         ", "         ", "b   d   b", "c  ddd  c", "c  ddd  c", "   ddd   ", "         ")
                    .aisle("bbbbbbbbb", "bbbbabbbb", "b       b", "b       b", "b       b", "bbbbbbbbb", "bcccccccb", "bcccccccb", "b       b", "b       b")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .setMinGlobalLimited(110)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ultimet)))
                    .where('d', blocks(GTBlocks.CASING_TITANIUM_STABLE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/large_miner"))
            .register();

    public static final MultiblockMachineDefinition CHEMICAL_PLANT = multiblock("chemical_plant", "化工厂", CoilMultiblockMachine.createCoilMachine(false, false))
            .allRotation()
            .recipeTypes(GTORecipeTypes.CHEMICAL)
            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    h -> h.addLines("线圈效率加成", "Coil Efficiency Bonus", StyleBuilder::setGold),
                    c -> c.addLines(
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("线圈等级每高出白铜一级", "Each coil tier above Bronze", StyleBuilder::setWhite),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("能耗与时间减少5%", "Reduces energy consumption and duration by 5%", StyleBuilder::setGreen),
                                    p -> p,
                                    StyleBuilder::setOneTab))))
            .combinedRecipeTooltips()
            .parallelizableTooltips()
            .perfectOCTooltips()
            .recipeModifier(RecipeModifierFunction.coilReductionOverclock(0.25))
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("b   b", "bbbbb", "b   b", "bbbbb", "b   b")
                    .aisle("bbbbb", "bcccb", "bdddb", "bcccb", "bbbbb")
                    .aisle("b   b", "bdddb", "bcccb", "bdddb", "b   b")
                    .aisle("bbbbb", "bcccb", "bdddb", "bcccb", "bbbbb")
                    .aisle("b   b", "abbbb", "b   b", "bbbbb", "b   b")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .setMinGlobalLimited(60)
                            .or(abilities(GTOPartAbility.CATALYST_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(GTOPredicates.autoAccelerateAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', heatingCoils())
                    .where('d', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where(' ', any())
                    .build())
            .additionalDisplay(CHEMICAL_PLANT_DISPLAY)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/machines/chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition DECAY_HASTENER = multiblock("decay_hastener", "衰变加速器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.DECAY_HASTENER_RECIPES)
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.HYPER_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "ABBBA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "ABBBA", "AAAAA")
                    .aisle("A   A", "BEEEB", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "BEEEB", "A   A")
                    .aisle("A   A", "BEEEB", "DGHGD", "EGHGE", "FGHGF", "EGHGE", "DGHGD", "EGHGE", "FGHGF", "EGHGE", "DGHGD", "BEEEB", "A   A")
                    .aisle("A   A", "BEEEB", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "EGGGE", "FGGGF", "EGGGE", "DGGGD", "BEEEB", "A   A")
                    .aisle("AAAAA", "ABCBA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "AEEEA", "AFFFA", "AEEEA", "ADDDA", "ABBBA", "AAAAA")
                    .where('A', blocks(GTOBlocks.FISSION_REACTOR_CASING.get()))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('E', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('G', blocks(GTBlocks.FUSION_CASING.get()))
                    .where('H', blocks(GTBlocks.HERMETIC_CASING_UV.get()))
                    .where('B', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get())
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/data_bank"))
            .register();

    public static final MultiblockMachineDefinition RECYCLER = multiblock("recycler", "回收机", CustomParallelMultiblockMachine.createParallel(m -> 1L << Math.max(0, (2 * (m.getTier() - 4))), true))
            .allRotation()
            .recipeTypes(GTORecipeTypes.RECYCLER_RECIPES)
            .specialParallelizableTooltips()
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(
                    h -> h.addLines("自EV起，每升一级电压，获得的并行x4", "From EV, every voltage tier increase grants x4 parallelism"),
                    c -> c.addCommentLines("公式 : 2^(max(0, (2 * (tier - 4)))), 算去吧", "Formula: 2^(max(0, (2 * (tier - 4)))), do the math")))
            .overclock()
            .block(GTBlocks.STEEL_HULL)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("DDDDD", "DDGDD", "EEEEE", "EEEEE")
                    .aisle("DEEED", "D   D", "E   E", "EFFFE")
                    .aisle("DEEED", "D   D", "EEEEE", "EEEEE")
                    .aisle("AAAAA", "ACCCA", "AAAAA", "CAAAC")
                    .aisle("AAAAA", "B   B", "A   A", "CAAAC")
                    .aisle("AAAAA", "B   B", "A   A", "CAAAC")
                    .aisle("AAAAA", "B   B", "A   A", "CAAAC")
                    .aisle("AAAAA", "ABBBA", "AAAAA", "     ")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('B', blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('E', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('F', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.STEEL_HULL.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/steam/steel/side"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .afterWorking(m -> {
                if (m.getRecipeLogic().getLastRecipe() != null && m.getRecipeLogic().getLastRecipe().data.getBoolean("isCustom")) {
                    m.getRecipeLogic().markLastRecipeDirty();
                }
            })
            .register();

    public static final MultiblockMachineDefinition MASS_FABRICATOR = multiblock("mass_fabricator", "质量发生器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.MASS_FABRICATOR_RECIPES)
            .parallelizableTooltips()
            .perfectOCTooltips()
            .parallelizablePerfectOverclock()
            .block(GTBlocks.MACHINE_CASING_UHV)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("bbbbb", " c c ", " c c ", " c c ", "bbbbb")
                    .aisle("bbbbb", "cdfdc", "cdfdc", "cdfdc", "bbbbb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", " e e ", " e e ", " e e ", "bfffb")
                    .aisle("bbbbb", "cdfdc", "cdfdc", "cdfdc", "bbbbb")
                    .aisle("bbabb", " c c ", " c c ", " c c ", "bbbbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTBlocks.MACHINE_CASING_UHV.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(16).setPreviewCount(16))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('d', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('e', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('f', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/uhv/side"), GTCEu.id("block/multiblock/gcym/large_electrolyzer"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_MASS_FABRICATOR = multiblock("advanced_mass_fabricator", "进阶质量发生器", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .recipeTypes(GTORecipeTypes.MASS_FABRICATOR_RECIPES)
            .parallelizableTooltips()
            .multipleRecipesTooltips()
            .laserTooltips()
            .block(GTBlocks.MACHINE_CASING_UXV)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "                     ", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "CAAAAAAAAA AAAAAAAAAC", "C                    ", "CAAAAAAAAA AAAAAAAAAC", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("                     ", " DDDDDDDD   DDDDDDDD ", " EEEEEEEEEEEEEEEEEEE ", " EEEEEEEEEEEEEEEEEEE ", " DDDDDDDD   DDDDDDDD ", "C                    ", "G                    ", "C                    ", " DDDDDDDD   DDDDDDDD ", " EEEEEEEEEEEEEEEEEEE ", " EEEEEEEEEEEEEEEEEEE ", " DDDDDDDD   DDDDDDDD ", "                     ")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "CAAAAAAAAA AAAAAAAAAC", "C                    ", "CAAAAAAAAA AAAAAAAAAC", "CDDDDDDDDA ADDDDDDDDC", "C        A A        C", "C        A A        C", "CDDDDDDDDA ADDDDDDDDC", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "C        A A        C", " EEEEEEEEEEEEEEEEEEE ", "C        A A        C", "BDDDDDDDD   DDDDDDDDB", "B                   B", "B                   B", "BDDDDDDDD   DDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "CDDDDDDDDA ADDDDDDDDC", " DDDDDDDD   DDDDDDDD ", "CDDDDDDDDA ADDDDDDDDC", "BDDDDDDDDDDDDDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDD   DDDDDDDDB", "BDDDDDDDDDDDDDDDDDDDB", "AAAAAAAAAA AAAAAAAAAA")
                    .aisle("AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "                     ", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA", "AAAAAAAAAA AAAAAAAAAA", "AAFFFFFFAA AAFFFFFFAA", "AAAAAAAAAA AAAAAAAAAA")
                    .where('A', blocks(GTBlocks.MACHINE_CASING_UXV.get()))
                    .where('B', blocks(GTOBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where('C', blocks(GTBlocks.MACHINE_CASING_UXV.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTOBlocks.TITANSTEEL_COIL_BLOCK.get()))
                    .where('E', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('F', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/voltage/uxv/side"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition PRECISION_ASSEMBLER = multiblock("precision_assembler", "精密组装机", PrecisionAssemblerMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.PRECISION_ASSEMBLER_RECIPES)
            .recipeTypes(GTRecipeTypes.ASSEMBLER_RECIPES)
            .tooltips(NewDataAttributes.RUNTIME_REQUIREMENT.create(
                    c -> c.addLines("外壳等级决定配方等级上限",
                            "The machine casing tier determines the upper limit of recipe tier")))
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(
                    h -> h.addLines("由玻璃等级决定", "Determined by glass tier"),
                    c -> c.addCommentLines(
                            "高等级玻璃可以提供更多的并行数量",
                            "Higher tier glass provides more parallelism")))
            .laserTooltips()
            .recipeModifier(RecipeModifierFunction::laserLossOverclocking)
            .block(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("bbbbbbbbb", "d       d", "d       d", "d       d", "bbbbbbbbb")
                    .aisle("bAAAAAAAb", "bcccccccb", "bcccccccb", "bcccccccb", "bbbbbbbbb")
                    .aisle("bAAAAAAAb", "b-------b", "b-------b", "b-------b", "bbbbbbbbb")
                    .aisle("bAAAAAAAb", "bcccccccb", "bcccccccb", "bcccccccb", "bbbbbbbbb")
                    .aisle("bbbbabbbb", "d       d", "d       d", "d       d", "bbbbbbbbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get())
                            .setMinGlobalLimited(70)
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', GTOPredicates.glass())
                    .where('d', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('A', GTOPredicates.machineCasing())
                    .where('-', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/oxidation_resistant_hastelloy_n_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    public static final MultiblockMachineDefinition FISHING_GROUND = multiblock("fishing_ground", "渔场", FishingGroundMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.FISHING_GROUND_RECIPES)
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.ALUMINIUM_BRONZE_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("    AAAAA    ", "    AAFAA    ", "    BBBBB    ", "             ")
                    .aisle("   BBBBBBB   ", "   BCCCCCB   ", "   BB E BB   ", "             ")
                    .aisle("  BBBBBBBBB  ", "  BCCCCCCCB  ", "  BB  E  BB  ", "             ")
                    .aisle(" BBBBBBBBBBB ", " BCCCCCCCCCB ", " BB   E   BB ", "             ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCCCCCCCCA", "BB    E    BB", "             ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCBEBCCCCA", "B    BEB    B", "     BBB     ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCEDECCCCA", "BEEEEEDEEEEEB", "     BBB     ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCBEBCCCCA", "B    BDB    B", "     BBB     ")
                    .aisle("ABBBBBBBBBBBA", "ACCCCCCCCCCCA", "BB    D    BB", "             ")
                    .aisle(" BBBBBBBBBBB ", " BCCCCCCCCCB ", " BB   D   BB ", "             ")
                    .aisle("  BBBBBBBBB  ", "  BCCCCCCCB  ", "  BB  D  BB  ", "             ")
                    .aisle("   BBBBBBB   ", "   BCCCCCB   ", "   BB D BB   ", "             ")
                    .aisle("    AAAAA    ", "    AAAAA    ", "    BBBBB    ", "             ")
                    .where('A', blocks(GTOBlocks.ALUMINIUM_BRONZE_CASING.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTOBlocks.ALUMINIUM_BRONZE_CASING.get()))
                    .where('C', fluids(Fluids.WATER))
                    .where('D', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('F', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/aluminium_bronze_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();

    public static final MultiblockMachineDefinition LAVA_FURNACE = multiblock("lava_furnace", "熔岩炉", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.LAVA_FURNACE_RECIPES)
            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    h -> h.addLines("熔岩生成说明", "Lava Generation Details", StyleBuilder::setGold),
                    c -> c.addLines(
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("每提供一个任意类型的圆石或石头", "Each provided piece of any type of cobblestone or stone", StyleBuilder::setWhite),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("可输出1B熔岩", "can output 1B of lava.", StyleBuilder::setGreen),
                                    p -> p,
                                    StyleBuilder::setOneTab))))
            .overclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("CCC", "DDD", "DDD")
                    .aisle("CCC", "D D", "DMD")
                    .aisle("CCC", "DAD", "DDD")
                    .where('A', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(autoAbilities(definition.getRecipeTypes())))
                    .where('M', abilities(MUFFLER))
                    .where('C', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_oven"))
            .register();

    public static final MultiblockMachineDefinition LARGE_GAS_COLLECTOR = multiblock("large_gas_collector", "大型集气室", CustomParallelMultiblockMachine.createParallel(m -> 100000, true))
            .noneRotation()
            .recipeTypes(GTORecipeTypes.LARGE_GAS_COLLECTOR_RECIPES)
            .overclock()
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaaaa", "abbba", "abbba", "abbba", "aaaaa")
                    .aisle("aaaaa", "bcccb", "bcccb", "bcccb", "abbba")
                    .aisle("aaaaa", "bcccb", "bcecb", "bcccb", "abdba")
                    .aisle("aaaaa", "bcccb", "bcccb", "bcccb", "abbba")
                    .aisle("aaaaa", "abbba", "abbba", "abbba", "aaaaa")
                    .where('d', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .setMinGlobalLimited(40)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('b', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('e', blocks(GTBlocks.HERMETIC_CASING_IV.get()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/machines/gas_collector"))
            .register();

    public static final MultiblockMachineDefinition ENGRAVING_LASER_PLANT = multiblock("engraving_laser_plant", "激光蚀刻工厂", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.PRECISION_LASER_ENGRAVER_RECIPES)
            .recipeTypes(GTRecipeTypes.LASER_ENGRAVER_RECIPES)
            .recipeTypes(GTORecipeTypes.LASER_WELDER_RECIPES)
            .tooltipsText("运行激光焊接配方时速度x5", "Running the Laser Welder formula at speed x5.")
            .specialParallelizableTooltips()
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(h -> h.addLines("仅精密激光模式不支持", "Only the precision laser mode does not support")))
            .perfectOCTooltips()
            .recipeModifiers((machine, recipe) -> {
                if (machine instanceof ElectricMultiblockMachine workableElectricMultiblockMachine) {
                    if (workableElectricMultiblockMachine.getRecipeType() == GTRecipeTypes.LASER_ENGRAVER_RECIPES) return RecipeModifierFunction.hatchParallel(workableElectricMultiblockMachine, recipe);
                    if (workableElectricMultiblockMachine.getRecipeType() == GTORecipeTypes.LASER_WELDER_RECIPES) {
                        recipe.duration = recipe.duration / 5;
                        return RecipeModifierFunction.hatchParallel(workableElectricMultiblockMachine, recipe);
                    }
                }
                return recipe;
            }, RecipeModifierFunction.PERFECT_OVERCLOCKING)
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("       aaaaaaa       ", "       aaaaaaa       ", "       aaa~aaa       ", "       aaaaaaa       ", "        aaaaa        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        JDIDJ        ", "        A   A        ", "         AAA         ", "          B          ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        JDIDJ        ", "        A   A        ", "         AAA         ", "          B          ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  JDIDJ  FAF   ", "   FAF  A   A  FAF   ", "   FAF   AAA   FAF   ", "   FAF    B    FAF   ", "   FAF         FAF   ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FMDMF JDIDJ FBDBF  ", "  FM MF A   A FB BF  ", "  FM MF  AAA  FB BF  ", "  FM MF   B   FB BF  ", "  FMDMF       FBDBF  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  ADDDA JDIDJ ADDDA  ", "  A I A A   A A I A  ", "  A I A  AAA  A I A  ", "  A I A   B   A I A  ", "  ADDDA       ADDDA  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FMDMF JDIDJ FBDBF  ", "  FM MF A   A FB BF  ", "  FM MF  AAA  FB BF  ", "  FM MF   B   FB BF  ", "  FMDMF       FBDBF  ", "  ABBBA       ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  JDIDJ  FAF   ", "   FAF  A   A  FAF   ", "   FAF   AAA   FAF   ", "   FAF    B    FAF   ", "   FAF         FAF   ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("       AAAAAAA       ", "       JADIDAJ       ", "       AABBBAA       ", "    I   AAAAA   I    ", "         AAA         ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle(" AAA   AAAAAAA   AAA ", " AKA   JDBBBDJ   ALA ", " AKA   ABDDDBA   ALA ", " AKAI  AABBBAA  IALA ", " AKA    AAAAA    ALA ", " AAA    AAHAA    AAA ", "         AHA         ", "         AHA         ", "         AHA         ", "         AHA         ", "         AAA         ", "                     ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB   BDJ ABBBA", "ACDCA ABD I DBA ACDCA", "ACDCA  AB   BA  ACDCA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AAD DAA  ALLLA", " AAA    AD DA    AAA ", "        AD DA        ", "        AD DA        ", "        AAAAA        ", "        ABBBA        ", "         BBB         ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB I BDJ ABBBA", "AD DA ABDIIIDBA AD DA", "AD DAIIAB I BAIIAD DA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AH I HA  ALLLA", " AAACCCCH I HCCCCAAA ", "        H I H        ", "        H I H        ", "        HAAAH        ", "        ABBBA        ", "         BBB         ")
                    .aisle("AAAAA AAAAAAAAA AAAAA", "ABBBA JDB   BDJ ABBBA", "ACDCA ABD I DBA ACDCA", "ACDCA  AB   BA  ACDCA", "ABBBA  AAAAAAA  ABBBA", "AHHHA  AAD DAA  ALLLA", " AAA    AD DA    AAA ", "        AD DA        ", "        AD DA        ", "        AAAAA        ", "        ABBBA        ", "         BBB         ")
                    .aisle(" AAA   AAAAAAA   AAA ", " AKA   JDBBBDJ   ALA ", " AKA   ABDDDBA   ALA ", " AKAI  AABBBAA  IALA ", " AKA    AAAAA    ALA ", " AAA    AAHAA    AAA ", "         AHA         ", "         AHA         ", "         AHA         ", "         AHA         ", "         AAA         ", "                     ")
                    .aisle("       AAAAAAA       ", "       JJDDDJJ       ", "       AABBBAA       ", "    I   AAAAA   I    ", "         AAA         ", "         AAA         ", "          C          ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA   AAA   AAA   ", "   FAF   JJJ   FAF   ", "   FAF   AAA   FAF   ", "   FAF    I    FAF   ", "   FAF         FAF   ", "   FAF         FAF   ", "   AAA    C    AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA       AAAAA  ", "  FHDHF       FEDEF  ", "  FH HF       FE EF  ", "  FH HF   I   FE EF  ", "  FH HF       FE EF  ", "  FHDHF       FEDEF  ", "  ABBBA   C   ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA  AAA  AAAAA  ", "  ADDDA  AAA  ADDDA  ", "  A I A  AAA  A I A  ", "  A I AIIAAAIIA I A  ", "  A I A  AAA  A I A  ", "  ADDDA  AAA  ADDDA  ", "  ABBBA   C   ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAA AAAAA AAAAA  ", "  FHDHF ABBBA FEDEF  ", "  FH HF ACDCA FE EF  ", "  FH HF ACDCA FE EF  ", "  FH HF ABBBA FE EF  ", "  FHDHF AEEEA FEDEF  ", "  ABBBA  AAA  ABBBA  ", "   AAA         AAA   ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAA  AAAAA  AAA   ", "   FAF  GBBBG  FAF   ", "   FAF  GD DG  FAF   ", "   FAF  GD DG  FAF   ", "   FAF  GBBBG  FAF   ", "   FAF  AEEEA  FAF   ", "   AAA   AAA   AAA   ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("        AAAAA        ", "        ABBBA        ", "        ACDCA        ", "        ACDCA        ", "        ABBBA        ", "        AEEEA        ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "         AAA         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where('D', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('E', blocks(GTOBlocks.COMPONENT_ASSEMBLY_LINE_CASING_UV.get()))
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('H', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('I', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('J', blocks(GTBlocks.FILTER_CASING_STERILE.get()))
                    .where('K', blocks(GTOBlocks.ADVANCED_COMPRESSED_FUSION_COIL.get()))
                    .where('L', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('M', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('a', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_ITEMS).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setPreviewCount(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(EXPORT_ITEMS).setPreviewCount(1))
                            .or(abilities(COMPUTATION_DATA_RECEPTION).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/gcym/large_engraving_laser"))
            .register();

    public static final MultiblockMachineDefinition MAGNETIC_CONFINEMENT_DIMENSIONALITY_SHOCK_DEVICE = multiblock("magnetic_confinement_dimensionality_shock_device", "磁约束维度震荡装置", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .recipeTypes(GTORecipeTypes.DIMENSIONALLY_TRANSCENDENT_SHOCK_RECIPES)
            .parallelizableTooltips()
            .multipleRecipesTooltips()
            .laserTooltips()
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where('C', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('D', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('E', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('F', blocks(GTBlocks.FUSION_COIL.get()))
                    .where('G', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.SamariumMagnetic)))
                    .where('I', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('K', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTOMaterials.HeavyQuarkDegenerateMatter)))
                    .where('N', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('O', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('a', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition QUANTUM_FORCE_TRANSFORMER = multiblock("quantum_force_transformer", "量子操纵者", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.QUANTUM_FORCE_TRANSFORMER_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.MANIPULATOR)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("      AAAAAA    AAAAAA    AAAAAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("      AAAAAA    AAAAAA    AAAAAA     ", "      AACCAA    AACCAA    AACCAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    DDAACCAADDDDAACCAADDDDAACCAADD   ", "    EEAACCAAEEEEAACCAAEEEEAACCAAEE   ", "      AACCAA    AACCAA    AACCAA     ", "      AACCAA    AACCAA    AACCAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    D AE  EA    AE  EA    AE  EA D   ", "    EDAE  EADDDDAE  EADDDDAE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "     FAACCAA    AACCAA    AACCAAF    ", "   FFFAACCAAFFFFAACCAAFFFFAACCAAFFF  ", "   FFFAACCAAFFFFAACCAAFFFFAACCAAFFF  ", "     FABBBBA    ABBBBA    ABBBBAF    ", "      ABBBBA    ABBBBA    ABBBBA     ", "      ABBBBA    ABBBBA    ABBBBA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    D AE  EA    AE  EA    AE  EA D   ", "    EDAE  EA    AE  EA    AE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "   FFFA    AFFFFA    AFFFFA    AFFF  ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "   FFFACCCCAFFFFACCCCAFFFFACCCCAFFF  ", "      BCCCCB    BCCCCB    BCCCCB     ", "      ACCCCA    ACCCCA    ACCCCA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "        AA        AA        AA       ", "                                     ")
                    .aisle("   DDDAAAAAADDDDAAAAAADDDDAAAAAADDD  ", "   DD AE  EA    AE  EA    AE  EA DD  ", "    EDAE  EA    AE  EA    AE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "   FFFA    AFFFFA    AFFFFA    AFFF  ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "   FFFAIIIIAFFFFAIIIIAFFFFAIIIIAFFF  ", "      BIIIIB    BIIIIB    BIIIIB     ", "      AIIIIA    AIIIIA    AIIIIA     ", "      AIIIIA    AIIIIA    AIIIIA     ", "      BIIIIB    BIIIIB    BIIIIB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAJJAA    AAJJAA    AAJJAA     ", "                                     ")
                    .aisle("   DDDAAAAAADDDDAAAAAADDDDAAAAAADDD  ", "   D  AEAAEA    AEAAEA    AEAAEA  D  ", "    DDAEAAEA    AEAAEA    AEAAEADD   ", "    DDAEAAEADDDDAEAAEADDDDAEAAEADD   ", "      AEAAEA    AEAAEA    AEAAEA     ", "   FFFAAAAAA    AAAAAA    AAAAAAFFF  ", "  FHHFAAAAAAFFFFAAAAAAFFFFAAAAAAFHHF ", "  FHHFAAAAAAFFFFAAAAAAFFFFAAAAAAFHHF ", "   FFFAAAAAA    AAAAAA    AAAAAAFFF  ", "      BBBBBB    BBBBBB    BBBBBB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      BBBBBB    BBBBBB    BBBBBB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAJJAA    AAJJAA    AAJJAA     ", "                                     ")
                    .aisle("   DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD  ", "   D   E  E         E      E  E   D  ", "    D                            D   ", "    DDDDDDDDDDDDDDDDDDDDDDDDDDDDDD   ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "      AAAAAA    AAAAAA    AAAAAA     ", "       AAAA      AAAA      AAAA      ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  DD   E  E         E      E  E   DD ", "    D                            D   ", "    DKLDAAAAAAAAAAAAAAAAAAAAAADLKD   ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  EDD                            DDE ", "   DDKLDAAAAAAAAAAAAAAAAAAAAAADLKDD  ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  ED                              DE ", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       E  E      IIII      E  E      ", "   FF            FFFF            FF  ", "  FHHF           FFFF           FHHF ", "  FHHF           IIII           FHHF ", "   FF            IIII            FF  ", "                 IIII                ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  ED                              DE ", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       EIIEII   IKKKKI   IIEIIE      ", "   FF  IIIIIB   FFCCFF   BIIIII  FF  ", "  FHHF     II   FFCCFF   II     FHHF ", "  FHHF          II  II          FHHF ", "   FF           II  II           FF  ", "                II  II               ", "                 HHHH                ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle(" DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", " DD    E  E         E      E  E    DD", " EED                              DEE", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       HHCC I  IKKKKKKI  I CCHH      ", "   FF    BBCB  FFC  CFF  BCBB    FF  ", "  FHHF     BI  FFC  CFF  IB     FHHF ", "  FHHF         II    II         FHHF ", "   FF          II    II          FF  ", "               II    II              ", "                HJJJJH               ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("NHDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDH", "NH     E  E         E      E  E     H", "NEDD                              DDE", "  DDKKLDAAAAAAAAAAAAAAAAAAAAAADLKKDD ", "       HHCC I IKKKKKKKKI I CCHH      ", "   FF    BBCB FFCG  GCFF BCBB    FF  ", "  FHHF     BI FFCG  GCFF IB     FHHF ", "  FHHF        II G  G II        FHHF ", "   FF         II G  G II         FF  ", "              II G  G II             ", "               HJG  GJH              ", "                 AAAA                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("NHDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDH", "NH     E  E         E      E  E     H", "NED                                DE", "  DKKKLDAAAAAAAAAAAAAAAAAAAAAADLKKKD ", "       HHGGGI IKKKKKKKKI IGGGHH      ", "   FF    BBLLLLC      CLLLLBB    FF  ", "  FHHF     BI FC      CF IB     FHHF ", "  FHHF        I        I        FHHF ", "   FF         I        I         FF  ", "              I        I             ", "              AHJ    JHA             ", "               AAAHHAAA              ", "                  HH                 ", "                                     ", "                                     ", "                                     ")
                    .aisle("NHDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDH", "~H     E  E         E      E  E     H", "NED                                DE", "  DLLLLDAAAAAAAAAAAAAAAAAAAAAADLLLLD ", "       HHGGGI IKKKKKKKKI IGGGHH      ", "   FF    BBLLLLLLLLLLLLLLLLBB    FF  ", "  FHHF     BI F        F IB     FHHF ", "  FHHF        I        I        FHHF ", "   FF         I        I         FF  ", "              I        I             ", "               HJ    JH              ", "                 AHHA                ", "                  HH                 ", "                                     ", "                                     ", "                                     ")
                    .aisle("NHDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDH", "NH     E  E         E      E  E     H", "NED                                DE", "  DKKKLDAAAAAAAAAAAAAAAAAAAAAADLKKKD ", "       HHGGGI IKKKKKKKKI IGGGHH      ", "   FF    BBLLLLC      CLLLLBB    FF  ", "  FHHF     BI FC      CF IB     FHHF ", "  FHHF        I        I        FHHF ", "   FF         I        I         FF  ", "              I        I             ", "              AHJ    JHA             ", "               AAAHHAAA              ", "                  HH                 ", "                                     ", "                                     ", "                                     ")
                    .aisle("NHDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDH", "NH     E  E         E      E  E     H", "NEDD                              DDE", "  DDKKLDAAAAAAAAAAAAAAAAAAAAAADLKKDD ", "       HHCC I IKKKKKKKKI I CCHH      ", "   FF    BBCB FFCG  GCFF BCBB    FF  ", "  FHHF     BI FFCG  GCFF IB     FHHF ", "  FHHF        II G  G II        FHHF ", "   FF         II G  G II         FF  ", "              II G  G II             ", "               HJG  GJH              ", "                 AAAA                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle(" DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", " DD    E  E         E      E  E    DD", " EED                              DEE", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       HHCC I  IKKKKKKI  I CCHH      ", "   FF    BBCB  FFC  CFF  BCBB    FF  ", "  FHHF     BI  FFC  CFF  IB     FHHF ", "  FHHF         II    II         FHHF ", "   FF          II    II          FF  ", "               II    II              ", "                HJJJJH               ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  ED                              DE ", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       EIIEII   IKKKKI   IIEIIE      ", "   FF  IIIIIB   FFCCFF   BIIIII  FF  ", "  FHHF     II   FFCCFF   II     FHHF ", "  FHHF          II  II          FHHF ", "   FF           II  II           FF  ", "                II  II               ", "                 HHHH                ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  ED                              DE ", "   DKKLDAAAAAAAAAAAAAAAAAAAAAADLKKD  ", "       E  E      IIII      E  E      ", "   FF            FFFF            FF  ", "  FHHF           FFFF           FHHF ", "  FHHF           IIII           FHHF ", "   FF            IIII            FF  ", "                 IIII                ", "                 A  A                ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  D    E  E         E      E  E    D ", "  EDD                            DDE ", "   DDKLDAAAAAAAAAAAAAAAAAAAAAADLKDD  ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("  DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD ", "  DD   E  E         E      E  E   DD ", "    D                            D   ", "    DKLDAAAAAAAAAAAAAAAAAAAAAADLKD   ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("   DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD  ", "   D   E  E         E      E  E   D  ", "    D                            D   ", "    DDDDDDDDDDDDDDDDDDDDDDDDDDDDDD   ", "       E  E      E  E      E  E      ", "   FF                            FF  ", "  FHHF                          FHHF ", "  FHHF                          FHHF ", "   FF                            FF  ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "      AAAAAA    AAAAAA    AAAAAA     ", "       AAAA      AAAA      AAAA      ")
                    .aisle("   DDDAAAAAADDDDAAAAAADDDDAAAAAADDD  ", "   D  AEAAEA    AEAAEA    AEAAEA  D  ", "    DDAEAAEA    AEAAEA    AEAAEADD   ", "    DDAEAAEADDDDAEAAEADDDDAEAAEADD   ", "      AEAAEA    AEAAEA    AEAAEA     ", "   FFFAAAAAA    AAAAAA    AAAAAAFFF  ", "  FHHFAAAAAAFFFFAAAAAAFFFFAAAAAAFHHF ", "  FHHFAAAAAAFFFFAAAAAAFFFFAAAAAAFHHF ", "   FFFAAAAAA    AAAAAA    AAAAAAFFF  ", "      BBBBBB    BBBBBB    BBBBBB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      BBBBBB    BBBBBB    BBBBBB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAJJAA    AAJJAA    AAJJAA     ", "                                     ")
                    .aisle("   DDDAAAAAADDDDAAAAAADDDDAAAAAADDD  ", "   DD AE  EA    AE  EA    AE  EA DD  ", "    EDAE  EA    AE  EA    AE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "   FFFA    AFFFFA    AFFFFA    AFFF  ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "   FFFAIIIIAFFFFAIIIIAFFFFAIIIIAFFF  ", "      BIIIIB    BIIIIB    BIIIIB     ", "      AIIIIA    AIIIIA    AIIIIA     ", "      AIIIIA    AIIIIA    AIIIIA     ", "      BIIIIB    BIIIIB    BIIIIB     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAJJAA    AAJJAA    AAJJAA     ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    D AE  EA    AE  EA    AE  EA D   ", "    EDAE  EA    AE  EA    AE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "   FFFA    AFFFFA    AFFFFA    AFFF  ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "  FGGHHHHHHHHHHHHHHHHHHHHHHHHHHHHGGF ", "   FFFACCCCAFFFFACCCCAFFFFACCCCAFFF  ", "      BCCCCB    BCCCCB    BCCCCB     ", "      ACCCCA    ACCCCA    ACCCCA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "        AA        AA        AA       ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    D AE  EA    AE  EA    AE  EA D   ", "    EDAE  EADDDDAE  EADDDDAE  EADE   ", "     DAE  EADDDDAE  EADDDDAE  EAD    ", "      AE  EA    AE  EA    AE  EA     ", "     FAACCAA    AACCAA    AACCAAF    ", "   FFFAACCAAFFFFAACCAAFFFFAACCAAFFF  ", "   FFFAACCAAFFFFAACCAAFFFFAACCAAFFF  ", "     FABBBBA    ABBBBA    ABBBBAF    ", "      ABBBBA    ABBBBA    ABBBBA     ", "      ABBBBA    ABBBBA    ABBBBA     ", "      AAAAAA    AAAAAA    AAAAAA     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("    DDAAAAAADDDDAAAAAADDDDAAAAAADD   ", "    DDAACCAADDDDAACCAADDDDAACCAADD   ", "    EEAACCAAEEEEAACCAAEEEEAACCAAEE   ", "      AACCAA    AACCAA    AACCAA     ", "      AACCAA    AACCAA    AACCAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("      AAAAAA    AAAAAA    AAAAAA     ", "      AACCAA    AACCAA    AACCAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .aisle("      AAAAAA    AAAAAA    AAAAAA     ", "      AABBAA    AABBAA    AABBAA     ", "      AABBAA    AABBAA    AABBAA     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ", "                                     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('B', blocks(GTOBlocks.FORCE_FIELD_GLASS.get()))
                    .where('C', blocks(GTOBlocks.QUANTUM_FORCE_TRANSFORMER_COIL.get()))
                    .where('D', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('E', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('F', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('G', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('H', blocks(GTOBlocks.SPACETIMEBENDINGCORE.get()))
                    .where('I', blocks(GTOBlocks.SPACETIMECONTINUUMRIPPER.get()))
                    .where('J', blocks(GTOBlocks.LAW_FILTER_CASING.get()))
                    .where('K', blocks(GTOBlocks.MANIPULATOR.get()))
                    .where('L', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('N', blocks(GTOBlocks.MANIPULATOR.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/manipulator"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition LARGE_CHEMICAL_PLANT = multiblock("large_chemical_plant", "大型化工厂", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .allRotation()
            .recipeTypes(GTORecipeTypes.LARGE_CHEMICAL_PLANT)
            .combinedRecipeTooltips()
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaaaaaaaaaa", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " aaaaaaaaa ", " a       a ", " a       a ", " a       a ", " a       a ", " a       a ", " aaaaaaaaa ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbbbbbb  ", "  bacccab  ", "  bacccab  ", "  bacccab  ", "  bbbbbbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbdddbb  ", "  abdddba  ", "  abdddba  ", "  abdddba  ", "  bbdddbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abb b bba ", "  bd   db  ", "  cd   dc  ", "  cd   dc  ", "  cd   dc  ", "  bd   db  ", " abb b bba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bd b db  ", "  cd b dc  ", "  cd b dc  ", "  cd b dc  ", "  bd b db  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abb b bba ", "  bd   db  ", "  cd   dc  ", "  cd   dc  ", "  cd   dc  ", "  bd   db  ", " abb b bba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbdddbb  ", "  abdddba  ", "  abdddba  ", "  abdddba  ", "  bbdddbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " abbbbbbba ", "  bbbbbbb  ", "  bacccab  ", "  bacccab  ", "  bacccab  ", "  bbbbbbb  ", " abbbbbbba ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", " aaaa~aaaa ", " a       a ", " a       a ", " a       a ", " a       a ", " a       a ", " aaaaaaaaa ", "aaaaaaaaaaa")
                    .aisle("aaaaaaaaaaa", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "aaaaaaaaaaa")
                    .where('~', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .setMinGlobalLimited(60)
                            .or(abilities(GTOPartAbility.CATALYST_HATCH).setMaxGlobalLimited(2))
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('d', heatingCoils())
                    .where('b', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where(' ', any())
                    .build())
            .additionalDisplay(CHEMICAL_PLANT_DISPLAY)
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/machines/chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition INTEGRATED_ORE_PROCESSOR = multiblock("integrated_ore_processor", "集成矿石处理厂", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.INTEGRATED_ORE_PROCESSOR)
            .tooltips(NewDataAttributes.MAIN_FUNCTION.create(
                    v -> v.addLines("一步完成矿石处理", "Completes ore processing in one step")))

            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    h -> h.addLines("电路配置", "Circuit Configuration", StyleBuilder::setGold),
                    c -> c.addLines(
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("1号电路:", "Circuit 1:", StyleBuilder::setWhite)
                                            .addLines(" 破碎-研磨-离心", " Crusher-Macerator-Centrifuging", StyleBuilder::setGray),
                                    p -> p, StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("2号电路:", "Circuit 2:", StyleBuilder::setWhite)
                                            .addLines(" 破碎-洗矿-热离-研磨", " Crusher-Ore Washer-Thermal Separation-Macerator", StyleBuilder::setGray),
                                    p -> p, StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("3号电路:", "Circuit 3:", StyleBuilder::setWhite)
                                            .addLines(" 破碎-洗矿-研磨-离心", " Crusher-Ore Washer-Macerator-Centrifuging", StyleBuilder::setGray),
                                    p -> p, StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("4号电路:", "Circuit 4:", StyleBuilder::setWhite)
                                            .addLines(" 破碎-洗矿-筛选-离心", " Crusher-Ore Washer-Sifter-Centrifuging", StyleBuilder::setGray),
                                    p -> p, StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("5号电路:", "Circuit 5:", StyleBuilder::setWhite)
                                            .addLines(" 破碎-浸洗-热离-研磨", " Crusher-Chemical Bath-Thermal Centrifuging-Macerator", StyleBuilder::setGray),
                                    p -> p, StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("6号电路:", "Circuit 6:", StyleBuilder::setWhite)
                                            .addLines(" 破碎-浸洗-研磨-离心", " Crusher-Chemical Bath-Macerator-Centrifuging", StyleBuilder::setGray),
                                    p -> p, StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("7号电路:", "Circuit 7:", StyleBuilder::setWhite)
                                            .addLines(" 破碎-浸洗-筛选-离心", " Crusher-Chemical Bath-Sifter-Centrifuging", StyleBuilder::setGray),
                                    p -> p, StyleBuilder::setOneTab))))
            .parallelizableTooltips()
            .fromSourceTooltips("GTNH")
            .parallelizableOverclock()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaaaaa     ", "abbbba     ", "abbbba     ", "abbbba     ", "abbbba     ", "aaaaaa     ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .aisle("aaaaaaaaaaa", "bd  d accca", "bd  d accca", "bd  d accca", "bd  d accca", "aaaaaaaccca", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "           ")
                    .aisle("aaaaaaaaaaa", "b ee  c   c", "b ee  ffffc", "b ee  c   c", "b ee  ffffc", "aaaaaac   c", "      cfffc", "      c   c", "      cfffc", "      c   c", "      cfffc", "       gcc ")
                    .aisle("aaaaaaaaaaa", "b ee  c   c", "b ee  ffffc", "b ee  c   c", "b ee  ffffc", "aaaaaac   c", "      cfffc", "      c   c", "      cfffc", "      c   c", "      cfffc", "       ccc ")
                    .aisle("aaaaaaaaaaa", "bd  d accca", "bd  d ac~ca", "bd  d accca", "bd  d accca", "aaaaaaaccca", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "       ccc ", "           ")
                    .aisle("aaaaaa     ", "abbbba     ", "abbbba     ", "abbbba     ", "abbbba     ", "aaaaaa     ", "           ", "           ", "           ", "           ", "           ", "           ")
                    .where('~', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('c', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(60)
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('b', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('d', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlueSteel)))
                    .where('e', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('f', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('g', abilities(MUFFLER))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public static final MultiblockMachineDefinition DRAGON_EGG_COPIER = multiblock("dragon_egg_copier", "龙蛋复制机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.DRAGON_EGG_COPIER_RECIPES)
            .parallelizableTooltips()
            .perfectOCTooltips()
            .parallelizablePerfectOverclock()
            .block(GTOBlocks.DRAGON_STRENGTH_TRITANIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("bbb", "bbb", "bbb")
                    .aisle("bbb", "bcb", "bdb")
                    .aisle("bbb", "bab", "bbb")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTOBlocks.DRAGON_STRENGTH_TRITANIUM_CASING.get())
                            .setMinGlobalLimited(10)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTOBlocks.MAGIC_CORE.get()))
                    .where('d', abilities(MUFFLER))
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/extreme_strength_tritanium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition LARGE_CRACKER = multiblock("large_cracker", "大型裂化机", CoilMultiblockMachine.createCoilMachine(false, false))
            .allRotation()
            .recipeTypes(GTRecipeTypes.CRACKING_RECIPES)
            .parallelizableTooltips()
            .recipeModifiers(RecipeModifierFunction.HATCH_PARALLEL, RecipeModifierFunction::crackerOverclock)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("aaaaaaaaa", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ")
                    .aisle("aaaaaaaaa", "aabbbbbaa", "aabaaabaa", "aabaaabaa", "aabaaabaa", "aabbbbbaa", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbaaabb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " bcccccb ", " bc c cb ", " bcccccb ", " bc c cb ", " bcccccb ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", " b     b ", " b     b ", " b     b ", " b     b ", " b     b ", " bbbbbbb ")
                    .aisle("aaaaaaaaa", "aabbbbbaa", "aabaaabaa", "aabaaabaa", "aabaaabaa", "aabbbbbaa", "aaaaaaaaa")
                    .aisle("aaaa~aaaa", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ", " a     a ")
                    .where('~', controller(blocks(definition.get())))
                    .where('a', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(200)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('b', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('c', heatingCoils())
                    .build())
            .additionalDisplay((controller, components) -> components.add(Component.translatable("gtceu.multiblock.cracking_unit.energy", 100 - 10 * ((ICoilMachine) controller).getCoilTier())))
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/cracking_unit"))
            .register();

    public static final MultiblockMachineDefinition STEAM_PISTON_HAMMER = multiblock("steam_piston_hammer", "蒸汽活塞锤", SteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.FORGE_HAMMER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAA", " E ", "   ", "   ", "   ")
                    .aisle("ABA", "E#E", "EBE", "ECE", "EDE")
                    .aisle("AAA", " S ", "   ", "   ", "   ")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1)))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.WroughtIron)))
                    .where('C', blocks(Blocks.STICKY_PISTON))
                    .where('D', abilities(STEAM))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .shapeInfo(definition -> MultiblockShapeInfo.builder()
                    .aisle("IVO", " S ", "   ", "   ", "   ")
                    .aisle("ABA", "E E", "EBE", "ECE", "EDE")
                    .aisle("AAA", " E ", "   ", "   ", "   ")
                    .where('S', definition, Direction.NORTH)
                    .where('A', GTBlocks.CASING_BRONZE_BRICKS.get())
                    .where('E', GTBlocks.CASING_BRONZE_BRICKS.get())
                    .where('I', GTMachines.STEAM_IMPORT_BUS, Direction.NORTH)
                    .where('V', GTOMachines.STEAM_VENT_HATCH, Direction.NORTH)
                    .where('O', GTMachines.STEAM_EXPORT_BUS, Direction.NORTH)
                    .where('D', GTMachines.STEAM_HATCH, Direction.NORTH)
                    .where('B', ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.WroughtIron))
                    .where('C', Blocks.STICKY_PISTON.defaultBlockState().setValue(DirectionalBlock.FACING, Direction.DOWN))
                    .where(' ', Blocks.AIR)
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/forge_hammer"))
            .register();

    public static final MultiblockMachineDefinition STEAM_PRESSOR = multiblock("steam_pressor", "蒸汽挤压机", SteamMultiblockMachine::new)
            .allRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.COMPRESSOR_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXX", "XXX", "XXX")
                    .aisle("XXX", "X#X", "XXX")
                    .aisle("XXX", "X#X", "XXX")
                    .aisle("XXX", "XSX", "XXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM).setExactLimit(1)))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_pressor"))
            .register();

    public static final MultiblockMachineDefinition STEAM_FOUNDRY = multiblock("steam_foundry", "蒸汽铸造炉", SteamMultiblockMachine::new)
            .allRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.ALLOY_SMELTER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("FFF", "XXX", "XXX")
                    .aisle("FFF", "X#X", "XXX")
                    .aisle("FFF", "XSX", "XXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('F', blocks(GTBlocks.FIREBOX_BRONZE.get())
                            .or(abilities(STEAM).setExactLimit(1)))
                    .where('X', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1)))
                    .where('#', air())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/alloy_smelter"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_MACERATOR = multiblock("large_steam_macerator", "大型蒸汽研磨机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.MACERATOR_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(BACK, RelativeDirection.UP, LEFT)
                    .aisle("AaaaA", "BaaaB", "BaaaB", "ABBBA")
                    .aisle("ABBBA", "aCDCa", "aDCDa", "ABBBA")
                    .aisle("ABBBA", "EDFDa", "aCFCa", "ABGBA")
                    .aisle("ABBBA", "aCDCa", "aDCDa", "ABBBA")
                    .aisle("AaaaA", "BaaaB", "BaaaB", "ABBBA")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('a', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('E', controller(blocks(definition.get())))
                    .where('F', blocks(RegistriesUtils.getBlock("ad_astra:steel_block")))
                    .where('G', abilities(MUFFLER))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_grinder"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_CIRCUIT_ASSEMBLER = multiblock("large_steam_circuit_assembler", "大型蒸汽电路组装机", LargeSteamCircuitAssemblerMachine::new)
            .allRotation()
            .addTooltipsFromClass(LargeSteamCircuitAssemblerMachine.class)
            .tooltips(NewDataAttributes.RECIPE_LEVEL.create(c -> c.addLines("MV及以下", "MV and below")))
            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    v -> v.addLines("可安装大型蒸汽输入仓提升到HV等级", "Can install large steam input to upgrade to HV-recipe-Tier", StyleBuilder::setGold),
                    p -> p.addCommentLines("解锁超频功能", "Unlocking overclocking function")))
            .tooltips(ComponentBuilder.create().addStoryLine(
                    """
                            后世的员工很难想象先驱者是如何仅靠简陋的工具，
                            和坚强的意志打造出如此恐怖，神奇的倍数电路组装机的。
                            或许是魔法？总之没有别的解释了。""",
                    """
                            The first-generation employees of the future cannot imagine how the first-generation employees
                            built such a terrifying, magical circuit-assembly machine with such simple tools and strong will.
                            Maybe magic? But there is no other explanation.""").build())
            .recipeTypes(GTRecipeTypes.CIRCUIT_ASSEMBLER_RECIPES)
            .alwaysTryModifyRecipe(true)
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAA", "AAA", "DDD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ABA", "DCD", " D ")
                    .aisle("AAA", "ASA", "DDD", " D ")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1)))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('C', blocks(GTOBlocks.STEAM_ASSEMBLY_BLOCK.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_circuit_assembler"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_MIXER = multiblock("large_steam_mixer", "大型蒸汽搅拌机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .existingTooltips("steam_mixer", 0)
            .recipeTypes(GTRecipeTypes.MIXER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ")
                    .aisle("AAAAAAAAA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA  B  AA")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A   D   A", "A CCCCC A", "A   D   A", "A CCCCC A", "A   D   A", "ABBBBBBBA")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "A       A", "A   C   A", "A       A", "A   C   A", "A       A", "A   B   A")
                    .aisle("AAAAAAAAA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA     AA", "AA  B  AA")
                    .aisle(" AAAAAAA ", " AAASAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ", " AAAAAAA ")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(4))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_mixer"))
            .register();

    public static final MultiblockMachineDefinition STEAM_MIXER = multiblock("steam_mixer", "蒸汽搅拌机", SteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.MIXER_RECIPES)
            .tooltipsText("无法处理流体", "Cannot process fluids")
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AAA ", " AAA ", " AAA ")
                    .aisle("AAAAA", "ABCBA", "AEEEA")
                    .aisle("AAAAA", "ACDCA", "AEEEA")
                    .aisle("AAAAA", "ABCBA", "AEEEA")
                    .aisle(" AAA ", " ASA ", " AAA ")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', air())
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(blocks(Blocks.GLASS))
                            .or(air()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_mixer"))
            .register();

    public static final MultiblockMachineDefinition STEAM_SEPARATOR = multiblock("steam_separator", "蒸汽分离机", (holder) -> new SteamMultiblockMachine(holder, 8))
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.CENTRIFUGE_RECIPES)
            .steamOverclock("ULV")
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("AAAAA", " B~B ", " BBB ", " BBB ", "  B  ")
                    .aisle("AAAAA", "BC CB", "B   B", "BC CB", " BBB ")
                    .aisle("AAAAA", "B D B", "B D B", "B D B", "BBBBB")
                    .aisle("AAAAA", "BC CB", "B   B", "BC CB", " BBB ")
                    .aisle("AAAAA", " BBB ", " BBB ", " BBB ", "  B  ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.BRONZE_BRICKS_HULL.get()))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(4)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_CENTRIFUGE = multiblock("large_steam_centrifuge", "大型蒸汽离心机", (holder) -> new LargeSteamMultiblockMachine(holder, 8))
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.CENTRIFUGE_RECIPES)
            .steamOverclock("ULV")
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("           ", "   AAAAA   ", "  AAAAAAA  ", "   AAAAA   ", "           ")
                    .aisle("  AAAAAAA  ", "  A     A  ", " AB     BA ", "  A     A  ", "  AAAAAAA  ")
                    .aisle(" AAAAAAAAA ", " A       A ", "AB   C   BA", " A       A ", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A         A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A    E    A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A   ECE   A", "A CCCCCCC A", "A    C    A", " AAAAFAAAA ")
                    .aisle(" AAAAAAAAA ", "A    E    A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", "A         A", "A    C    A", "A         A", " AAAAAAAAA ")
                    .aisle(" AAAAAAAAA ", " A       A ", "AB   C   BA", " A       A ", " AAAAAAAAA ")
                    .aisle("  AAAAAAA  ", "  A     A  ", " AB     BA ", "  A     A  ", "  AAAAAAA  ")
                    .aisle("           ", "   AAAAA   ", "  AAASAAA  ", "   AAAAA   ", "           ")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('C', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('F', abilities(MUFFLER))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(4)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_THERMAL_CENTRIFUGE = multiblock("large_steam_thermal_centrifuge", "大型蒸汽热力离心机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.THERMAL_CENTRIFUGE_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" AAAAA ", " BBBBB ", " BBBBB ", " BBBBB ", "       ")
                    .aisle("ABBABBA", "BC   CB", "BC   CB", "BC   CB", " BBBBB ")
                    .aisle("ABAAABA", "B     B", "B     B", "B     B", " BBBBB ")
                    .aisle("AAAAAAA", "B  D  B", "B  D  B", "B  D  B", " BBEBB ")
                    .aisle("ABAAABA", "B     B", "B     B", "B     B", " BBBBB ")
                    .aisle("ABBABBA", "BC   CB", "BC   CB", "BC   CB", " BBBBB ")
                    .aisle(" AAAAA ", " BBBBB ", " BBSBB ", " BBBBB ", "       ")
                    .where('S', controller(blocks(definition.get())))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('A', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where('E', abilities(MUFFLER))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_thermal_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_BATH = multiblock("large_steam_bath", "大型蒸汽浸洗机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "ABBBBBBBA", "ABBBDBBBA", "ABBBBBBBA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "AB     BA", "AB  D  BA", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "A   D   A", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "AB     BA", "AB  D  BA", "AB     BA", "AACCCCCAA")
                    .aisle("AAAAAAAAA", "ABBBBBBBA", "ABBBDBBBA", "ABBBBBBBA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAASAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('C', blocks(Blocks.GLASS))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Potin)))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition STEAM_BATH = multiblock("steam_bath", "蒸汽浸洗机", SteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "ABCBA", "ADDDA")
                    .aisle("AAAAA", "ABCBA", "ADDDA")
                    .aisle("AAAAA", "AASAA", "AAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('B', air())
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Potin)))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(blocks(Blocks.GLASS))
                            .or(air()))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/machines/chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_ORE_WASHER = multiblock("large_steam_ore_washer", "大型蒸汽洗矿机", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.ORE_WASHER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A   B   A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "ABBBDBBBA", "A  BBB  A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A   B   A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAAAAAAA", "A   B   A", "A       A", "A       A", "ACCCCCCCA")
                    .aisle("AAAASAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('C', blocks(Blocks.GLASS))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(3)))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_ore_washer"))
            .register();

    public static final MultiblockMachineDefinition STEAM_ORE_WASHER = multiblock("steam_ore_washer", "蒸汽洗矿机", SteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(SteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.ORE_WASHER_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAA", "AAAAA", "AAAAA")
                    .aisle("AAAAA", "A C A", "A E A")
                    .aisle("AAAAA", "ACDCA", "AEDEA")
                    .aisle("AAAAA", "A C A", "A E A")
                    .aisle("AAAAA", "AASAA", "AAAAA")
                    .where('S', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
                    .where('E', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTOCore.id("block/multiblock/steam_ore_washer"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_FURNACE = multiblock("large_steam_furnace", "大型蒸汽熔炉", LargeSteamMultiblockMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamMultiblockMachine.class)
            .recipeTypes(GTRecipeTypes.FURNACE_RECIPES)
            .steamOverclock()
            .block(GTBlocks.CASING_BRONZE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("   A    A", "   A    A", "   A    A", "   A    A", "   A    A", "    AAAA ", "         ", "         ")
                    .aisle("BBBCCCCCC", "BKBDEEEED", "BBBDDDDDD", "DDDDDDDDD", "   DDDDDD", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("GGGCHHHHC", "GAGD    D", "GIGD II D", "GGGD JJ D", "GGGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("GGGCHHHHC", "GAGD    E", "GIGD II D", "G GD JJ D", "GAGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("GGGCHHHHC", "GAGD    D", "GIGD II D", "GGGD JJ D", "GGGD    D", "   ADIIDA", "    F  F ", "    F  F ")
                    .aisle("BBBCCCCCC", "BBBDDDDDD", "BBBDEEEED", "DDDDDDDDD", "   DDDDDD", "   ADDDDA", "     FF  ", "     FF  ")
                    .aisle("   A    A", "   A    A", "   A    A", "   A    A", "   A    A", "    AAAA ", "         ", "         ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Bronze)))
                    .where('B', blocks(GTBlocks.CASING_BRONZE_BRICKS.get())
                            .or(abilities(STEAM).setExactLimit(1))
                            .or(blocks(GTOMachines.STEAM_VENT_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(STEAM_IMPORT_ITEMS).setPreviewCount(1))
                            .or(abilities(STEAM_EXPORT_ITEMS).setPreviewCount(1)))
                    .where('C', blocks(GTBlocks.BRONZE_BRICKS_HULL.get()))
                    .where('D', blocks(GTBlocks.CASING_BRONZE_BRICKS.get()))
                    .where('E', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where('F', blocks(GTBlocks.BRONZE_HULL.get()))
                    .where('G', blocks(GCYMBlocks.CASING_INDUSTRIAL_STEAM.get()))
                    .where('H', blocks(Blocks.STONE_BRICKS))
                    .where('I', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_bronze_plated_bricks"), GTCEu.id("block/multiblock/steam_oven"))
            .register();

    public static final MultiblockMachineDefinition LEAP_FORWARD_ONE_BLAST_FURNACE = multiblock("leap_forward_one_blast_furnace", "跃进一号高炉", AdvancedPrimitiveBlastFurnaceMachine::new)
            .nonYAxisRotation()
            .tooltipsText("我们走在大路上！", "We're on the road!")
            .tooltipsText("按温度，下次配方获得400/温度的时间减免", "According to the temperature, the next recipe obtains a duration reduction of 400 / temperature.")
            .specialParallelizableTooltips()
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(h -> h.addLines("层数 x 炉温 x 2 / 500", "Layers x Furnace Temperature x 2 / 500")))
            .recipeTypes(GTRecipeTypes.PRIMITIVE_BLAST_FURNACE_RECIPES)
            .alwaysTryModifyRecipe(true)
            .block(GTBlocks.CASING_PRIMITIVE_BRICKS)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.RIGHT, RelativeDirection.UP)
                    .aisle("     AAAAA     ", "  DDDDDDDDDDD  ", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", "ADDDDDDDDDDDDDA", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", " DDDDDDDDDDDDD ", "  DDDDDDDDDDD  ", "     AAAAA     ")
                    .aisle("     AAAAA     ", "    DEEEEED    ", "   DE     ED   ", "  DE       ED  ", " DE         ED ", "AE           EA", "AE           EA", "GE           EA", "AE           EA", "AE           EA", " DE         ED ", "  DE       ED  ", "   DE     ED   ", "    DEEEEED    ", "     AAAAA     ")
                    .aisle("     BCCCB     ", "    D     D    ", "   D       D   ", "  D         D  ", " D           D ", "B             B", "C             C", "C             C", "C             C", "B             B", " D           D ", "  D         D  ", "   D       D   ", "    D     D    ", "     BCCCB     ")
                    .aisle("     BCCCB     ", "    D     D    ", "   D       D   ", "  D         D  ", " D           D ", "B             B", "C             C", "C             C", "C             C", "B             B", " D           D ", "  D         D  ", "   D       D   ", "    D     D    ", "     BCCCB     ")
                    .aisle("     DDDDD     ", "    DEEEEED    ", "   DE     ED   ", "  DE       ED  ", " DE         ED ", "DE           ED", "DE           ED", "DE           ED", "DE           ED", "DE           ED", " DE         ED ", "  DE       ED  ", "   DE     ED   ", "    DEEEEED    ", "     DDDDD     ")
                    .aisle("               ", "     DDDDD     ", "    DDEEEDD    ", "   DEDFFFDED   ", "  DEEDFFFDEED  ", " DDDDDDDDDDDDDD", " DEFFDE EDFFEDF", " DEFFD   DFFEDF", " DEFFDE EDFFEDF", " DDDDDDDDDDDDDD", "  DEEDFFFDEED  ", "   DEDFFFDED   ", "    DDEEEDD    ", "     DDDDD     ", "               ")
                    .aisle("               ", "       D       ", "      EDE      ", "    EE   EE    ", "   EE     EE   ", "   E       E   ", "  E    E    E F", " DD   E E   DD ", "  E    E    E F", "   E       E   ", "   EE     EE   ", "    EE   EE    ", "      EDE      ", "       D       ", "               ")
                    .aisle("               ", "               ", "      EDE      ", "     E   E     ", "    E     E    ", "   E       E   ", "  E    E    E F", "  D   E E   D  ", "  E    E    E H", "   E       E   ", "    E     E    ", "     E   E     ", "      EDE      ", "               ", "               ").setRepeatable(2, 32)
                    .aisle("               ", "               ", "      DDD      ", "     DEEED     ", "    D     D    ", "   D       D   ", "  DE   E   ED F", "  DE  E E  ED  ", "  DE   E   ED F", "   D       D   ", "    D     D    ", "     DEEED     ", "      DDD      ", "               ", "               ")
                    .aisle("               ", "               ", "     FFFFF     ", "    FDEDEDF    ", "   FDEE EEDF   ", "  FDEE   EEDF  ", "  FEE  E  EEFFF", "  FD  E E  DF F", "  FEE  E  EEFFF", "  FDEE   EEDF  ", "   FDEE EEDF   ", "    FDEDEDF    ", "     FFFFF     ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "      EDE      ", "     EEEEE     ", "    EEEEEEE    ", "   EEEEEEEEE   ", "   DEEE EEED   ", "   EEEEEEEEE   ", "    EEEEEEE    ", "     EEEEE     ", "      EDE      ", "               ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "      EEE      ", "     E   E     ", "    E     E    ", "   E       E   ", "   E       E   ", "   E       E   ", "    E     E    ", "     E   E     ", "      EEE      ", "               ", "               ", "               ")
                    .where('A', blocks(GTBlocks.CASING_PRIMITIVE_BRICKS.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(4, 1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(2, 1)))
                    .where('B', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('C', blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where('D', blocks(Blocks.STONE_BRICKS))
                    .where('E', blocks(GTBlocks.CASING_PRIMITIVE_BRICKS.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('G', controller(blocks(definition.get())))
                    .where('H', GTOPredicates.countBlock("SteelFrame", ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_primitive_bricks"), GTCEu.id("block/multiblock/primitive_blast_furnace"))
            .register();

    public static final MultiblockMachineDefinition PETROCHEMICAL_PLANT = multiblock("petrochemical_plant", "石化工厂", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.PETROCHEMICAL_PLANT_RECIPES)
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('B', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('C', frames(GTMaterials.Steel))
                    .where('D', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('E', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('F', frames(GTMaterials.Tritanium))
                    .where('G', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('H', frames(GTMaterials.NaquadahAlloy))
                    .where('I', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('J', frames(GTMaterials.Tungsten))
                    .where('K', heatingCoils())
                    .where('L', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('M', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('N', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('O', abilities(MUFFLER))
                    .where('P', blocks(AEBlocks.QUARTZ_VIBRANT_GLASS.block()))
                    .where('Q', blocks(AEBlocks.QUARTZ_GLASS.block()))
                    .where('R', frames(GTMaterials.StainlessSteel))
                    .where('S', blocks(GTBlocks.CASING_TITANIUM_TURBINE.get()))
                    .where('T', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('U', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('V', blocks(GTOBlocks.SUPERCRITICAL_TURBINE_CASING.get()))
                    .where('W', air())
                    .where('X', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('Y', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('Z', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('[', blocks(GTOBlocks.PIKYONIUM_MACHINE_CASING.get()))
                    .where('=', blocks(GTBlocks.COMPUTER_CASING.get()))
                    .where(']', blocks(GTBlocks.COMPUTER_HEAT_VENT.get()))
                    .where('^', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .setMinGlobalLimited(20)
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition LARGE_PYROLYSE_OVEN = multiblock("large_pyrolyse_oven", "大型热解炉", CoilMultiblockMachine.createCoilMachine(false, false))
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.PYROLYSE_RECIPES)
            .parallelizableTooltips()
            .recipeModifiers(RecipeModifierFunction.HATCH_PARALLEL, RecipeModifierFunction::pyrolyseOvenOverclock)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAAAAAA", "ACCCCCCCCCCCA", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "             ")
                    .aisle("             ", "A FGFGFGFGF A", "BBBBBBDBBBBBB", "BDDDDDDDDDDDB", "BBBBBBDBBBBBB", "  FGFGFGFGF  ")
                    .aisle("             ", "A FGFGFGFGF A", "BBBBBBDBBBBBB", "B           B", "BEBBBBDBBBBEB", "  FGFGFGFGF  ")
                    .aisle("             ", "A FGFGFGFGF A", "BBBBBBDBBBBBB", "BDDDDDDDDDDDB", "BBBBBBDBBBBBB", "  FGFGFGFGF  ")
                    .aisle("AAAAAAAAAAAAA", "ACCCCCHCCCCCA", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "  CGCGCGCGC  ", "             ")
                    .where('A', frames(GTMaterials.Ruridit))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('C', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(autoAbilities(true, false, true)))
                    .where('D', heatingCoils())
                    .where('E', abilities(MUFFLER))
                    .where('F', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('G', frames(GTMaterials.StainlessSteel))
                    .where('H', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .additionalDisplay((controller, components) -> {
                if (controller instanceof ICoilMachine machine) {
                    components.add(Component.translatable("gtceu.multiblock.pyrolyse_oven.speed", machine.getCoilTier() == 0 ? 75 : 50 * (machine.getCoilTier() + 15)));
                }
            })
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/pyrolyse_oven"))
            .register();

    public static final MultiblockMachineDefinition MEGA_WIREMILL = multiblock("mega_wiremill", "特大线材轧机", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.WIREMILL_RECIPES)
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_INVAR_HEATPROOF)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB CCC  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB C~C   B   B   B    B   B   B    B   B   B    B   B   B ", "D   D CCC                                                    ", "D   D CCC                                                    ", "D   D EEE                                                    ", "      EEE                                                    ", "                                                             ", "                                                             ", "                                                             ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB EEEB BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB EFEB BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB EFEB  B   B   B    B   B   B    B   B   B    B   B   B ", "      EFEB                                                   ", "D   D EFEB                                                   ", "      EFEB                                                   ", "      BFBB                                                   ", "      B B                                                    ", "                                                             ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB EEE  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD", "GG GG EEE  DGD DGD DGD  DGD DGD DGD  DGD DGD DGD  DGD DGD DGD", "BB BB EEE  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD", "BB BB EEE  DDDDDDDDDDD  DDDDDDDDDDD  DDDDDDDDDDD  DDDDDDDDDDD", "D   D EEE                                                    ", "      EEE                                                    ", "       F                                                     ", "      B B                                                    ", "                                                             ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "      BBBB  B   B   B    B   B   B    B   B   B    B   B   B ", "GG GG BBBB BGB BGB BGB  BGB BGB BGB  BGB BGB BGB  BGB BGB BGB", "      BBBB  B   B   B    B   B   B    B   B   B    B   B   B ", "      BBBB                                                   ", "D   D BBBB                                                   ", "BBBBBBBBBB                                                   ", "      BHBB                                                   ", "      BBBB                                                   ", "      B BB                                                   ")
                    .aisle("AAAAAAIIIA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB  I   BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB  I   BGB BGB BGB  BGB BGB BGB  BGB BGB BGB  BGB BGB BGB", "BB BB  I   BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB IIIB  B   B   B    B   B   B    B   B   B    B   B   B ", "D   D BBB   B   B   B    B   B   B    B   B   B    B   B   B ", "BBBBBBB BB                                                   ", "     B HG                                                    ", "     BFGD                                                    ", "     BBBBB                                                   ")
                    .aisle("JKKKJAIIIA FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF", "     DH HD KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK", "     DH HD L L L L L L  L L L L L L  L L L L L L  L L L L L L", "JKKKJDH HD KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK", "BB BB IIIB  F J F J F    F J F J F    F J F J F    F J F J F ", "D   D BBB   BBBBBBBBB    BBBBBBBBB    BBBBBBBBB    BBBBBBBBB ", "     BB BB                                                   ", "       HG                                                    ", "      FGD                                                    ", "      BBBB                                                   ")
                    .aisle("JKKKJAIKIIIIJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF", "      DHD   L L L L L    L L L L L    L L L L L    L L L L L ", "      DHD  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JKKKJ DHD   L L L L L    L L L L L    L L L L L    L L L L L ", "BB BB IHIIIIF J F J F    F J F J F    F J F J F    F J F J F ", "D   D BHB   B   B   B    B   B   B    B   B   B    B   B   B ", "     BBHBB                                                   ", "       HG                                                    ", "       GD                                                    ", "      BBBB                                                   ")
                    .aisle("JKKKJAIKIA FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF", "     DHDHD IKKKKKKKKKIIIIKKKKKKKKKIIIIKKKKKKKKKIIIIKKKKKKKKKK", "     DHDHD L L L L L L  L L L L L L  L L L L L L  L L L L L L", "JKKKJDHDHD IKKKKKKKKKIIIIKKKKKKKKKIIIIKKKKKKKKKIIIIKKKKKKKKKK", "BB BB I IB  F J F J F    F J F J F    F J F J F    F J F J F ", "D   D BBB   BBBBBBBBB    BBBBBBBBB    BBBBBBBBB    BBBBBBBBB ", "     BB BB                                                   ", "       HG                                                    ", "       GD                                                    ", "      BBBB                                                   ")
                    .aisle("JKKKJAIKIIIIJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF", "      DHD   L L L L L    L L L L L    L L L L L    L L L L L ", "      DHD  IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", "JKKKJ DHD   L L L L L    L L L L L    L L L L L    L L L L L ", "BB BB IHIIIIF J F J F    F J F J F    F J F J F    F J F J F ", "D   D BHB   B   B   B    B   B   B    B   B   B    B   B   B ", "     BBHBB                                                   ", "       HG                                                    ", "       GD                                                    ", "      BBBB                                                   ")
                    .aisle("JKKKJAIIIA FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF  FJAAAAAAAAF", "     DH HD KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK", "     DH HD L L L L L L  L L L L L L  L L L L L L  L L L L L L", "JKKKJDH HD KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK  KKKKKKKKKKK", "BB BB IIIB  F J F J F    F J F J F    F J F J F    F J F J F ", "D   D BBB   BBBBBBBBB    BBBBBBBBB    BBBBBBBBB    BBBBBBBBB ", "     BB BB                                                   ", "       HG                                                    ", "      FGD                                                    ", "      BBBB                                                   ")
                    .aisle("AAAAAAIIIA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB DI   BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB DI   BGB BGB BGB  BGB BGB BGB  BGB BGB BGB  BGB BGB BGB", "BB BB DI   BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB IIIB  B   B   B    B   B   B    B   B   B    B   B   B ", "D   D BBB   B   B   B    B   B   B    B   B   B    B   B   B ", "BBBBBBB BB                                                   ", "     B HG                                                    ", "     BFGD                                                    ", "     BBBBB                                                   ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "      BBBB  B   B   B    B   B   B    B   B   B    B   B   B ", "GG GG BBBB BGB BGB BGB  BGB BGB BGB  BGB BGB BGB  BGB BGB BGB", "      BBBB  B   B   B    B   B   B    B   B   B    B   B   B ", "      BBBB                                                   ", "D   D BBBB                                                   ", "BBBBBBBBBB                                                   ", "      BHBB                                                   ", "      BBBB                                                   ", "      B BB                                                   ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB EEE  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD", "GG GG EEE  DGD DGD DGD  DGD DGD DGD  DGD DGD DGD  DGD DGD DGD", "BB BB EEE  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD  DBD DBD DBD", "BB BB EEE  DDDDDDDDDDD  DDDDDDDDDDD  DDDDDDDDDDD  DDDDDDDDDDD", "D   D EEE                                                    ", "      EEE                                                    ", "       F                                                     ", "      B B                                                    ", "                                                             ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB EEEB BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB EFEB BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB EFEB  B   B   B    B   B   B    B   B   B    B   B   B ", "      EFEB                                                   ", "D   D EFEB                                                   ", "      EFEB                                                   ", "      BFBB                                                   ", "      B B                                                    ", "                                                             ")
                    .aisle("AAAAAAAAAA AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA  AAAAAAAAAAA", "BB BB CCC  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB  BBB BBB BBB", "BB BB CCC   B   B   B    B   B   B    B   B   B    B   B   B ", "D   D CCC                                                    ", "D   D CCC                                                    ", "D   D EEE                                                    ", "      EEE                                                    ", "                                                             ", "                                                             ", "                                                             ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('C', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', frames(GTMaterials.TungstenSteel))
                    .where('E', blocks(GTOBlocks.PIKYONIUM_MACHINE_CASING.get()))
                    .where('F', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('G', blocks(GTBlocks.CASING_ASSEMBLY_CONTROL.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('I', heatingCoils())
                    .where('J', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('K', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('L', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_heatproof"), GTCEu.id("block/multiblock/gcym/large_wiremill"))
            .register();

    public static final MultiblockMachineDefinition SUPERCONDUCTING_MAGNETIC_PRESSER = multiblock("superconducting_magnetic_presser", "超导磁驱冲击装置", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltipsText("听说这玩意以前是电磁炮", "I heard that this thing used to be an electromagnetic cannon")
            .recipeTypes(GTRecipeTypes.FORMING_PRESS_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("                                      ", "                                      ", "           CCCCCCCCCCCCCCCCCCC        ", "           CDDDDDDDDDCEEEEEEECCCCC    ", "           CCCCCCCCCCCCCCCCCCC        ", "                                      ", "                                      ")
                    .aisle(" FFFFFFFFFF                           ", " F        FCCCCCCCCCCCCCCCCCCC        ", " FCCCCCCCCCC         CCCCCCCCCCCCC    ", " FCEEEEEEECC         CCCCCCCCCCCCCCCCC", " FCCCCCCCCCC         CCCCCCCCCCCCC    ", " F        FCCCCCCCCCCCCCCCCCCC        ", " FFFFFFFFFF                           ")
                    .aisle(" F        FCCCCCCCCCCCCCCCCCCC        ", " ECCCCCCCCCC         CCCCCCCCCCCCC    ", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " DC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCC    ", " F        FCCCCCCCCCCCCCCCCCCC        ")
                    .aisle(" FCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC    ", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " EC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " DC        GGGGGGGGGGGGGGGGGGGGGGGGGGG", " EC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " FCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC    ")
                    .aisle(" FCHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC ", " ECHHH     CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECHHH     IIIIIIIIIIIIIIG           E", " DCHHH     GGGGGGGGGGGGGGGGGGGGGGGGGGG", " ECHHH     IIIIIIIIIIIIIIG           E", " ECHHH     CCCCCCCCCCCCCCCCCCCCCCCCCCC", " FCHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")
                    .aisle(" FHJKJH    G    LLLLLLLLLL       CCCCC", " EH   H    GGGGGGGGGGGGGGGGGGMMMMGGGGG", " EH   H  GGG             L            ", " DH   H  GGG    NNNNNNNNNLLLLLLLLL    ", " EH   H  GGG             L            ", " EH   H    GGGGGGGGGGGGGGGGGGMMMMGGGGG", " FHJKJH    G    LLLLLLLLLL       CCCCC")
                    .aisle("HHKJKJKH   G    LJJJJJJJJL           C", "HH     H GGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HH     HHHHEJJJE         NOOPPPPPQG   ", "HH     HHHHEEJEE          OLPPPPPLG   ", "HH     HHHHEJJJE         NOOPPPPPQG   ", "HH     H GGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHKJKJKH   G    LJJJJJJJJL           C")
                    .aisle("HJKJKJKJHGGG    LJJJJJJJJL            ", "H       HHHEJJJE         NOOPPPPPQG   ", "HIIIIIIIIIIH    R         OOPPPPPL    ", "H         SSSSSSR         OOPPPPPL    ", "HIIIIIIIIIIH    R         OOPPPPPL    ", "H       HHHEJJJE         NOOPPPPPQG   ", "HJKJKJKJHGGG    LJJJJJJJJL            ")
                    .aisle("HSSSSSSSHGGG    LJJJJJJJJLLLLLLLLL    ", "H      SSSHEEJEE          OLPPPPPLG   ", "H         SSSSSSR         OOPPPPPL    ", "H         OOOOOOR         OOPPPPPL    ", "H         SSSSSSR         OOPPPPPL    ", "H      SSSHEEJEE          OLPPPPPLG   ", "HSSSSSSSHGGG    LJJJJJJJJLLLLLLLLL    ")
                    .aisle("HJKJKJKJHGGG    LJJJJJJJJL            ", "H       HHHEJJJE         NOOPPPPPQG   ", "HIIIIIIIIIIH    R         OOPPPPPL    ", "H         SSSSSSR         OOPPPPPL    ", "HIIIIIIIIIIH    R         OOPPPPPL    ", "H       HHHEJJJE         NOOPPPPPQG   ", "HJKJKJKJHGGG    LJJJJJJJJL            ")
                    .aisle("HHKJKJKH   G    LJJJJJJJJL           C", "HH     H GGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HH     HHHHEJJJE         NOOPPPPPQG   ", "HH     HHHHEEJEE          OLPPPPPLG   ", "HH     HHHHEJJJE         NOOPPPPPQG   ", "HH     H GGGGGGGGGGGGGGGGGGGGGGGGGGGGG", "HHKJKJKH   G    LJJJJJJJJL           C")
                    .aisle(" FHJKJH    G    LLLLLLLLLL       CCCCC", " EH   H    GGGGGGGGGGGGGGGGGGMMMMGGGGG", " EH   H  GGG             L            ", " DH   H  GGG    NNNNNNNNNLLLLLLLLL    ", " EH   H  GGG             L            ", " EH   H    GGGGGGGGGGGGGGGGGGMMMMGGGGG", " FHJKJH    G    LLLLLLLLLL       CCCCC")
                    .aisle(" FCHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECHHH     CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECHHH     IIIIIIIIIIIIIIG           E", " DCHHH     GGGGGGGGGGGGGGGGGGGGGGGGGGG", " ECHHH     IIIIIIIIIIIIIIG           E", " ECHHH     CCCCCCCCCCCCCCCCCCCCCCCCCCC", " FCHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")
                    .aisle(" FCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC    ", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " EC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " DC        GGGGGGGGGGGGGGGGGGGGGGGGGGG", " EC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " FCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC    ")
                    .aisle(" F        FCCCCCCCCCCCCCCCCCCC        ", " ECCCCCCCCCC         CCCCCCCCCCCCC    ", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " DC        CCCCCCCCCCCCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCCCCCC", " ECCCCCCCCCC         CCCCCCCCCCCCC    ", " F        FCCCCCCCCCCCCCCCCCCC        ")
                    .aisle(" FFFFFFFFFF                           ", " F        FCCCCCCCCCCCCCCCCCCC        ", " FCCCCCCCCCC         CCCCCCCCCCCCC    ", " FCEEEEEEECC         CCCCCCCCCCCCCCCCC", " FCCCCCCCCCC         CCCCCCCCCCCCC    ", " F        FCCCCCCCCCCCCCCCCCCC        ", " FFFFFFFFFF                           ")
                    .aisle("    AAAAA                             ", "    AABAA                             ", "    AAAAA  CCCCCCCCCCCCCCCCCCC        ", "           CDDDDDDDDDCEEEEEEECCCCC    ", "           CCCCCCCCCCCCCCCCCCC        ", "                                      ", "                                      ")
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('E', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('F', frames(GTMaterials.HastelloyC276))
                    .where('G', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('H', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('I', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_BOROSILICATE_GLASS.get()))
                    .where('K', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('L', blocks(GTOBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('M', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('N', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('O', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('P', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('Q', frames(GTMaterials.Naquadria))
                    .where('R', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Neutronium)))
                    .where('S', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition FIELD_FORGE_PRESS = multiblock("field_forge_press", "力场锻压机", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.FORGE_HAMMER_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("a  a         a  a
                    .aisle("aaaa   aaa   aaaa", "AAAA   a~a   AAAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", " AACCCCCCCCCCCAA ", " AA           AA ", " AA           AA ", " AA           AA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A   AAA   A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  AA A L A AA  A", "AEEAA A L A AAEEA", "AFFAA A L A AAFFA", "BFFBAAAALAAAABFFB", " FF   L L L   FF ", " FF   L L L   FF ", " FF   L L L   FF ", "BFFB  L L L  BFFB", "A  AAALALALAAA  A", "A  A  L L LLLA  A", "A  A  LLL   LA  A", "A  A  L     LA  A", "BBBB  L     LBBBB", "      L     L    ", "      L     L    ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "AEEAAAAAAAAAAAEEA", "AFFAAAAAAAAAAAFFA", "BFFBAAAAAAAAABFFB", " FF           FF ", " FF           FF ", " FF           FF ", "BFFB         BFFB", "A  AAAAAAAAAAA  A", "A  AAALALALAAA  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "BBBB         BBBB", "                 ", "      L     L    ", "                 ", "                 ")
                    .aisle("AAAA  DDDDD   AAA", "AAAA          AAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", "CAA           AAC", "CAA           AAC", "CAAAAAAAAAAAAAAAC", "CAA           AAC", "CAA           AAC", "CAAAAAAAAAAAAAAAC", "BBBB         BBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", "CAAAAAAAAAAAAAAAC", " AA  AL L LA  AA ", " AA  A     A  AA ", " AA  A     A  AA ", "BBBBGGGGGGGGGBBBB", "                 ", "      L     L    ", "                 ", "                 ")
                    .aisle("ADDA  DDDDD   DDA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", " AA           AA ", " AA           AA ", "CAAAAAAAAAAAAAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A  L  A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "                 ", "      L     L    ", "                 ", "                 ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA         AAAC", " AA           AA ", "                 ", "CAAA         AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A  L  A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "    HHHHH   H    ", "    HHLHH  HLH   ", "    HHHHH   H    ", "     HHH         ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "     IIIIIII     ", "CAAA IIIIIII AAAC", "     IIIIIII     ", " AA  IIIIIII  AA ", "CAAA IIIIIII AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA BBBEBBBAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "    HHHHH   H    ", "    H   H  HLH   ", "    H   H   H    ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "     IDDDDDI     ", "CAAJ IIIIIII JAAC", " AAJ IIIIIII JAA ", "   J IFIIIFI J   ", "CAAJ IFIIIFI JAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IFFFIFFFI AA ", "CAAAIFFFIFFFIAAAC", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "CAAABFFFBFFFBAAAC", "  A           A  ", "  A           A  ", " AA           AA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIIIIII AA ", "    IIFIIIFII    ", "CAAAIIFIIIFIIAAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IIIIIIIII AA ", "CAAAIIIIIIIIIAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAABBBBBBBAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    H   H  H H   ", "    H   H  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIFIIII AA ", "    IIIIFIIII    ", "CAAAIIIIFIIIIAAAC", "       EFE       ", "        F        ", "        F        ", "        F        ", "       EFE       ", "CAAAA BBFBB AAAAC", "  AAAAAA AAAAAA  ", "  AAAAAA AAAAAA  ", " AAAAAAA AAAAAAA ", "   AAAAAAAAAAA   ", "    HHHHH  HHH   ", "    HEEEH  H H   ", "    HEEEH  HHH   ", "     HHH         ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "     IDDDDDI     ", "CAAJ IIIIIII JAAC", "   J IIFFFII J   ", " AAJ IIFFFII JAA ", "CAAJ IIFFFII JAAC", "       FFF       ", "       FFF       ", "       FFF       ", "       FFF       ", "       FFF       ", "CAAAA BFFFB AAAAC", "  A           A  ", "  A           A  ", " AA           AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIFIIII AA ", "    IIIIFIIII    ", "CAAAIIIIFIIIIAAAC", "       EFE       ", "        F        ", "        F        ", "        F        ", "       EFE       ", "CAAAA BBFBB AAAAC", "  AAAAAA AAAAAA  ", "  AAAAAA AAAAAA  ", " AAAAAAA AAAAAAA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IIIIIIIII AA ", "CAAAIIIIIIIIIAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAABBBBBBBAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", " AA IIIIIIIII AA ", "    IIFIIIFII    ", "CAAAIIFIIIFIIAAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DKKKD      ", "    IIDDDDDII    ", "CAAAIIIIIIIIIAAAC", "    IIIIIIIII    ", " AA IFFFIFFFI AA ", "CAAAIFFFIFFFIAAAC", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "     FFF FFF     ", "CAAABFFFBFFFBAAAC", "  A           A  ", "  A           A  ", " AA           AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DDDDDIIIIIDDDDD ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "     IDDDDDI     ", "CAAJ IIIIIII JAAC", " AAJ IIIIIII JAA ", "   J IFIIIFI J   ", "CAAJ IFIIIFI JAAC", "     EFE EFE     ", "      F   F      ", "      F   F      ", "      F   F      ", "     EFE EFE     ", "CAAABBFBBBFBBAAAC", "  AAAA     AAAA  ", "  AAAA     AAAA  ", " AAAAA     AAAAA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "     IIIIIII     ", "CAAA IIIIIII AAAC", "     IIIIIII     ", " AA  IIIIIII  AA ", "CAAA IIIIIII AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA BBB BBB AAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "           HHH   ", "           H H   ", "           HHH   ", "                 ")
                    .aisle(" DD   DDDDD   DD ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAA         AAAC", " AA           AA ", "                 ", "CAAA         AAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "            H    ", "           H H   ", "            H    ", "                 ")
                    .aisle("ADDA  DDDDD  ADDA", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", " AA  A A A A  AA ", " AA A A A A A AA ", "CAAAAAAAAAAAAAAAC", "                 ", "                 ", "                 ", "                 ", "                 ", "CAAAAAAAAAAAAAAAC", "  A  A     A  A  ", "  A  A     A  A  ", " AA  A     A  AA ", "   AAAAAAAAAAA   ", "            H    ", "           HEH   ", "            H    ", "                 ")
                    .aisle("AAAA  DDDDD  AAAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", "CAA           AA ", "CAA           AA ", "CAAAAAAAAAAAAAAAC", "CAA  A A A A  AAC", "CAA A A A A A AAC", "CAAAAAAAAAAAAAAAC", "BBBBAAAAAAAAABBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", "CAAAAAAAAAAAAAAAC", " AA  A     A  AA ", " AA  A     A  AA ", " AA  A     A  AA ", "BBBBGGGGGGGGGBBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  A A A A A A  A", "AEEAA A A A AAEEA", "AFFAAAAAAAAAAAFFA", "BFFBAAAAAAAAABFFB", " FF           FF ", " FF           FF ", " FF           FF ", "BFFB         BFFB", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "A  AAAAAAAAAAA  A", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAADDDDDDDDDAAAA", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "A  AAAAAAAAAAA  A", "A  A A A A A A  A", "AEEAA A A A AAEEA", "AFFAAAAAAAAAAAFFA", "BFFB         BFFB", " FF           FF ", " FF           FF ", " FF           FF ", "BFFB         BFFB", "A  AAAAAAAAAAA  A", "A  A         A  A", "A  A         A  A", "A  A         A  A", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAA          AAA", "AAAA          AAA", "AAAA         AAAA", "AAAA         AAAA", "AAAA         AAAA", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", " AA           AA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "BBBB         BBBB", " AACCCCCCCCCCCAA ", " AAC         CAA ", " AAC         CAA ", " AACCCCCCCCCCCAA ", "BBBB         BBBB", "                 ", "                 ", "                 ", "                 ")
                    .aisle
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('B', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('C', frames(GTOMaterials.Inconel792))
                    .where('D', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('E', blocks(GTBlocks.MACHINE_CASING_UEV.get()))
                    .where('F', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('G', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('H', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('I', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('J', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('K', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('L', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('a', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition HEAVY_ROLLING = multiblock("heavy_rolling", "重型辊轧机", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.HEAVY_ROLLING)
            .combinedRecipeTooltips()
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("CCCCCCCCCCCCC", "CCCCCCCCCCCCC", " C         C ", " CCCCCCCCCCC ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("CPCCCCCCCCCPC", "CPDDDEEEDDDPC", " P         P ", " PPPPPPPPPPP ", "     HHH     ", "             ", "             ", "             ", "             ")
                    .aisle("CPPPPPPPPPPPC", "CPCCCCCCCCCPC", " P         P ", " PCCCCCCCCCP ", " PPPPPPPPPPP ", "     HHH     ", "     B B     ", "     B B     ", "     BBB     ")
                    .aisle("CPPPPPPPPPPPC", "CPQQQQQQQQQPC", " P         P ", " PQQQQQQQQQP ", " PPPPPPPPPPP ", "  KKKKHKKKK  ", "  KOOK KOOK  ", "  KOOK KOOK  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CP         PC", " P         P ", " P   Q  Q  P ", " PPPPPPPPPPP ", "  KKKKHKKKK  ", "  O  K K  O  ", "  O  K K  O  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CPQQQQQQQQQPC", " P         P ", " PQQQQQQQQQP ", " PPPQQPQQPPP ", "  KKQQHQQKK  ", "  ODDK KDDO  ", "  ODDK KDDO  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CP         PC", " P         P ", " P  QQ QQ  P ", " PPPPPPPPPPP ", "  KKKKHKKKK  ", "  KKKK KKKK  ", "  KKKK KKKK  ", "  KKKB BKKK  ")
                    .aisle("CPPPPPPPPPPPC", "CPQQQQQQQQQPC", " P         P ", " PQQQQQQQQQP ", " PPPPPPPPPPP ", "     BHB     ", "     B B     ", "     B B     ", "     B B     ")
                    .aisle("CPPPPPPPPPPPC", "CPCCCCCCCCCPC", " P         P ", " PCCCCCCCCCP ", " PPPPPPPPPPP ", "      H      ", "             ", "             ", "     B B     ")
                    .aisle("CHHHHHHHHHHHC", "CHCCCCCCCCCHC", " H         H ", " H         H ", " HHHHHHHHHHH ", " HHHHHHHHHHH ", "             ", "             ", "     B B     ")
                    .aisle("HHHHHHHHHHHHH", "H           H", "HHOOOOOOOOOHH", " H         H ", " H         H ", " H         H ", " HHHHHHHHHHH ", "             ", "     B B     ")
                    .aisle("HHHHHHHHHHHHH", "HJJJJJJJJJJJH", "HHJJJJJJJJJHH", " H         H ", " H         H ", " H         H ", " HHHHHHHHHHH ", "   HHHHHH    ", "     B B     ")
                    .aisle("HHHHHHHHHHHHH", "HJJJJJJJJJJJH", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBBBBBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "DDDDDDDDDDDDD", " HKKKKKKKKKH ", "MNMMMMMMMMMNM", " NKKKKKKKKKN ", " H         H ", " HHHHHHHHHHH ", "     LLL     ")
                    .aisle("HHHHHHHHHHHHH", "H JJJJJJJJJJH", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBLLLBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "DDDDDDDDDDDDD", "EH         HE", "EH         HE", "EEEEEEEEEEEEE", " H         H ", " HHHHHHHHHHH ", "     LLL     ")
                    .aisle("HHHHHHHHHHHHH", "H           H", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBLLLBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "DDDDDDDDDDDDD", " HKKKKKKKKKH ", "MNMMMMMMMMMNM", " NKKKKKKKKKN ", " H         H ", " HHHHHHHHHHH ", "     LLL     ")
                    .aisle("HHHHHHHHHHHHH", "H           H", "BBJJJJJJJJJBB", "BH         HB", "BHKKKKKKKKKHB", "BH         HB", "BH         HB", "BHHHHHHHHHHHB", "BBBBBLLLBBBBB")
                    .aisle("HHHHHHHHHHHHH", "H           H", "HHJJJJJJJJJHH", " H         H ", " H         H ", " H         H ", " H         H ", " HHHHHHHHHHH ", "             ")
                    .aisle("HHHHHHHHHHHHH", "HHHHHHHHHHHHH", " HCCCCCCCCCH ", " H         H ", " HCCCCCCCCCH ", " HHHHHHHHHHH ", " HIIIIHIIIIH ", " HHHHHHHHHHH ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " BCCC   CCCB ", " B         B ", "  AAAAAAAAA  ", "  HHHHHHHHH  ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " B         B ", " B         B ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " B         B ", " BCCCCCCCCCB ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", " A         A ", " ADDDEEEDDDA ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aA         AA", " A         A ", " A         A ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBGGGGGGGGGBA", "BBG       GBB", "BGGGGGGGGGGGB", "BGAAAAAAAAAGB", "BBBBBBBBBBBBB", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", " A         A ", " ADDDEEEDDDA ", " GAAAAAAAAAG ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aAGGGGGGGGGAA", "BAG       GAB", "BGGGGGGGGGGGB", "BGAAAAAAAAAGB", "BBBBBBBBBBBBB", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", " A         A ", " ADDDEEEDDDA ", " GAAAAAAAAAG ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBGGGGGGGGGBA", "BBG       GBB", "BGGGGGGGGGGGB", "BGAAAAAAAAAGB", "BBBBBBBBBBBBB", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aA         AA", "aA         A ", " A         A ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aADDDEEEDDDAA", "~A         A ", " ADDDEEEDDDA ", " AAAAAAAAAAA ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", "aB         B ", " BCCCCCCCCCB ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCCCCCCCCCBA", " B         B ", " BCCCCCCCCCB ", "  AAAAAAAAA  ", "             ", "             ", "             ", "             ")
                    .aisle("AAAAAAAAAAAAA", "aBCC     CCBA", " B         B ", " B         B ", "             ", "             ", "             ", "             ", "             ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where('B', frames(GTMaterials.NaquadahAlloy))
                    .where('C', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('E', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('G', heatingCoils())
                    .where('H', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('I', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('J', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('K', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('L', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('M', blocks(GTBlocks.MACHINE_CASING_UHV.get()))
                    .where('N', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('O', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('P', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('Q', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('a', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/high_temperature_smelting_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition PHASE_CHANGE_CUBE = multiblock("phase_change_cube", "相变魔方", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.EXTRACTOR_RECIPES)
            .recipeTypes(GTRecipeTypes.FLUID_SOLIDFICATION_RECIPES)
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("                   ", " AA    AAAAA    AA ", " A     AAAAA     A ", "                   ", "                   ", "                   ", "                   ", " AA             AA ", " AA             AA ", " AA             AA ", " AA             AA ", " AA             AA ", "                   ", "                   ", "                   ", "                   ", " A     AAAAA     A ", " AA    AAAAA    AA ", "                   ")
                    .aisle(" AA    AAAAA    AA ", "ABBBBBBB   BBBBBBBA", "ABCCCCCB   BCCCCCBA", " BCCDCCB   BCCDCCB ", " BCDEDCB   BCDEDCB ", " BCCDCCB   BCCDCCB ", " BCCCCCB   BCCCCCB ", "ABBBBBBB   BBBBBBBA", "A                 A", "A                 A", "A                 A", "ABBBBBBB   BBBBBBBA", " BCCCCCB   BCCCCCB ", " BCCDCCB   BCCDCCB ", " BCDEDCB   BCDEDCB ", " BCCDCCB   BCCDCCB ", "ABCCCCCB   BCCCCCBA", "ABBBBBBB   BBBBBBBA", " AA    AAAAA    AA ")
                    .aisle(" A     AAAAA     A ", "ABCCCCCB   BCCCCCBA", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", "ABCCCCCB   BCCCCCBA", "A                 A", "A                 A", "A                 A", "ABCCCCCB   BCCCCCBA", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", "ABCCCCCB   BCCCCCBA", " A     AAAAA     A ")
                    .aisle("                   ", " BCCDCCB   BCCDCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCFCCB   BCCFCCB ", "    F         F    ", "    F         F    ", "    F         F    ", " BCCFCCB   BCCFCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCDCCB   BCCDCCB ", "                   ")
                    .aisle("                   ", " BCDEDCB   BCDEDCB ", " C  E  C   C  E  C ", " D  E  FFFFF  E  D ", " EEEEEEEEEEEEEEEEE ", " D  E  FFFFF  E  D ", " C  E  C   C  E  C ", " BCFEFCB   BCFEFCB ", "   FEF       FEF   ", "   FEF       FEF   ", "   FEF       FEF   ", " BCFEFCB   BCFEFCB ", " C  E  C   C  E  C ", " D  E  FFFFF  E  D ", " EEEEEEEEEEEEEEEEE ", " D  E  FFFFF  E  D ", " C  E  C   C  E  C ", " BCDEDCB   BCDEDCB ", "                   ")
                    .aisle("                   ", " BCCDCCB   BCCDCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCFCCB   BCCFCCB ", "    F         F    ", "    F         F    ", "    F         F    ", " BCCFCCB   BCCFCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCDCCB   BCCDCCB ", "                   ")
                    .aisle("                   ", " BCCCCCB   BCCCCCB ", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     CGGGC     C ", " BCCCCCBHHHBCCCCCB ", "      GH   HG      ", "      GH   HG      ", "      GH   HG      ", " BCCCCCBHHHBCCCCCB ", " C     CGGGC     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", " BCCCCCB   BCCCCCB ", "                   ")
                    .aisle(" AA             AA ", "ABBBBBBB   BBBBBBBA", "ABCCCCCB   BCCCCCBA", " BCCFCCB   BCCFCCB ", " BCFEFCB   BCFEFCB ", " BCCFCCB   BCCFCCB ", " BCCCCCBHHHBCCCCCB ", " BBBBBBAAAAABBBBBB ", "      HAAAAAH      ", "      HAAAAAH      ", "      HAAAAAH      ", " BBBBBBAAAAABBBBBB ", " BCCCCCBHHHBCCCCCB ", " BCCFCCB   BCCFCCB ", " BCFEFCB   BCFEFCB ", " BCCFCCB   BCCFCCB ", "ABCCCCCB   BCCCCCBA", "ABBBBBBB   BBBBBBBA", " AA             AA ")
                    .aisle(" AA             AA ", "A                 A", "A                 A", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "      GH   HG      ", "      HAAAAAH      ", "      GA   A       ", "      GA   A       ", "      GA   A       ", "      HAAAAAH      ", "      GH   HG      ", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "A                 A", "A                 A", " AA             AA ")
                    .aisle(" AA             AA ", "A                 A", "A                 A", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "      GH   HG      ", "      HAAAAAH      ", "      GA   A       ", "      IA   A       ", "      GA   A       ", "      HAAAAAH      ", "      GH   HG      ", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "A                 A", "A                 A", " AA             AA ")
                    .aisle(" AA             AA ", "A                 A", "A                 A", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "      GH   HG      ", "      HAAAAAH      ", "      GA   A       ", "      GA   A       ", "      GA   A       ", "      HAAAAAH      ", "      GH   HG      ", "    F         F    ", "   FEF       FEF   ", "    F         F    ", "A                 A", "A                 A", " AA             AA ")
                    .aisle(" AA             AA ", "ABBBBBBB   BBBBBBBA", "ABCCCCCB   BCCCCCBA", " BCCFCCB   BCCFCCB ", " BCFEFCB   BCFEFCB ", " BCCFCCB   BCCFCCB ", " BCCCCCBHHHBCCCCCB ", " BBBBBBAAAAABBBBBB ", "      HAAAAAH      ", "      HAAAAAH      ", "      HAAAAAH      ", " BBBBBBAAAAABBBBBB ", " BCCCCCBHHHBCCCCCB ", " BCCFCCB   BCCFCCB ", " BCFEFCB   BCFEFCB ", " BCCFCCB   BCCFCCB ", "ABCCCCCB   BCCCCCBA", "ABBBBBBB   BBBBBBBA", " AA             AA ")
                    .aisle("                   ", " BCCCCCB   BCCCCCB ", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     CGGGC     C ", " BCCCCCBHHHBCCCCCB ", "      GH   HG      ", "      GH   HG      ", "      GH   HG      ", " BCCCCCBHHHBCCCCCB ", " C     CGGGC     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", " BCCCCCB   BCCCCCB ", "                   ")
                    .aisle("                   ", " BCCDCCB   BCCDCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCFCCB   BCCFCCB ", "    F              ", "    F              ", "    F              ", " BCCFCCB   BCCFCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCDCCB   BCCDCCB ", "                   ")
                    .aisle("                   ", " BCDEDCB   BCDEDCB ", " C  E  C   C  E  C ", " D  E  FFFFF  E  D ", " EEEEEEEEEEEEEEEEE ", " D  E  FFFFF  E  D ", " C  E  C   C  E  C ", " BCFEFCB   BCFEFCB ", "   FEF        E    ", "   FEF        E    ", "   FEF        E    ", " BCFEFCB   BCFEFCB ", " C  E  C   C  E  C ", " D  E  FFFFF  E  D ", " EEEEEEEEEEEEEEEEE ", " D  E  FFFFF  E  D ", " C  E  C   C  E  C ", " BCDEDCB   BCDEDCB ", "                   ")
                    .aisle("                   ", " BCCDCCB   BCCDCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCFCCB   BCCFCCB ", "    F              ", "    F              ", "    F              ", " BCCFCCB   BCCFCCB ", " C     C   C     C ", " C     C   C     C ", " D  E  FFFFF  E  D ", " C     C   C     C ", " C     C   C     C ", " BCCDCCB   BCCDCCB ", "                   ")
                    .aisle(" A     AAAAA     A ", "ABCCCCCB   BCCCCCBA", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", "ABCCCCCB   BCCCCCBA", "A                 A", "A                 A", "A                 A", "ABCCCCCB   BCCCCCBA", " C     C   C     C ", " C     C   C     C ", " C  E  C   C  E  C ", " C     C   C     C ", " C     C   C     C ", "ABCCCCCB   BCCCCCBA", " A     AAAAA     A ")
                    .aisle(" AA    AAAAA    AA ", "ABBBBBBB   BBBBBBBA", "ABCCCCCB   BCCCCCBA", " BCCDCCB   BCCDCCB ", " BCDEDCB   BCDEDCB ", " BCCDCCB   BCCDCCB ", " BCCCCCB   BCCCCCB ", "ABBBBBBB   BBBBBBBA", "A                 A", "A                 A", "A                 A", "ABBBBBBB   BBBBBBBA", " BCCCCCB   BCCCCCB ", " BCCDCCB   BCCDCCB ", " BCDEDCB   BCDEDCB ", " BCCDCCB   BCCDCCB ", "ABCCCCCB   BCCCCCBA", "ABBBBBBB   BBBBBBBA", " AA    AAAAA    AA ")
                    .aisle("                   ", " AA    AAAAA    AA ", " A     AAAAA     A ", "                   ", "                   ", "                   ", "                   ", " AA             AA ", " AA             AA ", " AA             AA ", " AA             AA ", " AA             AA ", "                   ", "                   ", "                   ", "                   ", " A     AAAAA     A ", " AA    AAAAA    AA ", "                   ")
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('B', frames(GTMaterials.HastelloyC276))
                    .where('C', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('D', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('E', heatingCoils())
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('I', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition MEGA_CANNER = multiblock("mega_canner", "特大装罐机", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.CANNER_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.LAFIUM_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "         ", "         ", "         ", "    B    ", "   DBD   ", "   D D   ", "         ", "         ", "   D D   ", "   D D   ", "    B    ", "    B    ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "    B    ", "   BBB   ", "   BBB   ", "   BDB   ", "  DDDDD  ", "  DEEED  ", "   EFE   ", "   EFE   ", "  DEEED  ", "  DDDDD  ", "   BDB   ", "   BBB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BBB   ", "   BCB   ", "   BCB   ", "  BDCDB  ", "  BDCDB  ", "   EEE   ", "   F F   ", "   F F   ", "   EEE   ", "  BDCDB  ", "  BDCDB  ", "  BBCBB  ", "   BBB   ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "   BBB   ", "   BDB   ", "  DDDDD  ", "  DEEED  ", "   EFE   ", "   EFE   ", "  DEEED  ", "  DDDDD  ", "   BDB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "         ", "    B    ", "   DBD   ", "   D D   ", "         ", "         ", "   D D   ", "   DDD   ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BCB   ", "   BBB   ", "    B    ", "         ", "         ", "         ", "         ", "         ", "         ", "    B    ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "   BBB   ", "   BCB   ", "   BBB   ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "   BBB   ", "   BBB   ", "   BCB   ", "    B    ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "    B    ", "   BBB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "   BCB   ", "    B    ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "         ", "    B    ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "   BBB   ", "    B    ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "  AAAAA  ", "         ", "         ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "    B    ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAAAAAA", " AAAAAAA ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle("AAAAAAAAA", "AAAAAAAAA", "AAAAGAAAA", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .where('A', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where('B', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('C', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('D', blocks(GTOBlocks.ENHANCE_HYPER_MECHANICAL_CASING.get()))
                    .where('E', blocks(GTBlocks.MACHINE_CASING_UV.get()))
                    .where('F', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('G', controller(blocks(definition.get())))
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/lafium_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_extractor"))
            .register();

    public static final MultiblockMachineDefinition DISASSEMBLY = multiblock("disassembly", "拆解机", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.DISASSEMBLY_RECIPES)
            .tooltipsText("可拆解: %s, %s, %s, %s, %s, %s", "Disassembleable: %s, %s, %s, %s, %s, %s", Component.translatable("gtceu.assembler"), Component.translatable("gtceu.precision_assembler"), Component.translatable("gtceu.assembler_module"), Component.translatable("gtceu.assembly_line"), Component.translatable("gtceu.circuit_assembly_line"), Component.translatable("gtceu.suprachronal_assembly_line"))
            .tooltipsText("同对应配方时间与耗能，可由多个配方获取的物品无法拆解", "Corresponding to the recipe time and energy consumption, items obtained from multiple recipes cannot be disassembled")
            .overclock()
            .block(GTOBlocks.PROCESS_MACHINE_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("AAA", "AAA", "AAA")
                    .aisle("BCB", "BDB", "CCC")
                    .aisle("BCB", "EFE", "GGG")
                    .aisle("HCB", "E#E", "GGG")
                    .aisle("BCB", "EFE", "GGG")
                    .aisle("BCB", "BDB", "CCC")
                    .aisle("AAA", "AAA", "AAA")
                    .where('A', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('C', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('D', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('E', frames(GTMaterials.StainlessSteel))
                    .where('F', blocks(Blocks.IRON_BARS))
                    .where('G', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where('B', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/process_machine_casing"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public static final MultiblockMachineDefinition ELEMENT_COPYING = multiblock("element_copying", "元素复制机", CrossRecipeMultiblockMachine::createHatchParallel)
            .allRotation()
            .recipeTypes(GTORecipeTypes.ELEMENT_COPYING_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("     AAFAA     ", "     AAFAA     ", "      AAA      ")
                    .aisle("   AAAAAAAAA   ", "   AACCCCCAA   ", "     ADADA     ")
                    .aisle("  AAAAABAAAAA  ", "  ACCCABACCCA  ", "   AAE ~ EAA   ")
                    .aisle(" AAAAA   AAAAA ", " ACCAA   AACCA ", "  AE       EA  ")
                    .aisle(" AAA       AAA ", " ACA       ACA ", "  A         A  ")
                    .aisle("AAAA       AAAA", "ACCA       ACCA", " AE         EA ")
                    .aisle("AAA         AAA", "ACA         ACA", "AD           DA")
                    .aisle("FAB         BAF", "FCB         BCF", "AA           AA")
                    .aisle("AAA         AAA", "ACA         ACA", "AD           DA")
                    .aisle("AAAA       AAAA", "ACCA       ACCA", " AE         EA ")
                    .aisle(" AAA       AAA ", " ACA       ACA ", "  A         A  ")
                    .aisle(" AAAAA   AAAAA ", " ACCAA   AACCA ", "  AE       EA  ")
                    .aisle("  AAAAABAAAAA  ", "  ACCCABACCCA  ", "   AAE   EAA   ")
                    .aisle("   AAAAAAAAA   ", "   AACCCCCAA   ", "     ADADA     ")
                    .aisle("     AAFAA     ", "     AAFAA     ", "      AAA      ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(5).setPreviewCount(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(GTOPartAbility.THREAD_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(GTOPartAbility.OVERCLOCK_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('B', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('C', blocks(GTOBlocks.MOLECULAR_COIL.get()))
                    .where('D', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('E', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('F', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition ATOMIC_ENERGY_EXCITATION_PLANT = multiblock("atomic_energy_excitation_plant", "原子能激发工厂", CoilMultiblockMachine.createCoilMachine(false, true))
            .allRotation()
            .recipeTypes(GTORecipeTypes.ATOMIC_ENERGY_EXCITATION_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("                   ", "                   ", "                   ", "                   ", "         A         ", "        ABA        ", "        CCC        ", "        ABA        ", "         A         ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("DDD             DDD", "DDD     AAA     EEE", "EEE   AA A AA   EEE", "EEE  A   A   A  EEE", "EEE  A  AAA  A   B ", " A  A  AA#AA  A  A ", " AAAB  CC#CC  BAAA ", "    A  AA#AA  A    ", "     A  AAA  A     ", "     A   A   A     ", "      AA A AA      ", "        ABA        ", "                   ")
                    .aisle("DDD     AAA     DDD", "D#D   AAFGFAA   E#E", "E#E  AHHAHAHHA  E#E", "E#E AHAAAHAAAHA E#E", "E#E AHA AIA AHA A#A", "AHAAFA B###B AFAAHA", "AFHHGA C#J#C AGHHFA", " AAAFA B###B AFAAA ", "    AHA AIA AHA    ", "    AHAAAHAAAHA    ", "     AHHAHAHHA     ", "      AAFGFAA      ", "        AAA        ")
                    .aisle("D~D             DDD", "DDD     AAA     EEE", "EEE   AA A AA   EEE", "EEE  A   A   A  EEE", "EEE  A  AAA  A   B ", " A  A  AA#AA  A  A ", " AAAB  CC#CC  BAAA ", "    A  AA#AA  A    ", "     A  AAA  A     ", "     A   A   A     ", "      AA A AA      ", "        ABA        ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "         A         ", "        ABA        ", "        CCC        ", "        ABA        ", "         A         ", "                   ", "                   ", "                   ", "                   ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('B', blocks(GTOBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where('C', heatingCoils())
                    .where('D', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(4).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where('E', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('F', blocks(GTOBlocks.ACCELERATED_PIPELINE.get()))
                    .where('G', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('I', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('J', blocks(GTOBlocks.AGGREGATIONE_CORE.get()))
                    .where(' ', any())
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/dimensionally_transcendent_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition INDUSTRIAL_FLOTATION_CELL = multiblock("industrial_flotation_cell", "工业浮选机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.FLOTATING_BENEFICIATION_RECIPES)
            .tooltipsText("工业级浮游选矿池", "Industrial Flotation Mining Pool")
            .parallelizableTooltips()
            .perfectOCTooltips()
            .fromSourceTooltips("GTNH")
            .parallelizablePerfectOverclock()
            .block(GTOBlocks.HASTELLOY_N_75_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.RIGHT, RelativeDirection.BACK, RelativeDirection.UP)
                    .aisle("  AAA  ", " AAAAA ", "AAAAAAA", "AAAAAAA", "AAAAAAA", " AAAAA ", "  AAA  ")
                    .aisle("  A~A  ", " AADAA ", "AADDDAA", "ADDDDDA", "AADDDAA", " AADAA ", "  AAA  ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "   B   ", "  B#B  ", " B#C#B ", "  B#B  ", "   B   ", "       ")
                    .aisle("       ", "       ", "   E   ", "  EEE  ", "   E   ", "       ", "       ")
                    .where('~', controller(blocks(definition.get())))
                    .where('D', blocks(GTOBlocks.HASTELLOY_N_75_GEARBOX.get()))
                    .where('B', blocks(GTOBlocks.FLOTATION_CELL.get()))
                    .where('A', blocks(GTOBlocks.HASTELLOY_N_75_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(PARALLEL_HATCH).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTOBlocks.HASTELLOY_N_75_PIPE.get()))
                    .where('E', blocks(GTOBlocks.HASTELLOY_N_75_CASING.get()))
                    .where(' ', any())
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hastelloy_n_75_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition VACUUM_DRYING_FURNACE = multiblock("vacuum_drying_furnace", "真空干燥炉", CoilCustomParallelMultiblockMachine.createParallelCoil(m -> {
        if (m.getRecipeType() == GTORecipeTypes.DEHYDRATOR_RECIPES) {
            return 1L << (long) (m.gto$getTemperature() / 900.0D);
        }
        return 1;
    }, true, false, false))
            .allRotation()
            .recipeTypes(GTORecipeTypes.VACUUM_DRYING_RECIPES)
            .recipeTypes(GTORecipeTypes.DEHYDRATOR_RECIPES)
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.2")
            .tooltipsKey("gtocore.machine.recipe.run", Component.translatable("gtceu.vacuum_drying"))
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.0")
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.1")
            .tooltipsKey("gtocore.machine.recipe.run", Component.translatable("gtceu.dehydrator"))
            .coilParallelTooltips()
            .recipeModifier((m, r) -> {
                if (m instanceof CoilCustomParallelMultiblockMachine machine) {
                    if (machine.getRecipeType() == GTORecipeTypes.DEHYDRATOR_RECIPES) {
                        return RecipeModifierFunction.overclocking(m, r);
                    } else {
                        return RecipeModifierFunction.ebfOverclock(m, r);
                    }
                }
                return null;
            })
            .block(GTOBlocks.RED_STEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAA", "BBB", "BBB", "BBB", "AAA")
                    .aisle("AAA", "B B", "B B", "B B", "ACA")
                    .aisle("A~A", "BBB", "BBB", "BBB", "AAA")
                    .where('~', controller(blocks(definition.get())))
                    .where('C', abilities(MUFFLER).setExactLimit(1))
                    .where('A', blocks(GTOBlocks.RED_STEEL_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', heatingCoils())
                    .where(' ', air())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/red_steel_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition MOLTEN_CORE = multiblock("molten_core", "熔火之心", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.FLUID_HEATER_RECIPES)
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("       AAA       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "                 ", "                 ")
                    .aisle("      AABAA      ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "                 ")
                    .aisle("    AACCCCCAA    ", "      CCCCC      ", "      CCCCC      ", "      DDDDD      ", "                 ", "      DDDDD      ", "      CCCCC      ", "      CCCCC      ", "       A A       ", "       ABA       ", "                 ")
                    .aisle("   ACCEEEEECCA   ", "    CCEEEEECC    ", "    CCEEEEECC    ", "    DDEEEEEDD    ", "      FFFFF      ", "    DDEEEEEDD    ", "    CCEEEEECC    ", "    CCEEEEECC    ", "      GGGGG      ", "       ABA       ", "                 ")
                    .aisle("  ACEEEEEEEEECA  ", "   CEEE   EEEC   ", "   CEEE   EEEC   ", "   DEEE   EEED   ", "    FFF   FFF    ", "   DEEE   EEED   ", "   CEEE   EEEC   ", "   CEEEEEEEEEC   ", "     GGGGGGG     ", "       BBB       ", "                 ")
                    .aisle("  ACEEEEEEEEECA  ", "   CE   H   EC   ", "   CE   H   EC   ", "   DE B H B ED   ", "    F   H   F    ", "   DE B H B ED   ", "   CE   H   EC   ", "   CEEEEEEEEEC   ", "    GGGGGGGGG    ", "      BGGGB      ", "                 ")
                    .aisle(" ACEEEEEEEEEEECA ", "  CEE       EEC  ", "  CEE       EEC  ", "  DEEBBBBBBBEED  ", "   FF       FF   ", "  DEEBBBBBBBEED  ", "  CEE       EEC  ", "  CEEEEEEEEEEEC  ", "   GGGGEEEGGGG   ", "     BGIIIGB     ", "                 ")
                    .aisle("AACEEEEEEEEEEECAA", "AACE    J    ECAA", "AACE    J    ECAA", "AADE  B J B  EDAA", "AA F    J    F AA", "AADE  B J B  EDAA", "AACE    J    ECAA", "AACEEEE J EEEECAA", "AAAGGGEEJEEGGGAAA", " AAABGIIIIIGBAAA ", "                 ")
                    .aisle("ABCEEEEEEEEEEECBA", " BCE H J J H ECB ", " BCE H J J H ECB ", " BDE HBJ JBH EDB ", " B F H J J H F B ", " BDE HBJ JBH EDB ", " BCE H J J H ECB ", " BCEEEEJ JEEEECB ", " B GGGEJ JEGGG B ", " BBBBGIIKIIGBBBB ", "                 ")
                    .aisle("AACEEEEEEEEEEECAA", "AACE    J    ECAA", "AACE    J    ECAA", "AADE  B J B  EDAA", "AA F    J    F AA", "AADE  B J B  EDAA", "AACE    J    ECAA", "AACEEEE J EEEECAA", "AAAGGGEEJEEGGGAAA", " AAABGIIIIIGBAAA ", "                 ")
                    .aisle(" ACEEEEEEEEEEECA ", "  CEE       EEC  ", "  CEE       EEC  ", "  DEEBBBBBBBEED  ", "   FF       FF   ", "  DEEBBBBBBBEED  ", "  CEE       EEC  ", "  CEEEEEEEEEEEC  ", "   GGGGEEEGGGG   ", "     BGIIIGB     ", "                 ")
                    .aisle("  ACEEEEEEEEECA  ", "   CE   H   EC   ", "   CE   H   EC   ", "   DE B H B ED   ", "    F   H   F    ", "   DE B H B ED   ", "   CE   H   EC   ", "   CEEEEEEEEEC   ", "    GGGGGGGGG    ", "      BGGGB      ", "                 ")
                    .aisle("  ACEEEEEEEEECA  ", "   CEEE   EEEC   ", "   CEEE   EEEC   ", "   DEEE   EEED   ", "    FFF   FFF    ", "   DEEE   EEED   ", "   CEEE   EEEC   ", "   CEEEEEEEEEC   ", "     GGGGGGG     ", "       BBB       ", "                 ")
                    .aisle("   ACCEEEEECCA   ", "    CCEEEEECC    ", "    CCEEEEECC    ", "    DDEEEEEDD    ", "      FFFFF      ", "    DDEEEEEDD    ", "    CCEEEEECC    ", "    CCEEEEECC    ", "      GGGGG      ", "       ABA       ", "                 ")
                    .aisle("    AACCCCCAA    ", "      CCCCC      ", "      CCCCC      ", "      DDDDD      ", "                 ", "      DDDDD      ", "      CCCCC      ", "      CCCCC      ", "       A A       ", "       ABA       ", "                 ")
                    .aisle("      AABAA      ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "       ABA       ", "                 ")
                    .aisle("       AAA       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "       A A       ", "                 ", "                 ")
                    .where('A', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('B', frames(GTOMaterials.Inconel792))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTOBlocks.PI_HIGH_TEMPERATURE_INSULATION_MECHANICAL_HOUSING.get()))
                    .where('E', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('I', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('J', heatingCoils())
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTOCore.id("block/machines/molten_core"))
            .register();

    public static final MultiblockMachineDefinition ELECTRIC_IMPLOSION_COMPRESSOR = multiblock("electric_implosion_compressor", "电力聚爆压缩机", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.ELECTRIC_IMPLOSION_COMPRESSOR_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("XXXXX", "F###F", "F###F", "F###F", "F###F", "F###F", "F###F", "XXXXX")
                    .aisle("XXXXX", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "XXXXX")
                    .aisle("XXXXX", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "#GAG#", "XXMXX")
                    .aisle("XXXXX", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "#PGP#", "XXXXX")
                    .aisle("XXSXX", "F###F", "F###F", "F###F", "F###F", "F###F", "F###F", "XXXXX")
                    .where('S', controller(blocks(definition.get())))
                    .where('X',
                            blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()).setMinGlobalLimited(40)
                                    .or(GTOPredicates.autoAccelerateAbilities(definition.getRecipeTypes()))
                                    .or(autoAbilities(true, false, true)))
                    .where('P', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('G', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('F', frames(GTMaterials.TungstenSteel))
                    .where('A', air())
                    .where('#', any())
                    .where('M', abilities(MUFFLER))
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"),
                    GTCEu.id("block/multiblock/implosion_compressor"))
            .register();

    public static final MultiblockMachineDefinition STELLAR_FORGE = multiblock("stellar_forge", "恒星炎炀锻炉", StellarForgeMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.STELLAR_FORGE_RECIPES)
            .tooltips(NewDataAttributes.MAIN_FUNCTION.create(
                    v -> v.addLines("配方等级不受能源仓限制，连续运行优化", "The recipe tier is not limited by the energy hatch, Continuous Operation Optimization"),
                    p -> p.addCommentLines(
                            """
                                    在第一次运行后继续运行配方，后续配方时间将减少50%
                                    如果在配方运行时供电不足，将产生巨大爆炸""",
                            """
                                    Continue running the recipe after the first run, and the subsequent recipe duration will be reduced by 50%
                                    If there is a power shortage during the operation of the recipe, a huge explosion will occur""")))
            .alwaysTryModifyRecipe(true)
            .laserTooltips()
            .block(GCYMBlocks.CASING_ATOMIC)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("               ", "      bbb      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      bbb      ", "               ")
                    .aisle("      b b      ", "     ccccc     ", "               ", "               ", "               ", "               ", "               ", "     ccccc     ", "      b b      ")
                    .aisle("      b b      ", "   cc     cc   ", "               ", "               ", "               ", "               ", "               ", "   cc     cc   ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "     ccccc     ", "               ", "               ", "               ", "     ccccc     ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "    c ddd c    ", "      ddd      ", "      ddd      ", "      ddd      ", "    c ddd c    ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", " c    ddd    c ", "   c d   d c   ", "     d   d     ", "     d   d     ", "     d   d     ", "   c d   d c   ", " c    ddd    c ", "      b b      ")
                    .aisle(" bbbbbbbbbbbbb ", "bc   ddddd   cb", "b  cd     dc  b", "b   d     d   b", "b   d     d   b", "b   d     d   b", "b  cd     dc  b", "bc   ddddd   cb", " bbbbbbbbbbbbb ")
                    .aisle("      bbb      ", "bc   ddddd   cb", "   cd     dc   ", "    d     d    ", "    d     d    ", "    d     d    ", "   cd     dc   ", "bc   ddddd   cb", "      bbb      ")
                    .aisle(" bbbbbbbbbbbbb ", "bc   ddddd   cb", "b  cd     dc  b", "b   d     d   b", "b   d     d   b", "b   d     d   b", "b  cd     dc  b", "bc   ddddd   cb", " bbbbbbbbbbbbb ")
                    .aisle("      b b      ", " c    ddd    c ", "   c d   d c   ", "     d   d     ", "     d   d     ", "     d   d     ", "   c d   d c   ", " c    ddd    c ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "    c ddd c    ", "      ddd      ", "      ddd      ", "      ddd      ", "    c ddd c    ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", "  c         c  ", "     ccccc     ", "               ", "               ", "               ", "     ccccc     ", "  c         c  ", "      b b      ")
                    .aisle("      b b      ", "   cc     cc   ", "               ", "               ", "               ", "               ", "               ", "   cc     cc   ", "      b b      ")
                    .aisle("      b b      ", "     ccccc     ", "               ", "               ", "               ", "               ", "               ", "     ccccc     ", "      b b      ")
                    .aisle("               ", "      bab      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      b b      ", "      bbb      ", "               ")
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GCYMBlocks.CASING_ATOMIC.get())
                            .setMinGlobalLimited(150)
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTBlocks.FUSION_COIL.get()))
                    .where('d', GTOPredicates.tierBlock(SCMAP, STELLAR_CONTAINMENT_TIER))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/atomic_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition COMPONENT_ASSEMBLY_LINE = multiblock("component_assembly_line", "部件装配线", TierCasingMultiblockMachine.createMachine(COMPONENT_ASSEMBLY_CASING_TIER))
            .allRotation()
            .recipeTypes(GTORecipeTypes.COMPONENT_ASSEMBLY_RECIPES)
            .tooltips(ComponentBuilder.create().addStoryLine("""
                    GTO寰宇格雷科技有限公司的工程师们耗费数年时间，终于建成了
                    这座传说中的部件装配线。董事长亲自为首批获得授权的员工
                    举行了仪式，称这几乎是神的力量在人间的体现。装配线能够
                    极大提升部件产出效率，但其建造成本之高令人咋舌。正如
                    董事长所说：想要享受神迹，就不要嫌弃它的制作难度。
                    公司的未来，就掌握在这些闪闪发光的铱金外壳之中。
                    """,
                    """
                            GTO Universal GregTech engineers spent years building this legendary
                            Component Assembly Line. The CEO personally authorized the first batch
                            of employees to use it, calling it almost divine power on earth.
                            The assembly line greatly boosts component production efficiency, but
                            its construction cost is staggering. As the CEO said: if you want
                            to enjoy miracles, don't complain about the difficulty of making them.
                            """).build())
            .parallelizableTooltips()
            .laserTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle("AAAAAAAAA", "A  NNN  A", "A       A", "A       A", "A       A", "A       A", "AA     AA", " AAAAAAA ", "         ", "         ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GHAAAHG ", "         ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F  M M  F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "AL     LA", "AL AAA LA", "AL     LA", "AL     LA", "AL  J  LA", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "AL     LA", "AL AAA LA", "AL     LA", "AL     LA", "AL  J  LA", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "AL     LA", "AL AAA LA", "AL     LA", "AL     LA", "AL  J  LA", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "FL     LF", "FL AAA LF", "FL     LF", "FL     LF", "FL  J  LF", "ALL I LLA", "G LLILL G", " GA   AG ", "   KKK   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F I   I F", "FJ     JF", "FJ     JF", "AJ     JA", "G       G", " GA   AG ", "   AKA   ")
                    .aisle("AAAAAAAAA", "F       F", "F  AAA  F", "F       F", "F       F", "F       F", "A       A", "G       G", " GHAAAHG ", "         ")
                    .aisle("AAAAAAAAA", "A  B B  A", "A  CCC  A", "A  CCC  A", "A       A", "A       A", "AA DDD AA", " AAD~DAA ", "   DDD   ", "         ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', frames(GTMaterials.TungstenSteel)
                            .or(abilities(IMPORT_ITEMS))
                            .or(abilities(IMPORT_FLUIDS)))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(abilities(IMPORT_ITEMS))
                            .or(abilities(IMPORT_FLUIDS)))
                    .where('D', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(abilities(PARALLEL_HATCH).setExactLimit(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('F', blocks(GTOBlocks.HSSS_BOROSILICATE_GLASS.get()))
                    .where('G', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('H', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1)))
                    .where('I', frames(GTOMaterials.HastelloyN))
                    .where('J', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('K', GTOPredicates.tierBlock(CALMAP, COMPONENT_ASSEMBLY_CASING_TIER))
                    .where('L', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('M', frames(GTMaterials.TungstenSteel))
                    .where('N', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(abilities(EXPORT_ITEMS)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/assembly_line"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_INTEGRATED_ORE_PROCESSOR = multiblock("advanced_integrated_ore_processor", "进阶集成矿石处理厂", CrossRecipeMultiblockMachine.createParallel(false, false, m -> Long.MAX_VALUE))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.INTEGRATED_ORE_PROCESSOR)
            .tooltips(NewDataAttributes.MAIN_FUNCTION.create(s -> s.addLines("一步完成矿石处理", "Process ores in one step", StyleBuilder::setRainbow)))
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(Long.MAX_VALUE))
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.DIMENSION_INJECTION_CASING)
            .pattern(definition -> FactoryBlockPattern.start()
                    .aisle(" ABBBBBBBBBBBBBA ", " A   BCCCCCB   A ", " A   BCCCCCB   A ", " A   BCCCCCB   A ", " A   BBBBBBB   A ", "      BBBBB      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAEEEEEEEEEEEEEAA", "AAFFFFFFFFFFFFFAA", "AAFFFFFFFFFFFFFAA", "AAFFFFFFFFFFFFFAA", "AA   BBBBBBB   AA", "      BBBBB      ", "       BBB       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "      BBIBB      ", "       BBB       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "        I        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  FFFFFJIJFFFFF  ", "    FFFJJJFFF    ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   FFF     FFF   ", "                 ")
                    .aisle("AAGGGGGGGGGGGGGAA", "AAFFFFF   FFFFFAA", "AAFFIFF   FFIFFAA", "AAFFFFF   FFFFFAA", "AAGGGGGGGGGGGGGAA", "  LLLLL I LLLLL  ", "  RQQQR   SKKKS  ", "  R   R   S   S  ", "  O J O   O   O  ", "  O   O   O   O  ", "  O J O   O   O  ", "  O   O   O   O  ", "  O J O   O   O  ", "  R   R   S   S  ", "  RQQQR   SKKKS  ", "  FFFFF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  RQQQR   SKKKS  ", "  R   R   S Q S  ", "  RJJJR   O J O  ", "  R   R   O J O  ", "  RJJJR   O J O  ", "  R   R   O J O  ", "  RJJJR   O J O  ", "  R   R   S Q S  ", "  RQQQR   SKKKS  ", "  FFFFF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  RQQQR   SKKKS  ", "  R   R   S   S  ", "  O J O   O   O  ", "  O   O   O   O  ", "  O J O   O   O  ", "  O   O   O   O  ", "  O J O   O   O  ", "  R   R   S   S  ", "  RQQQR   SKKKS  ", "  FFFFF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   RRR     SSS   ", "   FFF     FFF   ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  FFFFFJIJFFFFF  ", "    FFFJJJFFF    ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAGGGGGGGGGGGGGAA", "AAFFFFF   FFFFFAA", "AAFFIFF   FFIFFAA", "AAFFFFF   FFFFFAA", "AAGGGGGGGGGGGGGAA", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   LLL     PPP   ", "   OHO     PPP   ", "   OHO    PPPPP  ", "   QHQ     PPP   ", "   OHO    PPPPP  ", "   OHO     PPP   ", "   QHQ    PPPPP  ", "   OHO     PPP   ", "   OHO     PPP   ", "   FFF     FFF   ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  LHHHL   PPPPP  ", "  O   O    OOO   ", "  O   O   POOOP  ", "  Q   Q    OOO   ", "  O   O   POOOP  ", "  O   O    OOO   ", "  Q   Q   POOOP  ", "  O   O    OOO   ", "  O   O   PPPPP  ", "  FHHHF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  LHHHL   PPIPP  ", "  H I H    OIO   ", "  H I H   POIOP  ", "  H I H    OIO   ", "  H I H   POIOP  ", "  H I H    OIO   ", "  H I H   POIOP  ", "  H I H    OIO   ", "  H I H   PPIPP  ", "  FHHHF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  LHHHL   PPPPP  ", "  O   O    OOO   ", "  O   O   POOOP  ", "  Q   Q    OOO   ", "  O   O   POOOP  ", "  O   O    OOO   ", "  Q   Q   POOOP  ", "  O   O    OOO   ", "  O   O   PPPPP  ", "  FHHHF   FFFFF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   LLL     PPP   ", "   OHO     PPP   ", "   OHO    PPPPP  ", "   QHQ     PPP   ", "   OHO    PPPPP  ", "   OHO     PPP   ", "   QHQ    PPPPP  ", "   OHO     PPP   ", "   OHO     PPP   ", "   FFF     FFF   ", "                 ")
                    .aisle("AAGGGGGGGGGGGGGAA", "AAFFFFF   FFFFFAA", "AAFFIFF   FFIFFAA", "AAFFFFF   FFFFFAA", "AAGGGGGGGGGGGGGAA", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  FFFFFJIJFFFFF  ", "    FFFJJJFFF    ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   MHM    HHHHH  ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   FFF     FFF   ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  MMMMM   HHJ H  ", "  MJNJM   OJ  O  ", "  OJ JO   O   O  ", "  OJ JO   O  JO  ", "  OJ JO   O J O  ", "  OJ JO   OJ  O  ", "  OJ JO   O   O  ", "  MJNJM   O  JO  ", "  MMMMM   O J O  ", "  FFFFF   FJ  F  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLL I LLLLL  ", "  MMMMM   H   H  ", "  MNNNM   O   O  ", "  O N O   OJ JO  ", "  O N O   O   O  ", "  O   O   O   O  ", "  O N O   O   O  ", "  O N O   OJ JO  ", "  MNNNM   O   O  ", "  MMMMM   O   O  ", "  FFFFF   F   F  ", "   FFF     FFF   ")
                    .aisle("AAGGGGGGGGGGGGGAA", "AAFFFFF   FFFFFAA", "AAFFIFF   FFIFFAA", "AAFFFFF   FFFFFAA", "AAGGGGGGGGGGGGGAA", "  LLLLL I LLLLL  ", "  MMMMM   H J H  ", "  MJNJM   O  JO  ", "  OJ JO   O   O  ", "  OJ JO   OJ  O  ", "  OJ JO   O J O  ", "  OJ JO   O  JO  ", "  OJ JO   O   O  ", "  MJNJM   OJ  O  ", "  MMMMM   O J O  ", "  FFFFF   F  JF  ", "   FFF     FFF   ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  LLLLLIIILLLLL  ", "   MHM    HHHHH  ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   MHM     HIH   ", "   FFF     FFF   ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "   LLLL I LLLL   ", "   FFFF   FFFF   ", "   FFF     FFF   ", "  FFFF     FFFF  ", "  FFF       FFF  ", "  FF         FF  ", "  FF         FF  ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "  FFFFFJIJFFFFF  ", "    FFFJJJFFF    ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF KH       HK FB", " F KI       IK F ", " F KH J   J HK F ", "  GGGGGGGGGGGGG  ", "        I        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("BFGGGGGGGGGGGGGFB", "BF  H       H  FB", " F  I       I  F ", " F  H J   J H  F ", "  GGGGGGGGGGGGG  ", "      BBIBB      ", "       BBB       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAEEEEEEEEEEEEEAA", "AAFFFFFFFFFFFFFAA", "AAFFFFFFFFFFFFFAA", "AAFFFFFFFFFFFFFAA", "AA   BBBBBBB   AA", "      BBBBB      ", "       BBB       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle(" ABBBBBBBBBBBBBA ", " A   BCCCCCB   A ", " A   BCCDCCB   A ", " A   BCCCCCB   A ", " A   BBBBBBB   A ", "      BBBBB      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .where('A', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('C', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()).or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes())))
                    .where('D', controller(blocks(definition.get())))
                    .where('E', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('F', blocks(GCYMBlocks.CASING_ATOMIC.get()))
                    .where('G', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('H', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('I', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('J', frames(GTOMaterials.Mithril))
                    .where('K', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('L', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('M', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('N', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('O', blocks(GTOBlocks.AMPROSIUM_BOROSILICATE_GLASS.get()))
                    .where('P', blocks(GTOBlocks.HASTELLOY_N_75_CASING.get()))
                    .where('Q', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('R', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('S', blocks(GTOBlocks.QUARK_EXCLUSION_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/dimension_injection_casing"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public static final MultiblockMachineDefinition INTEGRATED_ASSEMBLER = multiblock("integrated_assembler", "综合组装车间", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.INTEGRATED_ASSEMBLER)
            .combinedRecipeTooltips()
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> FactoryBlockPattern.start(RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "  AA   AA AA   AA  ", "   A   AA AA   A   ", "   A   AA AA   A   ", "       AA AA       ", "                   ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCCCCCCCCCCCCC", " CCCCCCCCCCCCCCCCC ", " CCCCCCCCCCCCCCCCC ", "  CCCCCCCCCCCCCCC  ", "  CCCCCCCCCCCCCCC  ", "  ACCCCCCCCCCCCCA  ", "   CCCCCCCCCCCCC   ", "   A CCCCCCCCC A   ", "       AA AA       ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "FCJ             JCF", "FCT             TCF", "FCJ             JCF", " FT             TF ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  GCCC       CCCG  ", "   GGGCCCJCCCGGG   ", "     GGGGJGGGG     ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "CCJ             JCC", "CCT             TCC", "CCJ             JCC", " CT             TC ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  LCCC       CCCL  ", "   LGGCCCJCCCGGL   ", "     GLGLJLGLG     ")
                    .aisle("AAAAAAAAAAAAAAAAAAA", "CCCCCCCCCCCCCCCCCCC", "FCJ             JCF", "FCT             TCF", "FCJ             JCF", " FT             TF ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  LCCC       CCCL  ", "   LGGCCCJCCCGGL   ", "     GLGLJLGLG     ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CCCCCCCCCCCCCCCCCCC", "CCJ             JCC", "CCT             TCC", "CCJ             JCC", " CT             TC ", " CJ             JC ", " GC             CG ", " GC             CG ", "  GK           KG  ", "  GCCC       CCCG  ", "   GGGCCCJCCCGGG   ", "     GGGGJGGGG     ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "CCCCCCCCCCCCCCCCCCC", "CCCCCCCT   TCCCCCCC", " JCCCCCT   TCCCCCJ ", "CCCCCCCT   TCCCCCCC", " CCCCCCT   TCCCCCC ", " CCCCCCCCCCCCCCCCC ", "  CCCCCCCCCCCCCCC  ", "  CCCCCCCCCCCCCCC  ", "   CCCCCCCCCCCCC   ", "   CCCCCCCCCCCCC   ", "     CCCCCCCCC     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC I   ICCCI   I CB", "CC I   I H I   I CC", " J I   I   I   I J ", "CC I   I   I   I CC", " CCI   I   I   ICC ", " EJJ   I   I   JJE ", " EEJ   I   I   JEE ", "  EJIIIIIIIIIIIJE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC    O CCC O    CB", "CC    O  H  O    CC", " J    O R R O    J ", "CC    OFFFFFO    CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC      CCC      CB", "CC       H       CC", " J               J ", "CC    E     E    CC", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC I    CCC    I CB", "CC I     H     I CC", " J I           I J ", "CC I  E     E  I CC", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC    O CCC O    CB", "CC    O  H  O    CC", " J    O R R O    J ", "CC    OFFFFFO    CC", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", "CC       H       CC", " J               J ", "CC               CC", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC   DS CCC SD   CB", "CC   DS  H  SD   CC", " J    S     S    J ", "CC    S     S    CC", " CC   SSSSSSS   CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC I DE CCC ED I CB", "CC I DE  H  ED I CC", " J I DE     ED I J ", "CC I DE     ED I CC", " CCI DEEEEEEED ICC ", " EJJ  DDDDDDD  JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC   DD CCC DD   CB", "CC   DD  H  DD   CC", "CC    J     J    CC", "CC    J     J    CC", " CC   DDJJJDD   CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "DC   DD CCC DD   CD", "DC   DD  H  DD   CD", "CC    J     J    CC", "EC    J     J    CE", " CC   DDJJJDD   CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "DC   DD CCC DD   CD", "DC   DD  H  DD   CD", "CC    J     J    CC", "EC    J     J    CE", " CC   DDJJJDD   CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "CC   DE CCC ED   CC", "CC   DE  H  ED   CC", "CC   DE     ED   CC", "CC   DE     ED   CC", " CC  DEEEEEEED  CC ", " DD   DDDDDDD   DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C I DS CCC SD I C ", "SG I DS  H  SD I GS", " G I  S     S  I G ", "SC I  S     S  I CS", " CCI  SSSSSSS  ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", " C      CCC      C ", "SG       H       GS", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", " C      CCC      C ", "SG       H       GS", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C      CCC      C ", "SG       H       GS", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "SC   L  CCC  L   CS", "SG   L   H   L   GS", " G   L  R R  L   G ", "SC   L  R R  L   CS", " CC  FLFR RFLF  CC ", " DD             DD ", " DD             DD ", "  D    I   I    D  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C I    CCC    I C ", " G I     H     I G ", " G I           I G ", "SC I           I CS", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", " C      CCC      C ", " G       H       G ", " G               G ", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "SC      CCC      CS", "SG       H       GS", "SG               GS", "SC               CS", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C   Q  CCC  Q   C ", " G   Q   H   Q   G ", " G   Q  R R  Q   G ", " C   FRRR RRRF   C ", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", " C      CCC      C ", " G       H       G ", " G               G ", " C               C ", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC I Q  CCC  Q I CB", "CC I Q   H   Q I CC", "CC I Q  R R  Q I CC", "CC I FRRR RRRF I CC", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", " D       H       D ", " D               D ", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", " D       H       D ", " D               D ", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC    O CCC O    CB", "ED    O  H  O    DE", "ED    FF   FF    DE", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC      CCC      CB", " D       H       DB", " D               DB", "JC               CJ", " CC             CC ", " PP             PP ", " PP             PP ", "  P    I   I    P  ", "  PPJ         JPP  ", "   EPPPPPJPPPPPE   ", "     PPPPEPPPP     ", "                   ")
                    .aisle("AAAGGCCGDDDGCCGGAAA", "BC I  O CCC O  I CB", " D I  O  H  O  I DB", " D I  FF   FF  I DB", "JC I           I CJ", " CCI           ICC ", " EJJ           JJE ", " EEJ           JEE ", "  EJ   I   I   JE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", " D       H       D~", " D               DB", "JC               CJ", " CC             CC ", " DD             DD ", " DD    F   F    DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", " D       H       DB", " D               DB", "JC     LM ML     CJ", " CC    L   L    CC ", " DD    L   L    DD ", " DD    CCCCC    DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", "ED       H       DE", "ED               DE", "JC               CJ", " CC             CC ", " DD             DD ", " DD    F   F    DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", " D       H       D ", " D               D ", "JC               CJ", " CC             CC ", " DD             DD ", " DD             DD ", "  DK   I   I   KD  ", "  DD           DD  ", "   DDDDDDDDDDDDD   ", "     DDDDDDDDD     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC I   ICCCI   I CB", " D I   I H I   I D ", " D I   I   I   I D ", "JC I   I   I   I CJ", " CCI   I   I   ICC ", " EJJ   I   I   JJE ", " EEJ   I   I   JEE ", "  EJIIIIIIIIIIIJE  ", "  EEJJJJJJJJJJJEE  ", "   EEEJJJJJJJEEE   ", "     EEEEEEEEE     ", "                   ")
                    .aisle("AAAGGGGGDDDGGGGGAAA", "BC      CCC      CB", "CC       H       CC", "CC               CC", "CC               CC", " CCD           DCC ", " FDD           DDF ", "  FD           DF  ", "   FD         DF   ", "    FDDDDDDDDDF    ", "     FCCCCCCCF     ", "       CCCCC       ", "                   ")
                    .aisle("AAAAAGGGDDDGGGAAAAA", " CC             CC ", " DD             DD ", " DD             DD ", " CC             CC ", " CCD           DCC ", " CDD           DDC ", "  CD           DC  ", "   CD         DC   ", "    CDDDDDDDDDC    ", "     CCCCCCCCC     ", "       CCCCC       ", "                   ")
                    .aisle(" AAAAAAAAAAAAAAAAA ", "  CCFDCC   CCDFCC  ", "  DDFDCC   CCDFDD  ", "  DDFDCC   CCDFDD  ", "  CCFDCC   CCDFCC  ", "  DDFDCCCCCCCDFDD  ", "  DDFDDDDDDDDDFDD  ", "  EDFDDDDDDDDDFDE  ", "   EDFFFFFFFFFDE   ", "    EDDDDDDDDDE    ", "     ECCCCCCCE     ", "        CCC        ", "                   ")
                    .aisle("  AAAAAAAAAAAAAAA  ", "   C  CC   CC  C   ", "   D  CC   CC  D   ", "   D  CC   CC  D   ", "   C  CC   CC  C   ", "   C  CCCCCCC  C   ", "   C           C   ", "   CC         CC   ", "    CCEEEEEEECC    ", "     CCCCCCCCC     ", "        CCC        ", "                   ", "                   ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('B', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('E', frames(GTMaterials.HSLASteel))
                    .where('F', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('G', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('H', blocks(GTOBlocks.SPACETIME_ASSEMBLY_LINE_UNIT.get()))
                    .where('I', frames(GTMaterials.StainlessSteel))
                    .where('J', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('K', blocks(GTBlocks.LAMPS.get(DyeColor.WHITE).get()))
                    .where('L', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('M', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('O', blocks(GTBlocks.CASING_ASSEMBLY_LINE.get()))
                    .where('P', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('Q', blocks(GTOBlocks.MACHINE_CASING_CIRCUIT_ASSEMBLY_LINE.get()))
                    .where('R', blocks(Blocks.IRON_BARS))
                    .where('S', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('T', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();
}
