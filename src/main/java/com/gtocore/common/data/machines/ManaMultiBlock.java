package com.gtocore.common.data.machines;

import com.gtocore.api.machine.part.GTOPartAbility;
import com.gtocore.api.pattern.GTOPredicates;
import com.gtocore.common.data.GTOBlocks;
import com.gtocore.common.data.GTOMaterials;
import com.gtocore.common.data.GTORecipeTypes;
import com.gtocore.common.machine.mana.multiblock.*;

import com.gtolib.GTOCore;
import com.gtolib.api.annotation.NewDataAttributes;
import com.gtolib.api.machine.ManaDistributorMachine;
import com.gtolib.api.recipe.modifier.RecipeModifierFunction;
import com.gtolib.utils.MachineUtils;
import com.gtolib.utils.RLUtils;
import com.gtolib.utils.RegistriesUtils;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.MultiblockShapeInfo;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.GCYMBlocks;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.gregtechceu.gtceu.common.data.GTMaterials;
import com.gregtechceu.gtceu.common.data.GTRecipeTypes;

import net.minecraft.world.level.block.Blocks;

import vazkii.botania.common.block.BotaniaBlocks;

import java.util.ArrayList;
import java.util.List;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gtocore.api.machine.part.GTOPartAbility.OUTPUT_MANA;
import static com.gtocore.common.data.GTOMaterials.Runerock;
import static com.gtolib.utils.register.MachineRegisterUtils.multiblock;

public final class ManaMultiBlock {

    public static void init() {}

    public static final MultiblockMachineDefinition MANA_ALLOY_BLAST_SMELTER = multiblock("mana_alloy_blast_smelter", "魔力合金炉", ManaAlloyBlastSmelterMachine::new)
            .nonYAxisRotation()
            .durationMultiplierTooltips(0.5)
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(8))
            .recipeModifier(RecipeModifierFunction.overclocking(0.5, 1, 0.5))
            .recipeTypes(GTORecipeTypes.ALLOY_BLAST_RECIPES)
            .block(GTOBlocks.MANASTEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("     AAA     ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "     CCC     ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("   AABBBAA   ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   CC   ", "    A        ", "   CC        ", "             ", "             ", "             ", "             ")
                    .aisle("  ABBBBBBBA  ", "  A       A  ", "  A       A  ", "  A       A  ", "  A       A  ", "  A       A  ", "  A       C  ", "  A          ", "  A          ", "  A          ", "  C          ", "             ", "             ", "             ")
                    .aisle(" ABBBBBBBBBA ", "             ", "             ", "             ", "             ", "           C ", "             ", "             ", "             ", "             ", "             ", " C           ", "             ", "             ")
                    .aisle(" ABBBCCCBBBA ", " A   EEE   A ", " A   EEE   A ", " A   EEE   A ", " A   EEE   A ", " A   EEE   C ", " A   EEE     ", " A   EEE     ", " A   CEE     ", " A   FCE     ", " A   F C     ", " C   F F     ", "     F F     ", "     CCC     ")
                    .aisle("ABBBCCCCCBBBA", "    EGHGE    ", "    EGHGE    ", "    EGHGE    ", "    EGHGE   C", "    EGHGE    ", "    EGHGE    ", "    CGHGE    ", "    FGHGE    ", "    FGHGE    ", "    FGHGE    ", "    FGHGC    ", "    FGHGF    ", "    CCCCC    ")
                    .aisle("ABBBCCCCCBBBA", "    EH HE   A", "    EH HE   A", "    EH HE   A", "    EH HE   C", "    EH HE    ", "    CH HE    ", "     H HE    ", "     H HE    ", "     H HE    ", "     H HE    ", "     H HE    ", "     H HC    ", "    CCICC    ")
                    .aisle("ABBBCCCCCBBBA", "    EGHGC    ", "    EGHGF    ", "    EGHGF    ", "    EGHGF   C", "    CGHGF    ", "    FGHGF    ", "    FGHGF    ", "    FGHGF    ", "    FGHGF    ", "    FGHGF    ", "    FGHGF    ", "    FGHGF    ", "    CCCCC    ")
                    .aisle(" ABBBCCCBBBA ", "     EEE   A ", "     EEC   A ", "     ECF   C ", "     C F     ", "     F F     ", "     F F     ", "     F F     ", "     F F     ", "     F F     ", "     F F     ", "     F F     ", "     F F     ", "     CCC     ")
                    .aisle(" ABBBBBBBBBA ", "             ", "             ", "           C ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("  ABBBCBBBA  ", "      D   A  ", "          C  ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("   AABBBAA   ", "         C   ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .aisle("     AAA     ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ", "             ")
                    .where('A', blocks(RegistriesUtils.getBlock("botania:livingrock")))
                    .where('B', blocks(GTOBlocks.MANASTEEL_CASING.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(GTOPartAbility.INPUT_MANA).setMaxGlobalLimited(8, 1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTOBlocks.MANASTEEL_CASING.get()))
                    .where('D', controller(blocks(definition.get())))
                    .where('E', blocks(RegistriesUtils.getBlock("botania:elf_glass")))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:livingrock_wall")))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Gaiasteel)))
                    .where('H', heatingCoils())
                    .where('I', abilities(MUFFLER))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/manasteel_casing"), GTCEu.id("block/multiblock/gcym/blast_alloy_smelter"))
            .register();

    public static final MultiblockMachineDefinition BASE_MANA_DISTRIBUTOR = multiblock("base_mana_distributor", "基础魔力分配器", ManaDistributorMachine.create(16, 32))
            .nonYAxisRotation()
            .tooltipsText("自动为附近的魔力机器提供魔力", "Automatically provides mana to nearby mana machines")
            .tooltipsKey("gtocore.machine.maximum_amount", 16)
            .tooltipsKey("gui.ae2.WirelessRange", 8)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .block(RegistriesUtils.getSupplierBlock("botania:livingrock_bricks"))
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" AbA ", "     ", "     ", "     ", "     ", " ACA ")
                    .aisle("ADDDA", " EBE ", " F F ", " A A ", " A A ", "ABEBA")
                    .aisle("bD Db", " BEB ", "  G  ", "  H  ", "  I  ", "CEIEC")
                    .aisle("ADDDA", " EBE ", " F F ", " A A ", " A A ", "ABEBA")
                    .aisle(" A~A ", "     ", "     ", "     ", "     ", " ACA ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks_wall")))
                    .where('B', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")))
                    .where('b', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")).or(abilities(GTOPartAbility.INPUT_MANA)).or(abilities(GTOPartAbility.EXTRACT_MANA)))
                    .where('C', blocks(Blocks.BIRCH_FENCE_GATE))
                    .where('D', blocks(RegistriesUtils.getBlock("botania:livingrock")))
                    .where('E', blocks(RegistriesUtils.getBlock("botania:chiseled_livingrock_bricks")))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:apothecary_livingrock")))
                    .where('G', blocks(RegistriesUtils.getBlock("botania:mana_pool")))
                    .where('H', blocks(RegistriesUtils.getBlock("botania:mana_pylon")))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:mana_glass")))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(RLUtils.bot("block/livingrock_bricks"), GTOCore.id("block/multiblock/mana"))
            .register();

    public static final MultiblockMachineDefinition ADVANCED_MANA_DISTRIBUTOR = multiblock("advanced_mana_distributor", "进阶魔力分配器", ManaDistributorMachine.create(64, 128))
            .nonYAxisRotation()
            .tooltipsKey("gtocore.machine.base_mana_distributor.tooltip.0")
            .tooltipsKey("gtocore.machine.maximum_amount", 64)
            .tooltipsKey("gui.ae2.WirelessRange", 32)
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .block(RegistriesUtils.getSupplierBlock("botania:livingrock_bricks"))
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("  BcccB  ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .aisle(" BAAAAAB ", " BAB BAB ", "         ", "         ", "         ", "         ", "  B   B  ", " BCCBCCB ", "         ", "         ")
                    .aisle("BAAAAAAAB", " AAAcAAA ", "  D   D  ", "  B   B  ", "  E   E  ", "  B   B  ", " BCCFCCB ", " CCB BCC ", "   GGG   ", "         ")
                    .aisle("cAAAAAAAc", " BAFCFAB ", "         ", "         ", "         ", "         ", "  C   C  ", " CB   BC ", "  GGGGG  ", "    G    ")
                    .aisle("cAAAAAAAc", "  cCFCc  ", "    H    ", "    I    ", "         ", "         ", "  F   F  ", " B     B ", "  GGGGG  ", "   GGG   ")
                    .aisle("cAAAAAAAc", " BAFCFAB ", "         ", "         ", "         ", "         ", "  C   C  ", " CB   BC ", "  GGGGG  ", "    G    ")
                    .aisle("BAAAAAAAB", " AAA~AAA ", "  D   D  ", "  B   B  ", "  E   E  ", "  B   B  ", " BCCFCCB ", " CCB BCC ", "   GGG   ", "         ")
                    .aisle(" BAAAAAB ", " BAB BAB ", "         ", "         ", "         ", "         ", "  B   B  ", " BCCBCCB ", "         ", "         ")
                    .aisle("  BcccB  ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ", "         ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(RegistriesUtils.getBlock("botania:livingrock")))
                    .where('B', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks_wall")))
                    .where('C', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")))
                    .where('c', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")).or(abilities(GTOPartAbility.INPUT_MANA)).or(abilities(GTOPartAbility.EXTRACT_MANA)))
                    .where('D', blocks(RegistriesUtils.getBlock("botania:apothecary_livingrock")))
                    .where('E', blocks(RegistriesUtils.getBlock("botania:mana_pylon")))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:chiseled_livingrock_bricks")))
                    .where('G', blocks(RegistriesUtils.getBlock("botania:mana_glass")))
                    .where('H', blocks(RegistriesUtils.getBlock("botania:mana_pool")))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:natura_pylon")))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(RLUtils.bot("block/livingrock_bricks"), GTOCore.id("block/multiblock/mana"))
            .register();

    public static final MultiblockMachineDefinition MANA_INFUSER = multiblock("mana_infuser", "魔力灌注机", ManaMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .perfectOCTooltips()
            .parallelizableManaOverclock()
            .recipeTypes(GTORecipeTypes.MANA_INFUSER_RECIPES)
            .block(GTOBlocks.MANASTEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("     ABA  ", "      A   ", "      A   ", "      A   ", "      C   ", "      C   ", "      C   ", "      C   ", "      C   ", "     CDC  ", "     CMC  ")
                    .aisle("    BBBBB ", "    A   A ", "    A   A ", "    C   A ", "    C   A ", "    C   C ", "    C   C ", "    C   C ", "    C   C ", "    DDDDD ", "    FFFFF ")
                    .aisle(" G ABHHHBA", " B    I   ", "      I   ", "      I   ", "      I   ", "      I   ", "      I   ", "      I   ", " D    I   ", " G CDHHHDC", " G CFFFFFC")
                    .aisle("GIBBBHHHBB", "BJB  IKI A", " J   ILI A", " J   ILI A", " J   ILI A", " J   ILI A", " J   ILI C", " J   ILI C", "DJD  IKI C", "GIDDDHHHDD", "GMMMFFFFFM")
                    .aisle(" G ABHHHBA", " B    I   ", "      I   ", "      I   ", "      I   ", "      I   ", "      I   ", "      I   ", " D    I   ", " G CDHHHDC", " G CFFFFFC")
                    .aisle("    BBBBB ", "    A   A ", "    A   A ", "    A   A ", "    A   A ", "    A   A ", "    A   A ", "    A   C ", "    A   C ", "    DDDDD ", "    FFFFF ")
                    .aisle("     ABA  ", "      A   ", "      A   ", "      A   ", "      A   ", "      A   ", "      A   ", "      A   ", "      C   ", "     CDC  ", "     CEC  ")
                    .where('A', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks_wall")))
                    .where('B', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")))
                    .where('C', blocks(RegistriesUtils.getBlock("botania:livingwood_fence")))
                    .where('D', blocks(RegistriesUtils.getBlock("botania:livingwood")))
                    .where('E', controller(blocks(definition.get())))
                    .where('F', blocks(GTOBlocks.MANASTEEL_CASING.get())
                            .or(abilities(GTOPartAbility.INPUT_MANA).setMaxGlobalLimited(16, 1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1, 1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1, 1)))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Manasteel)))
                    .where('H', blocks(RegistriesUtils.getBlock("botania:glimmering_livingwood")))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:mana_glass")))
                    .where('J', blocks(Blocks.AIR))
                    .where('K', blocks(RegistriesUtils.getBlock("botania:mana_distributor")))
                    .where('L', blocks(RegistriesUtils.getBlock("botania:mana_pylon")))
                    .where('M', blocks(GTOBlocks.MANASTEEL_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/manasteel_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition MANA_CONDENSER = multiblock("mana_condenser", "魔力凝聚器", ManaCondenserMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .perfectOCTooltips()
            .parallelizableManaOverclock()
            .recipeModifiers(RecipeModifierFunction.HATCH_PARALLEL)
            .recipeTypes(GTORecipeTypes.MANA_CONDENSER_RECIPES)
            .block(GTOBlocks.MANASTEEL_CASING)
            .pattern(MachineUtils.EMPTY_PATTERN)
            .shapeInfos(definition -> {
                List<MultiblockShapeInfo> shapeInfos = new ArrayList<>();
                for (int i = 0; i < 2; i++) {
                    shapeInfos.addAll(MachineUtils.getMatchingShapes(false, ManaCondenserMachine.getBlockPattern(i, definition)));
                }
                return shapeInfos;
            })
            .workableCasingRenderer(GTOCore.id("block/casings/manasteel_casing"), GTCEu.id("block/multiblock/gcym/large_mixer"))
            .register();

    public static final MultiblockMachineDefinition ELF_EXCHANGE = multiblock("elf_exchange", "精灵交易所", ManaMultiblockMachine::new)
            .langValue("ELF Exchange")
            .nonYAxisRotation()
            .parallelizableTooltips()
            .perfectOCTooltips()
            .parallelizableManaOverclock()
            .recipeTypes(GTORecipeTypes.ELF_EXCHANGE_RECIPES)
            .block(GTOBlocks.MANASTEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" BBB ", " BBB ", " BBB ", " BBB ", "     ", "     ")
                    .aisle("GEEEG", "DGGGD", "DGJGD", "DGGGD", " BBB ", "     ")
                    .aisle("GEEEG", "DIIID", "DIFID", "DIIID", "DDDDD", "DDDDD")
                    .aisle("GEEEG", "D   D", "H F H", "D   D", " DHD ", "     ")
                    .aisle("GEEEG", "D   D", "H F H", "D   D", " DHD ", "     ")
                    .aisle("GEEEG", "D   D", "H F H", "D   D", " DHD ", "     ")
                    .aisle("GEEEG", "D   D", "H F H", "D   D", " DHD ", "     ")
                    .aisle("DEEED", "D   D", "D F D", "D   D", "DDDDD", "     ")
                    .aisle("ABBBA", "ABBBA", "ABCBA", " BBB ", "     ", "     ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Manasteel)))
                    .where('B', blocks(GTOBlocks.MANASTEEL_CASING.get())
                            .or(abilities(GTOPartAbility.INPUT_MANA).setMaxGlobalLimited(2, 1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1, 1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2, 1)))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', blocks(RegistriesUtils.getBlock("botania:polished_livingrock")))
                    .where('E', blocks(GTOBlocks.MANASTEEL_CASING.get()))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:bifrost_perm")))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Elementium)))
                    .where('H', blocks(RegistriesUtils.getBlock("botania:elf_glass")))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:alfheim_portal")))
                    .where('J', blocks(RegistriesUtils.getBlock("botania:dragonstone_block")))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/manasteel_casing"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition INDUSTRIAL_ALTAR = multiblock("industrial_altar", "工业祭坛", ManaMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .perfectOCTooltips()
            .parallelizableManaOverclock()
            .recipeTypes(GTORecipeTypes.INDUSTRIAL_ALTAR_RECIPES)
            .block(GTOBlocks.MANASTEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("  AAA  ", "  AAA  ", "  BCB  ", "  B B  ", "  BDB  ", "  BEB  ", "  BEB  ", "  BEB  ", "  BEB  ", "  BEB  ", "  BEB  ", "  BEB  ", "  BEB  ")
                    .aisle(" AMMMA ", " AHHHA ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " BGGGB ")
                    .aisle("AMMMMMA", "AHHIHHA", "B      ", "B      ", "B      ", "B      ", "B      ", "B      ", "B      ", "B      ", "B      ", "B      ", "BGGGGG ")
                    .aisle("AMMMMMJ", "AHIHIIA", "C  K   ", "       ", "D  L  D", "E  I  E", "E  E  E", "E  E  E", "E  E  E", "E  E  E", "E  E  E", "E  E  E", "EGGGGGE")
                    .aisle("AMMMMMA", "AHHIHHA", "B      ", "B      ", "B      ", "B      ", "B      ", "B      ", "B      ", "B      ", "B      ", "B      ", "BGGGGG ")
                    .aisle(" AMMMA ", " AHHHA ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " B   B ", " BGGGB ")
                    .aisle("  AAA  ", "  AAA  ", "  BCB  ", "  B B  ", "  BDB  ", "  BEB  ", "  BEB  ", "  BEB  ", "  BEB  ", "  BEB  ", "  BEB  ", "  BEB  ", "  BEB  ")
                    .where('A', blocks(GTOBlocks.MANASTEEL_CASING.get())
                            .or(abilities(GTOPartAbility.INPUT_MANA).setMaxGlobalLimited(16, 1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(3, 1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1, 1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(12, 1)))
                    .where('B', blocks(RegistriesUtils.getBlock("botania:livingwood_wall")))
                    .where('C', blocks(RegistriesUtils.getBlock("botania:apothecary_livingrock")))
                    .where('D', blocks(Blocks.LANTERN))
                    .where('E', blocks(RegistriesUtils.getBlock("botania:livingwood_fence")))
                    .where('G', blocks(GTOBlocks.MANASTEEL_CASING.get()))
                    .where('H', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:glimmering_livingwood")))
                    .where('J', controller(blocks(definition.get())))
                    .where('K', blocks(RegistriesUtils.getBlock("botania:runic_altar")))
                    .where('L', blocks(RegistriesUtils.getBlock("botania:brewery")))
                    .where('M', blocks(ChemicalHelper.getBlock(TagPrefix.block, Runerock)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/manasteel_casing"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition MANA_GREENHOUSE = multiblock("mana_greenhouse", "魔力温室", ManaEnergyMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .perfectOCTooltips()
            .recipeModifier(RecipeModifierFunction.HATCH_PARALLEL)
            .recipeTypes(GTORecipeTypes.GREENHOUSE_RECIPES)
            .block(GTOBlocks.MANASTEEL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("      KKK      ", "      KLK      ", "      KKK      ", "       C       ", "       C       ", "       C       ", "       C       ", "       C       ", "       C       ", "       C       ", "       C       ", "       C       ", "       D       ", "               ", "               ", "               ")
                    .aisle("      KCK      ", "      KCK      ", "    AAEEEAA    ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      HHH      ", "       H       ", "               ", "               ")
                    .aisle("    EECCCEE    ", "     IDDDI     ", "   AEEGGGEEA   ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    HHFFFHH    ", "      FHF      ", "               ", "               ")
                    .aisle("   ECC   CCE   ", "   IDDCCCDDI   ", "  AEJJJJJJJEA  ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   HFF   FFH   ", "    FF   FF    ", "     FFHF      ", "               ")
                    .aisle("  EC       CE  ", "   DCCCCCCCD   ", "  EJJJJJJJJJEA ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  HF       FH  ", "   FFF   FFF   ", "     F H F     ", "      HHH      ")
                    .aisle("  EC       CE  ", "  IDCCCCCCCDI  ", " AEJJJJJJJJJEA ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  HF       FH  ", "   FF     FF   ", "    F     F    ", "     HFFFH     ")
                    .aisle(" EC         CE ", "  DCCCCCCCCCD  ", "AEGJJJJJJJJJGEA", " F           F ", " F           F ", " F           F ", " F           F ", " F           F ", " F           F ", " F           F ", " F           F ", " F           F ", " HF         FH ", "  FF       FF  ", "   F       F   ", "    HFFFFFH    ")
                    .aisle(" EC         CE ", " IDCCCCCCCCCDI ", "EEGJJJJJJJJJGEE", "CGG         GGC", "CGG         GGC", "CGG         GGC", "CGG         GGC", "CGG         GGC", "CGG         GGC", "CGG         GGC", "CGG         GGC", "CGG         GGC", "DGG         GGD", " HH         HH ", "   HH     HH   ", "    HFFFFFH    ")
                    .aisle(" EC         CE ", "  DCCCCCCCCCD  ", "AEGJJJJJJJJJGEA", " F           F ", " F           F ", " F           F ", " F           F ", " F           F ", " F           F ", " F           F ", " F           F ", " F           F ", " HF         FH ", "  FF       FF  ", "   F       F   ", "    HFFFFFH    ")
                    .aisle("  EC       CE  ", "  IDCCCCCCCDI  ", " AEJJJJJJJJJEA ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  HF       FH  ", "   FF     FF   ", "    F     F    ", "     HFFFH     ")
                    .aisle("  EC       CE  ", "   DCCCCCCCD   ", " AEJJJJJJJJJEA ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  HF       FH  ", "   FFF   FFF   ", "     F H F     ", "      HHH      ")
                    .aisle("   ECC   CCE   ", "   IDDCCCDDI   ", "  AEJJJJJJJEA  ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   F       F   ", "   HFF   FFH   ", "    FFF FFF    ", "      FHF      ", "               ")
                    .aisle("    EECCCEE    ", "     IDDDI     ", "   AEEGGGEEA   ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    FF G FF    ", "    HHFGFHH    ", "      FHF      ", "               ", "               ")
                    .aisle("      EEE      ", "       I       ", "    AAEEEAA    ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      FGF      ", "      HGH      ", "       H       ", "               ", "               ")
                    .aisle("               ", "               ", "      AEA      ", "       C       ", "       C       ", "       C       ", "       C       ", "       C       ", "       C       ", "       C       ", "       C       ", "       C       ", "       D       ", "               ", "               ", "               ")
                    .where('A', blocks(RegistriesUtils.getBlock("botania:livingrock_slab")))
                    .where('C', blocks(GTOBlocks.MANASTEEL_CASING.get()))
                    .where('D', blocks(RegistriesUtils.getBlock("botania:glimmering_livingwood")))
                    .where('E', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks")))
                    .where('F', blocks(RegistriesUtils.getBlock("botania:mana_glass")))
                    .where('G', blocks(Blocks.AIR))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Gaiasteel)))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:livingrock_bricks_wall")))
                    .where('J', blocks(BotaniaBlocks.enchantedSoil))
                    .where('K', blocks(GTOBlocks.MANASTEEL_CASING.get())
                            .or(abilities(GTOPartAbility.INPUT_MANA).setMaxGlobalLimited(16, 1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1, 1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(2, 1))
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(3, 1)))
                    .where('L', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/manasteel_casing"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition MANA_GARDEN = multiblock("mana_garden", "魔力花园", ElectricManaMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.MANA_GARDEN_RECIPES, GTORecipeTypes.MANA_GARDEN_FUEL)
            .recipeModifier(RecipeModifierFunction.HATCH_PARALLEL)
            .block(RegistriesUtils.getSupplierBlock("botania:livingrock"))
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("     AAA     ", "     AAA     ", "             ", "             ", "             ", "             ", "             ", "             ", "      X      ", "      Y      ", "      Y      ", "      Y      ", "      Y      ", "      Y      ", "      Y      ", "      Y      ", "      Y      ", "      Y      ", "     CCC     ", "     CCC     ")
                    .aisle("   AAADAAA   ", "   AAEEEAA   ", "             ", "             ", "             ", "             ", "    X        ", "    Y        ", "    Y        ", "    Y        ", "    Y   X    ", "    Y   Y    ", "    Y   Y    ", "    Y   Y    ", "    Y   Y    ", "    Y   Y    ", "    Y   Y    ", "    Y   Y    ", "   CC D CC   ", "   CCCCCCC   ")
                    .aisle("  AAAADAAAA  ", "  AEEEEEEEA  ", "             ", "             ", "  X          ", "  Y          ", "  Y          ", "  Y          ", "  Y          ", "  Y          ", "  Y          ", "  Y          ", "  Y       X  ", "  Y       Y  ", "  Y       Y  ", "  Y       Y  ", "  Y       Y  ", "  Y       Y  ", "  C   D   C  ", "  CCCCCCCCC  ")
                    .aisle(" AAAAADAAAAF ", " AEEEEEEEEEF ", "      G      ", "             ", "             ", "             ", "      G      ", "             ", "             ", "             ", "      G      ", "             ", "             ", "             ", "      G      ", "             ", "             ", "             ", " C    D    C ", " CCCCCCCCCCC ")
                    .aisle(" AAAAADAAAAF ", " AEEHEIEHEEF ", " X  HGJGH    ", " Y  H N H    ", " Y  H   H    ", " Y  H I H    ", " Y  HGJGH    ", " Y  H Z H    ", " Y  H   H    ", " Y  H I H    ", " Y  HGJGH    ", " Y  H [ H    ", " Y  H   H    ", " Y  H I H    ", " Y  HGJGH  X ", " Y  H a H  Y ", " Y  H   H  Y ", " Y  H   H  Y ", " C  C D C  C ", " CCCCCCCCCCC ")
                    .aisle("AAAAAADAAAAAF", "AEEEEEEOEEEEF", "     OO      ", "    G        ", "             ", "       OG    ", "     OO      ", "    G        ", "             ", "       OG    ", "     OO      ", "    G        ", "             ", "       OG    ", "     OO      ", "    G        ", "             ", "             ", "C     D     C", "CCCCCCCCCCCCC")
                    .aisle("ADDDDDDDDDDDF", "AEEEEEPOEEEEQ", "A   I P      ", "B  GJOP      ", "    R P I    ", "      POJG   ", "    I P S    ", "   GJOP      ", "    T P I    ", "      POJG   ", "    I P U    ", "   GJOP      ", "    V P I    ", "      POJG   ", "    I P W    ", "   GJOP      ", "    N P     X", "      PO    Y", "CDDDDDPDDDDDC", "CCCCCCCCCCCCC")
                    .aisle("AAAAAADAAAAAF", "AEEEEEEEEEEEF", "             ", "    GO       ", "      OO     ", "        G    ", "             ", "    GO       ", "      OO     ", "        G    ", "             ", "    GO       ", "      OO     ", "        G    ", "             ", "    GO       ", "      OO     ", "             ", "C     D     C", "CCCCCCCCCCCCC")
                    .aisle(" AAAAADAAAAF ", " AEEHEEEHEEF ", " A  H   H  A ", " A  H I H  A ", " A  HGJGH  A ", " B  H K H  A ", "    H   H  A ", "    H I H  A ", "    HGJGH  A ", "    H L H  A ", "    H   H  A ", "    H I H  A ", "    HGJGH  A ", "    H M H  A ", "    H   H  A ", "    H I H  A ", "    HGJGH  A ", "    H N H  B ", " C  C D C  C ", " CCCCCCCCCCC ")
                    .aisle(" AAAAADAAAAF ", " AEEEEEEEEEF ", "             ", "             ", "      G      ", "             ", "             ", "             ", "      G      ", "             ", "             ", "             ", "      G      ", "             ", "             ", "             ", "      G      ", "             ", " C    D    C ", " CCCCCCCCCCC ")
                    .aisle("  AAAADAAAA  ", "  AEEEEEEEA  ", "  A       A  ", "  A       A  ", "  A       A  ", "  A       A  ", "  A       A  ", "  B       A  ", "          A  ", "          A  ", "          A  ", "          A  ", "          A  ", "          A  ", "          A  ", "          B  ", "             ", "             ", "  C   D   C  ", "  CCCCCCCCC  ")
                    .aisle("   AAADAAA   ", "   AAEEEAA   ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   A    ", "    A   A    ", "    B   A    ", "        A    ", "        A    ", "        A    ", "        B    ", "             ", "             ", "             ", "             ", "   CC D CC   ", "   CCCCCCC   ")
                    .aisle("     AAA     ", "     AAA     ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "      A      ", "      B      ", "             ", "             ", "             ", "             ", "             ", "             ", "     CCC     ", "     CCC     ")
                    .where('A', blocks(RegistriesUtils.getBlock("botania:livingrock")))
                    .where('B', blocks(RegistriesUtils.getBlock("botania:mana_pylon")))
                    .where('C', blocks(RegistriesUtils.getBlock("botania:livingwood")))
                    .where('D', blocks(RegistriesUtils.getBlock("botania:glimmering_livingwood")))
                    .where('E', air())
                    .where('F', blocks(RegistriesUtils.getBlock("botania:livingrock"))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2, 1)
                                    .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(2, 1))
                                    .or(abilities(INPUT_ENERGY))
                                    .or(abilities(OUTPUT_MANA))
                                    .or(abilities(MAINTENANCE).setExactLimit(1))
                                    .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2, 1))))
                    .where('G', blocks(RegistriesUtils.getBlock("botania:livingrock_wall")))
                    .where('H', blocks(RegistriesUtils.getBlock("botania:elf_glass")))
                    .where('I', blocks(RegistriesUtils.getBlock("botania:mana_spreader")))
                    .where('J', blocks(RegistriesUtils.getBlock("botania:enchanted_soil")))
                    .where('K', blocks(RegistriesUtils.getBlock("botania:thermalily")))
                    .where('L', blocks(RegistriesUtils.getBlock("botania:kekimurus")))
                    .where('M', blocks(RegistriesUtils.getBlock("botania:dandelifeon")))
                    .where('N', blocks(RegistriesUtils.getBlock("botania:hydroangeas_motif")))
                    .where('O', blocks(RegistriesUtils.getBlock("botania:dreamwood")))
                    .where('P', blocks(GTOBlocks.MANASTEEL_CASING.get()))
                    .where('Q', controller(blocks(definition.get())))
                    .where('R', blocks(RegistriesUtils.getBlock("botania:endoflame")))
                    .where('S', blocks(RegistriesUtils.getBlock("botania:rosa_arcana")))
                    .where('T', blocks(RegistriesUtils.getBlock("botania:entropinnyum")))
                    .where('U', blocks(RegistriesUtils.getBlock("botania:gourmaryllis")))
                    .where('V', blocks(RegistriesUtils.getBlock("botania:spectrolus")))
                    .where('W', blocks(RegistriesUtils.getBlock("botania:shulk_me_not")))
                    .where('X', blocks(RegistriesUtils.getBlock("botania:natura_pylon")))
                    .where('Y', blocks(RegistriesUtils.getBlock("botania:livingwood_log")))
                    .where('Z', blocks(RegistriesUtils.getBlock("botania:munchdew")))
                    .where('[', blocks(RegistriesUtils.getBlock("botania:narslimmus")))
                    .where('a', blocks(RegistriesUtils.getBlock("botania:bellethorn")))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(RLUtils.bot("block/livingrock"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();

    public static final MultiblockMachineDefinition LARGE_ALCHEMICAL_DEVICE = multiblock("large_alchemical_device", "大型炼金装置", LargeAlchemicalDeviceMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .tooltipsText("§7炼金是一个神秘的过程", "§7Alchemy is a mysterious process")
            .tooltipsText("§7部分配方产出概率随运行次数增长", "§7The probability of partial recipe output increases with the number of runs")
            .tooltipsText("§7放入七个嬗变催化器激活完美嬗变模式", "§7Place seven Transmutation Catalysts to activate Perfect Transmutation Mode")
            .recipeModifiers(RecipeModifierFunction.HATCH_PARALLEL)
            .recipeTypes(GTORecipeTypes.ALCHEMY_CAULDRON_RECIPES)
            .block(GCYMBlocks.CASING_CORROSION_PROOF)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("     AAA     ", "     ABA     ", "     ABA     ", "     AAA     ", "             ")
                    .aisle("CCC ACCCA CCC", "CCC AD DA CCC", "CCC AD DA CCC", " C  AD DA  C ", "     EEE     ")
                    .aisle("CCC ACCCA CCC", "CGHHH G A CGC", "CGC A G HHHGC", "CCC A G A CCC", "     EEE     ")
                    .aisle("CCC ACCCA CCC", "CCC AD DA CCC", "CCC AD DA CCC", " C  AD DA  C ", "     EEE     ")
                    .aisle("    AAAAA    ", "    AIHIA    ", "    AIHIA    ", "     AAA     ", "             ")
                    .aisle("     AAA     ", "     AJA     ", "     AAA     ", "             ", "             ")
                    .where('A', blocks(GCYMBlocks.CASING_CORROSION_PROOF.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(GTOPartAbility.INPUT_MANA).setMaxGlobalLimited(16, 1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('C', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('D', air())
                    .where('E', blocks(GTOBlocks.STAINLESS_EVAPORATION_CASING.get()))
                    .where('G', blocks(GTBlocks.HERMETIC_CASING_IV.get())
                            .or(GTOPredicates.countBlock("transmutation_catalyst", GTOBlocks.TRANSMUTATION_CATALYST.get())))
                    .where('H', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Aluminium)))
                    .where('J', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/corrosion_proof_casing"), GTCEu.id("block/multiblock/gcym/large_centrifuge"))
            .register();
}
