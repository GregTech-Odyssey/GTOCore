package com.gtocore.common.data.machines;

import com.gtocore.api.machine.part.ILargeSpaceStationMachine;
import com.gtocore.api.pattern.GTOPredicates;
import com.gtocore.common.data.GTOBlocks;
import com.gtocore.common.data.GTOMaterials;
import com.gtocore.common.data.GTORecipeTypes;
import com.gtocore.common.data.translation.GTOMachineStories;
import com.gtocore.common.data.translation.GTOMachineTooltips;
import com.gtocore.common.machine.multiblock.electric.space.spacestaion.*;
import com.gtocore.common.machine.multiblock.electric.space.spacestaion.recipe.OrbitalSmeltingFacility;

import com.gtolib.GTOCore;
import com.gtolib.api.recipe.modifier.RecipeModifierFunction;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.block.IMachineBlock;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MachineDefinition;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.MultiblockShapeInfo;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.GCYMBlocks;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.gregtechceu.gtceu.common.data.GTMachines;
import com.gregtechceu.gtceu.common.data.GTMaterials;

import net.minecraft.core.BlockPos;

import com.google.common.collect.ImmutableSet;

import java.util.stream.Stream;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.abilities;
import static com.gregtechceu.gtceu.api.pattern.Predicates.blocks;
import static com.gtocore.api.machine.part.GTOPartAbility.DRONE_HATCH;
import static com.gtocore.api.machine.part.GTOPartAbility.OVERCLOCK_HATCH;
import static com.gtocore.api.machine.part.ILargeSpaceStationMachine.ConnectType.*;
import static com.gtocore.api.pattern.GTOPredicates.autoGCYMAbilities;
import static com.gtocore.api.pattern.GTOPredicates.light;
import static com.gtocore.utils.register.MachineRegisterUtils.multiblock;
import static com.gtolib.api.machine.MultiblockDefinition.getBlockInfos;

public class SpaceMultiblock {

    public static void init() {}

    public static final MultiblockMachineDefinition SPACE_STATION = multiblock("space_station", "空间站", SimpleSpaceStationMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getSpaceStationTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .workableInSpace()
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("       ", "  A A  ", " AGGGA ", "  GMG  ", " AGGGA ", "  A A  ", "       ")
                    .aisle("       ", " AAGAA ", " AGGGA ", " GGMGG ", " AGGGA ", " AAGAA ", "       ")
                    .aisle("  FFF  ", " AGGGA ", " G   G ", " G M G ", " G   G ", " AGGGA ", "       ")
                    .aisle("       ", "  GMG  ", "CG M GC", " e M e ", "CG   GC", " lGGGl ", "       ")
                    .aisle("  FFF  ", "  GFG  ", " GLLLG ", " FLMLF ", " GLLLG ", " lGMGl ", "       ")
                    .aisle("       ", "  GMG  ", "CGLLLGC", " eLLLe ", "CGLLLGC", " lGGGl ", "       ")
                    .aisle("  FFF  ", "  GGG  ", " GLLLG ", " GLLLG ", " GLLLG ", "  GGG  ", "       ")
                    .aisle("       ", "   J   ", "  HHH  ", " JH HJ ", "  HHH  ", "   J   ", "       ")
                    .aisle("       ", "   J   ", "  HHH  ", " JH HJ ", "  HHH  ", "   J   ", "       ")
                    .aisle("  AAA  ", " AAAAA ", "AIFFFIA", "AIFNFIA", "AIFFFIA", " AAAAA ", "  AAA  ")
                    .aisle(" AADAA ", "AfFpFfA", "ApppppA", "ApppppA", "ApppppA", "AfFpFfA", " AADAA ")
                    .aisle(" BBBBB ", "BFFpFFB", "BpppppB", "EpppppE", "BpppppB", "BFFpFFB", " BBBBB ")
                    .aisle(" AAAAA ", "ApppppA", "ApppppA", "ApppppA", "ApppppA", "ApppppA", " AAAAA ")
                    .aisle(" BBABB ", "BpppppB", "BpppppB", "ApppppA", "BpppppB", "BpppppB", " BBABB ")
                    .aisle(" BBABB ", "BpppppB", "BpppppB", "ApppppA", "BpppppB", "BpppppB", " BBABB ")
                    .aisle(" BBABB ", "BpppppB", "BpppppB", "ApppppA", "BpppppB", "BpppppB", " BBABB ")
                    .aisle(" AAAAA ", "ApppppA", "ApppppA", "ApppppA", "ApppppA", "ApppppA", " AAAAA ")
                    .aisle(" BBBBB ", "BFFpFFB", "BpppppB", "EpppppE", "BpppppB", "BFFpFFB", " BBBBB ")
                    .aisle(" AADAA ", "AfFpFfA", "ApppppA", "ApppppA", "ApppppA", "AfFpFfA", " AADAA ")
                    .aisle("  AAA  ", " AAAAA ", "AALpLAA", "AALpLAA", "AALpLAA", " AAAAA ", "  AAA  ")
                    .aisle("   C   ", "  AJA  ", " AFpFA ", "CJCpCJC", " AFpFA ", "  AJA  ", "   C   ")
                    .aisle("       ", "  HJH  ", " HFpFH ", " JCpCJ ", " HFpFH ", "  HJH  ", "       ")
                    .aisle("       ", "  HJH  ", " HFpFH ", " JCpCJ ", " HFpFH ", "  HJH  ", "       ")
                    .aisle("   C   ", "  AJA  ", " AFpFA ", "CJCpCJC", " AFpFA ", "  AJA  ", "   C   ")
                    .aisle("  AAA  ", " AAAAA ", "AALpLAA", "AALpLAA", "AALpLAA", " AAAAA ", "  AAA  ")
                    .aisle("  AAA  ", " AAAAA ", "ApppppA", "DpppppD", "AKpppKA", " AAAAA ", "  AAA  ")
                    .aisle("  BBB  ", " BpppB ", "BpppppB", "EpppppE", "BKpppKB", " BpppB ", "  BBB  ")
                    .aisle("  AAA  ", " ApppA ", "ApppppA", "ApppppA", "AKpppKA", " ipppi ", "  III  ")
                    .aisle("  BAB  ", " BpppB ", "BpppppB", "ApppppA", "BKpppKB", " BpppB ", "  BIB  ")
                    .aisle("  BAB  ", " BpppB ", "BpppppB", "ApppppA", "BKpppKB", " BpppB ", "  BIB  ")
                    .aisle("  AAA  ", " ApppA ", "ApppppA", "ApppppA", "AKpppKA", " ipppi ", "  III  ")
                    .aisle("  BBB  ", " BpppB ", "BpppppB", "EpppppE", "BKpppKB", " BpppB ", "  BBB  ")
                    .aisle("  AAA  ", " AAAAA ", "ApppppA", "DpppppD", "AKpppKA", " IpppI ", "  IDI  ")
                    .aisle("  AAA  ", " AAAAA ", "AAFpFAA", "AAFpFAA", "AAFFFAA", " AAAAA ", "  AAA  ")
                    .aisle("       ", "  AAA  ", " AFpFA ", " AJpJA ", " AFlFA ", "  AAA  ", "       ")
                    .aisle("       ", "  BBB  ", " BFpFB ", " BJpJB ", " BFlFB ", "  BBB  ", "       ")
                    .aisle("       ", "  GGG  ", " GFpFG ", " GFpFG ", " GFFFG ", "  GGG  ", "       ")
                    .aisle("  C C  ", "  GFG  ", "CG   GC", " e   e ", "CG   GC", " lGFGl ", "       ")
                    .aisle("  C C  ", "  GFG  ", " G   G ", " f   f ", " G   G ", " lGFGl ", "  FFF  ")
                    .aisle("  C C  ", "  GFG  ", "CG   GC", " e   e ", "CG   GC", " lF Fl ", "  F F  ")
                    .aisle("       ", "  GGG  ", " GFFFG ", " GFFFG ", " GFFFG ", "  GFG  ", "  FFF  ")
                    .aisle("       ", " AAGAA ", " AGGGA ", " GGGGG ", " AGGGA ", " AAGAA ", "       ")
                    .aisle("       ", "  A A  ", " ACCCA ", "  C C  ", " ACCCA ", "  A A  ", "       ")
                    .where('A', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('B', blocks(GTOBlocks.ALUMINUM_ALLOY_8090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteelGC4)))
                    .where('D', blocks(Stream.of(GTMachines.HULL).map(MachineDefinition::get).toArray(IMachineBlock[]::new)).or(abilities(IMPORT_FLUIDS, EXPORT_FLUIDS, INPUT_ENERGY)))
                    .where('e', ISpacePredicateMachine.photovoltaicPlantSupplyingPredicate.get())
                    .where('E', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('F', blocks(GTOBlocks.SPACECRAFT_SEALING_MECHANICAL_BLOCK.get()))
                    .where('f', blocks(GTOBlocks.SPACECRAFT_SEALING_MECHANICAL_BLOCK.get()).or(light()))
                    .where('G', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('H', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('I', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes())))
                    .where('i', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(light()))
                    .where('J', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('K', Predicates.cleanroomFilters())
                    .where('L', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('l', light())
                    .where('M', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('N', controller(blocks(definition.get())))
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
    // 大型可扩展空间站核心舱
    public static final MultiblockMachineDefinition LARGE_EXPANDABLE_SPACE_STATION_CORE_MODULE = multiblock("large_expandable_space_station_core_module", "工业空间站核心舱", Core::new)
            .langValue("Large Space Station Core Module")
            .allRotation()
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getLargeSpaceStationTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getLargeSpaceStationTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getCoreSpaceStationModuleTooltips().getSupplier())
            .tooltips()
            .block(GTOBlocks.SPACE_STATION_CONTROL_CASING)
            .workableInSpace()
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "        ]]]        ", "       ]]]]]       ", "       ]]]]]       ", "       ]]]]]       ", "        ]]]        ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "       ]]]]]       ", "      ]]aaa]]      ", "      ]aHHHa]      ", "      ]aHHHa]      ", "      ]aHHHa]      ", "      ]]aaa]]      ", "       ]]]]]       ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "       ]]]]]       ", "      ]  a  ]      ", "     ]       ]     ", "     ]       ]     ", "     ]a     a]     ", "     ]       ]     ", "     ]       ]     ", "      ]  a  ]      ", "       ]]]]]       ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "       YYYYY       ", "      Y  a  Y      ", "     Y       Y     ", "     Y       Y     ", "     Ya     aY     ", "     Y       Y     ", "     Y       Y     ", "      Y  a  Y      ", "       YYYYY       ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "       UUZUU       ", "       UVZVU       ", "       YYZYY       ", "      Y[[Z[[Y      ", "   UUY[  Z  [YUU   ", "   UVY[  Z  [YVU   ", "   ZZZZZZZZZZZZZ   ", "   UVY[  Z  [YVU   ", "   UUY[  Z  [YUU   ", "      Y[[Z[[Y      ", "       YYZYY       ", "       UVZVU       ", "       UUZUU       ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "        UVU        ", "       UUUUU       ", "    JJJU Z UJJJ    ", "    JKJYYYYYJKJ    ", "    JJY     YJJ    ", "   UUY       YUU   ", "  UU Y       Y UU  ", "  VUZY   Z   YZUV  ", "  UU Y       Y UU  ", "   UUY       YUU   ", "    JJY     YJJ    ", "    JKJYYYYYJKJ    ", "    JJJU Z UJJJ    ", "       UUUUU       ", "        UVU        ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "        UVU        ", "    JJJUUUUUJJJ    ", "   JWWJU Z UJWWJ   ", "   JWWJYYYYYJWWJ   ", "   JJJY     YJJJ   ", "   UUY       YUU   ", "  UU Y       Y UU  ", "  VUZY   Z   YZUV  ", "  UU Y       Y UU  ", "   UUY       YUU   ", "   JJJY     YJJJ   ", "   JWWJYYYYYJWWJ   ", "   JWWJU Z UJWWJ   ", "    JJJUUUUUJJJ    ", "        UVU        ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "    JKJUUZUUJKJ    ", "   JWWJU Z UJWWJ   ", "   KWWJYYZYYJWWK   ", "   JJJY[[Z[[YJJJ   ", "   UUY[  Z  [YUU   ", "   U Y[  Z  [Y U   ", "   ZZZZZZZZZZZZZ   ", "   U Y[  Z  [Y U   ", "   UUY[  Z  [YUU   ", "   JJJY[[Z[[YJJJ   ", "   KWWJYYZYYJWWK   ", "   JWWJU Z UJWWJ   ", "    JKJUUZUUJKJ    ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "        UVU        ", "    JJJUUUUUJJJ    ", "   JWWJXXXXXJWWJ   ", "   JWWJYYYYYJWWJ   ", "   JJJY     YJJJ   ", "   UXY       YXU   ", "  UUXY       YXUU  ", "  VUXY       YXUV  ", "  UUXY       YXUU  ", "   UXY       YXU   ", "   JJJY     YJJJ   ", "   JWWJYYYYYJWWJ   ", "   JWWJXXXXXJWWJ   ", "    JJJUUUUUJJJ    ", "        UVU        ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "        UVU        ", "    JKJUUUUUJKJ    ", "   JWWJX X XJWWJ   ", "   KWWJ Y Y JWWK   ", "   JJJ       JJJ   ", "   UX         XU   ", "  UU Y       Y UU  ", "  VUX         XUV  ", "  UU Y       Y UU  ", "   UX         XU   ", "   JJJ       JJJ   ", "   KWWJ Y Y JWWK   ", "   JWWJX X XJWWJ   ", "    JKJUUUUUJKJ    ", "        UVU        ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "    JJJUUUUUJJJ    ", "   JWWJX X XJWWJ   ", "   JWWJ Y Y JWWJ   ", "   JJJ       JJJ   ", "   UX         XU   ", "   U Y       Y U   ", "   UX         XU   ", "   U Y       Y U   ", "   UX         XU   ", "   JJJ       JJJ   ", "   JWWJ Y Y JWWJ   ", "   JWWJX X XJWWJ   ", "    JJJUUUUUJJJ    ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "        UVU        ", "    JKJUUUUUJKJ    ", "   JWWJX X XJWWJ   ", "   KWWJ Y Y JWWK   ", "   JJJ       JJJ   ", "   UX         XU   ", "  UU Y       Y UU  ", "  VUX         XUV  ", "  UU Y       Y UU  ", "   UX         XU   ", "   JJJ       JJJ   ", "   KWWJ Y Y JWWK   ", "   JWWJX X XJWWJ   ", "    JKJUUUUUJKJ    ", "        UVU        ", "                   ", "                   ")
                    .aisle("                   ", "       E   E       ", "    EEEEUVUEEEE    ", "   EJJJUUUUUJJJE   ", "  EJWWJXXXXXJWWJE  ", "  EJWWJ Y Y JWWJE  ", "  EJJJ       JJJE  ", " EEUX         XUEE ", "  UUXY       YXUU  ", "  VUX         XUV  ", "  UUXY       YXUU  ", " EEUX         XUEE ", "  EJJJ       JJJE  ", "  EJWWJ Y Y JWWJE  ", "  EJWWJXXXXXJWWJE  ", "   EJJJUUUUUJJJE   ", "    EEEEUVUEEEE    ", "       E   E       ", "                   ")
                    .aisle("       E   E       ", "     IIIIFIIII     ", "    IIIIIFIIIII    ", "   IIIICCFCCIIII   ", "  IIIICCCFCCCIIII  ", " IIIICCGGGGGCCIIII ", " IIICCGOOOOOGCCIII ", "EIICCGOOQQQOOGCCIIE", " IICCGOQQQQQOGCCII ", " FFFFGOQQQQQOGFFFF ", " IICCGOQQQQQOGCCII ", "EIICCGOOQQQOOGCCIIE", " IIICCGOOOOOGCCIII ", " IIIICCGGGGGCCIIII ", "  IIIICCCFCCCIIII  ", "   IIIICCFCCIIII   ", "    IIIIIFIIIII    ", "     IIIIFIIII     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FCCCCCCCCCF    ", "   FCpRRRSRRRpCF   ", "  FCppRRRRRRRppCF  ", " JCpppRRRRRRRpppCJ ", " JCpppppppppppppCJ ", "EJCpppHEpppEHpppCJE", " JCppHEpppppEHppCJ ", " FCEEEEpppppEEEECF ", " JC  HE     EH  CJ ", "EJC   HE   EH   CJE", " JC    HEEEH    CJ ", " JC   TTTETTT   CJ ", "  FCppTTTETTTppCF  ", "   FC TTTETTT CF   ", "    FCCCCCCCCCF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", "JJpppppppppppppppJJ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", "JJpppppppppppppppJJ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", " JpppppppppppppppJ ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " JpppppppppppppppJ ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", "JJpppppppppppppppJJ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", "JJpppppppppppppppJJ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FHpppppppppHF   ", "  FHpppppppppppHF  ", " JpppppppppppppppJ ", " NpppppppppppppppN ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " NpppppppppppppppN ", " JpppppppppppppppJ ", "  FHpppppppppppHF  ", "   FHpppppppppHF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "    AAAAAAAAAAA    ", "   AFpppppppppFA   ", "  AFHpppppppppHFA  ", " AFHpppppppppppHFA ", " ApppppppppppppppA ", " ApppppppppppppppA ", "EApppppppppppppppAE", " ApppppppppppppppA ", " ApppppppppppppppA ", " ApppppppppppppppA ", "EApppppppppppppppAE", " ApppppppppppppppA ", " ApppppppppppppppA ", " AFHpppppppppppHFA ", "  AFHpppppppppHFA  ", "   AFpppppppppFA   ", "    AAAAAAAAAAA    ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FHpppppppppHF   ", "  FHpppppppppppHF  ", " JpppppppppppppppJ ", " NpppppppppppppppN ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " NpppppppppppppppN ", " JpppppppppppppppJ ", "  FHpppppppppppHF  ", "   FHpppppppppHF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", "JJpppppppppppppppJJ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", "JJpppppppppppppppJJ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", " JpppppppppppppppJ ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " JpppppppppppppppJ ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", "JJpppppppppppppppJJ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", "JJpppppppppppppppJJ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FCCCCCCCCCF    ", "   FCCpppppppCCF   ", "  FCCpppppppppCCF  ", " JCCpppppppppppCCJ ", " JCpppppppppppppCJ ", "EJCpppppppppppppCJE", " JCpppppppppppppCJ ", " FCpppppppppppppCF ", " JCpppppppppppppCJ ", "EJCpppppppppppppCJE", " JCpppppppppppppCJ ", " JCCpppppppppppCCJ ", "  FCCpppppppppCCF  ", "   FCCpppppppCCF   ", "    FCCCCCCCCCF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "       BLLLB       ", "   MMBNOOAOONBMM   ", "  MBBGpppppppGBBM  ", "  MBGpppppppppGBM  ", "  BGpppppppppppGB  ", "  NpppppppppppppN  ", "EBOpppppppppppppOBE", " LOpppppppppppppOL ", " LOpppppppppppppOL ", " LOpppppppppppppOL ", "EBOpppppppppppppOBE", "  NpppppppppppppN  ", "  BGpppppppppppGB  ", "  MBGpppppppppGBM  ", "  MBBGpppppppGBBM  ", "   MMBNOOAOONBMM   ", "       BLLLB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBHOAOHBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBHOAOHBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "   MMBNHOAOHNBMM   ", "  MBBGpppppppGBBM  ", "  MBGpppppppppGBM  ", "  BGpppppppppppGB  ", "  NpppppppppppppN  ", "EBOpppppppppppppOBE", " JHpppppppppppppHJ ", " JHpppppppppppppHJ ", " JHpppppppppppppHJ ", "EBOpppppppppppppOBE", "  NpppppppppppppB  ", "  BGpppppppppppGB  ", "  MBGpppppppppGBP  ", "  MBBGpppppppGBB   ", "   MMBNHOAOHNBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBHOAOHBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", "EBOpppppppppppppOBE", "  BpppppppppppppN  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBM  ", "   BBGpppppppGBBM  ", "    PBBHOAOHBBMM   ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBHOAOHBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBHOAOHBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "   MMBNHOAOHNBMM   ", "  MBBGpppppppGBBM  ", "  MBGpppppppppGBM  ", "  BGpppppppppppGB  ", "  NpppppppppppppN  ", "EBOpppppppppppppOBE", " JHpppppppppppppHJ ", " JHpppppppppppppHJ ", " JHpppppppppppppHJ ", "EBOpppppppppppppOBE", "  NpppppppppppppN  ", "  BGpppppppppppGB  ", "  MBGpppppppppGBM  ", "  MBBGpppppppGBBM  ", "   MMBNHOAOHNBMM   ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBHOAOHBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBHOAOHBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "   MMBNOOAOONBMM   ", "  MBBGpppppppGBBM  ", "  MBGpppppppppGBM  ", "  BGpppppppppppGB  ", "  NpppppppppppppN  ", "EBOpppppppppppppOBE", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", "EBOpppppppppppppOBE", "  NpppppppppppppN  ", "  BGpppppppppppGB  ", "  MBGpppppppppGBM  ", "  MBBGpppppppGBBM  ", "   MMBNOOAOONBMM   ", "       BJJJB       ", "       E   E       ")
                    .aisle("                   ", "       ELLLE       ", "      ECCCCCE      ", "     ECpppppCE     ", "    ECpppppppCE    ", "   ECpppppppppCE   ", "  ECpppppppppppCE  ", " ECpppppppppppppCE ", " LCpppppppppppppCL ", " LCpppppppppppppCL ", " LCpppppppppppppCL ", " ECpppppppppppppCE ", "  ECpppppppppppCE  ", "   ECpppppppppCE   ", "    ECpppppppCE    ", "     ECpppppCE     ", "      ECCCCCE      ", "       ELLLE       ", "                   ")
                    .aisle("                   ", "                   ", "       E   E       ", "       JJJJJ       ", "     JJpppppJJ     ", "    JJpppppppJJ    ", "    JpppppppppJ    ", "  EJpppppppppppJE  ", "   JpppppppppppJ   ", "   JpppppppppppJ   ", "   JpppppppppppJ   ", "  EJpppppppppppJE  ", "    JpppppppppJ    ", "    JJpppppppJJ    ", "     JJpppppJJ     ", "       JJJJJ       ", "       E   E       ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "       E   E       ", "       JJKJJ       ", "     JJFFFFFJJ     ", "    JJFpppppFJJ    ", "    JFFpppppFFJ    ", "  EJFpppppppppFJE  ", "   JFpppppppppFJ   ", "   KFpppppppppFK   ", "   JFpppppppppFJ   ", "  EJFpppppppppFJE  ", "    JFFpppppFFJ    ", "    JJFpppppFJJ    ", "     JJFFFFFJJ     ", "       JJKJJ       ", "       E   E       ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "       EEEEE       ", "       BBBBB       ", "      BpppppB      ", "     BGpppppGB     ", "   EBpppppppppBE   ", "   EBpppppppppBE   ", "   EBpppppppppBE   ", "   EBpppppppppBE   ", "   EBpppppppppBE   ", "     BGpppppGB     ", "      BpppppB      ", "       BBBBB       ", "       EEEEE       ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "         E         ", "       BBBBB       ", "      BpppppB      ", "     BGpppppGB     ", "    BpppppppppB    ", "    BpppppppppB    ", "   EBpppppppppBE   ", "    BpppppppppB    ", "    BpppppppppB    ", "     BGpppppGB     ", "      BpppppB      ", "       BBBBB       ", "         E         ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "         E         ", "      IIIIIII      ", "     IIpppppII     ", "    IIGpppppGII    ", "    IpppppppppI    ", "    IpppppppppI    ", "   EIpppppppppIE   ", "    IpppppppppI    ", "    IpppppppppI    ", "    IIGpppppGII    ", "     IIpppppII     ", "      IIIIIII      ", "         E         ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "         E         ", "       BBBBB       ", "      BpppppB      ", "     BGpppppGB     ", "    BpppppppppB    ", "    BpppppppppB    ", "   EBpppppppppBE   ", "    BpppppppppB    ", "    BpppppppppB    ", "     BGpppppGB     ", "      BpppppB      ", "       BBBBB       ", "         E         ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "         E         ", "       BBBBB       ", "      BGGHGGB      ", "     BGpppppGB     ", "    BGpppppppGB    ", "    BGpppppppGB    ", "   EBHpppppppHBE   ", "    BGpppppppGB    ", "    BGpppppppGB    ", "     BGpppppGB     ", "      BGGHGGB      ", "       BBBBB       ", "         E         ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "         E         ", "         E         ", "       CCCCC       ", "      CCFFFCC      ", "     CCFpppFCC     ", "     CFpppppFC     ", "   EECFpppppFCEE   ", "     CFpppppFC     ", "     CCFpppFCC     ", "      CCFFFCC      ", "       CCCCC       ", "         E         ", "         E         ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "        EEE        ", "       ECCCE       ", "      ECCCCCE      ", "     ECCpppCCE     ", "     ECCpppCCE     ", "     ECCpppCCE     ", "      ECCCCCE      ", "       ECCCE       ", "        EEE        ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "         E         ", "        BAB        ", "       BCcCB       ", "      BCpppCB      ", "     EAcpppcAE     ", "      BCpppCB      ", "       BCcCB       ", "        BAB        ", "         E         ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        BAB        ", "       BCDCB       ", "      BCpppCB      ", "     AADpppDAA     ", "      BCpppCB      ", "       BCDCB       ", "        BAB        ", "         A         ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "         A         ", "                   ", "                   ", "                   ", "     A       A     ", "                   ", "                   ", "                   ", "         A         ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .where('A', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('B', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('c', CORE.traceabilityPredicate.get())
                    .where('D', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteel316)))
                    .where('F', blocks(GTOBlocks.PRESSURE_RESISTANT_HOUSING_MECHANICAL_BLOCK.get()))
                    .where('G', blocks(GTOBlocks.SPACECRAFT_SEALING_MECHANICAL_BLOCK.get()))
                    .where('H', GTOPredicates.light())
                    .where('I', blocks(GTOBlocks.ALUMINUM_ALLOY_8090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('J', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('K', blocks(GTOBlocks.SPACE_ENGINE_NOZZLE.get()))
                    .where('L', blocks(GTOBlocks.LOAD_BEARING_STRUCTURAL_STEEL_MECHANICAL_BLOCK.get()))
                    .where('M', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.AluminumAlloy7050)))
                    .where('N', blocks(Stream.of(GTMachines.HULL).map(MachineDefinition::get).toArray(IMachineBlock[]::new)))
                    .where('O', blocks(GTOBlocks.STAINLESS_STEEL_CORROSION_RESISTANT_CASING.get()))
                    .where('P', blocks(GTOBlocks.INSULATION_TILE_MECHANICAL_BLOCK.get()))
                    .where('Q', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('R', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get())
                            .or(abilities(INPUT_ENERGY, IMPORT_FLUIDS, EXPORT_FLUIDS))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('S', controller(blocks(definition.get())))
                    .where('T', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get()))
                    .where('U', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('V', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('W', blocks(GTOBlocks.HIGH_PRESSURE_GAS_STORAGE_TANKS_CASING.get()))
                    .where('X', blocks(GTOBlocks.COBALT_OXIDE_CERAMIC_STRONG_THERMALLY_CONDUCTIVE_MECHANICAL_BLOCK.get()))
                    .where('Y', blocks(GTOBlocks.TUNGSTEN_ALLOY_RADIATION_SHIELDING_MECHANICAL_BLOCK.get()))
                    .where('Z', blocks(GTOBlocks.ELECTRIC_POWER_TRANSMISSION_CASING.get()))
                    .where('[', GTOPredicates.integralFramework())
                    .where('a', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.PlatinumRhodiumAlloy)))
                    .where(']', blocks(GTOBlocks.SENSOR_PROTECTIVE_COVER_CASING.get()))
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/space_station_control_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
    // 工业空间站拓展舱
    public static final MachineDefinition SPACE_STATION_EXTENSION_MODULE = multiblock("space_station_extension_module",
            "工业空间站拓展舱", WorkspaceExtension::new)
            .allRotation()
            .workableInSpace()
            .tooltips(GTOMachineTooltips.INSTANCE.getFunctionSpaceStationModuleTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getSpaceStationWorkspaceExtensionTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTOBlocks.SPACE_STATION_CONTROL_CASING)
            .pattern(WorkspaceExtension.patternAtLength(2))
            .shapeInfos(d -> Stream.of(2, 9).map(i -> new MultiblockShapeInfo(getBlockInfos(WorkspaceExtension.patternAtLength(i).apply(d)))).toList())
            .workableCasingRenderer(GTOCore.id("block/casings/space_station_control_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
    // 工业空间站六向衔接舱
    public static final MachineDefinition SPACE_STATION_DOCKING_MODULE = multiblock("space_station_docking_module", "工业空间站六向衔接舱", (c) -> new Conjunction(c, machine -> {

        var pos = machine.getPos();
        var fFacing = machine.getFrontFacing();
        var uFacing = machine.getUpwardsFacing();
        boolean isFlipped = machine.isFlipped();
        var hallwayCenter = pos.relative(fFacing, 2).relative(RelativeDirection.LEFT.getRelative(fFacing, uFacing, isFlipped), 11);
        ImmutableSet.Builder<BlockPos> builder = ImmutableSet.builder();
        for (RelativeDirection dir : RelativeDirection.values()) {
            if (dir == RelativeDirection.RIGHT) continue;
            var newFFacing = dir.getRelative(fFacing, uFacing, isFlipped);
            var newUFacing = RelativeDirection.UP.getRelative(newFFacing, uFacing, isFlipped);
            var shiftedPos = hallwayCenter.relative(newFFacing, dir == RelativeDirection.LEFT ? 8 : 5);
            builder.add(shiftedPos.relative(RelativeDirection.UP.getRelative(newFFacing, newUFacing, isFlipped), 2));
            builder.add(shiftedPos.relative(RelativeDirection.DOWN.getRelative(newFFacing, newUFacing, isFlipped), 2));
            builder.add(shiftedPos.relative(RelativeDirection.LEFT.getRelative(newFFacing, newUFacing, isFlipped), 2));
            builder.add(shiftedPos.relative(RelativeDirection.RIGHT.getRelative(newFFacing, newUFacing, isFlipped), 2));
        }
        return builder.build();
    }))
            .allRotation()
            .workableInSpace()
            .tooltips(GTOMachineTooltips.INSTANCE.getConjunctionSpaceStationModuleTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                      ", "                      ", "                      ", "           ABA        ", "          ACDCA       ", "         ACpppCA      ", "         BDpppDB      ", "         ACpppCA      ", "          ACDCA       ", "           ABA        ", "                      ", "                      ", "                      ")
                    .aisle("                      ", "                      ", "                      ", "           ABA        ", "          ACcCA       ", "         ACpppCA      ", "         BcpppcB      ", "         ACpppCA      ", "          ACcCA       ", "           ABA        ", "                      ", "                      ", "                      ")
                    .aisle("                      ", "                      ", "                      ", "           EEE        ", "       EEEECCCEEEE    ", "      EEEECpppCEEEE   ", "      EEEECpppCEEEE   ", "      EEEECpppCEEEE   ", "       EEEECCCEEEE    ", "           EEE        ", "                      ", "                      ", "                      ")
                    .aisle("           ABA        ", "           ABA        ", "           EEE        ", "       EEEECCCEEEE    ", "      EEEEEGGGEEEEE   ", "   AAECGGGGpppGGGGCEAA", "   BBECGHHGpppGHHGCEBB", "   AAECGGGGpppGGGGCEAA", "      EEEEEGGGEEEEE   ", "       EEEECCCEEEE    ", "           EEE        ", "           ABA        ", "           ABA        ")
                    .aisle("          ACDCA       ", "          ACcCA       ", "       EEEECCCEEEE    ", "      EEEEEGGGEEEEE   ", "   AAEFFFFFFFFFFFFFEAA", "CCCCCCpppppppppppppCCC", "CIDDcCpppppppppppppCcD", "CCCCCCpppppppppppppCCC", "   AAEFFFFFFFFFFFFFEAA", "      EEEEEGGGEEEEE   ", "       EEEECCCEEEE    ", "          ACcCA       ", "          ACDCA       ")
                    .aisle("         ACpppCA      ", "         ACpppCA      ", "      EEEECpppCEEEE   ", "   AAECGGGGpppGGGGCEAA", "   CCCpppppppppppppCCC", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "   CCCpppppppppppppCCC", "   AAECGGGGpppGGGGCEAA", "      EEEECpppCEEEE   ", "         ACpppCA      ", "         ACpppCA      ")
                    .aisle("         BDpppDB      ", "         BcpppcB      ", "      EEEECpppCEEEE   ", "   BBECGHHGpppGHHGCEBB", "   DcCpppppppppppppCcD", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "   DcCpppppppppppppCcD", "   BBECGHHGpppGHHGCEBB", "      EEEECpppCEEEE   ", "         BcpppcB      ", "         BDpppDB      ")
                    .aisle("         ACpppCA      ", "         ACpppCA      ", "      EEEECpppCEEEE   ", "   AAECGGGGpppGGGGCEAA", "   CCCpppppppppppppCCC", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "   CCCpppppppppppppCCC", "   AAECGGGGpppGGGGCEAA", "      EEEECpppCEEEE   ", "         ACpppCA      ", "         ACpppCA      ")
                    .aisle("          ACDCA       ", "          ACcCA       ", "       EEEECCCEEEE    ", "      EEEEEGGGEEEEE   ", "   AAEFFFFFFFFFFFFFEAA", "   CCCpppppppppppppCCC", "   DcCpppppppppppppCcD", "   CCCpppppppppppppCCC", "   AAEFFFFFFFFFFFFFEAA", "      EEEEEGGGEEEEE   ", "       EEEECCCEEEE    ", "          ACcCA       ", "          ACDCA       ")
                    .aisle("           ABA        ", "           ABA        ", "           EEE        ", "       EEEECCCEEEE    ", "      EEEEEGGGEEEEE   ", "   AAECGGGGpppGGGGCEAA", "   BBECGHHGpppGHHGCEBB", "   AAECGGGGpppGGGGCEAA", "      EEEEEGGGEEEEE   ", "       EEEECCCEEEE    ", "           EEE        ", "           ABA        ", "           ABA        ")
                    .aisle("                      ", "                      ", "                      ", "           EEE        ", "       EEEECCCEEEE    ", "      EEEECpppCEEEE   ", "      EEEECpppCEEEE   ", "      EEEECpppCEEEE   ", "       EEEECCCEEEE    ", "           EEE        ", "                      ", "                      ", "                      ")
                    .aisle("                      ", "                      ", "                      ", "           ABA        ", "          ACcCA       ", "         ACpppCA      ", "         BcpppcB      ", "         ACpppCA      ", "          ACcCA       ", "           ABA        ", "                      ", "                      ", "                      ")
                    .aisle("                      ", "                      ", "                      ", "           ABA        ", "          ACDCA       ", "         ACpppCA      ", "         BDpppDB      ", "         ACpppCA      ", "          ACDCA       ", "           ABA        ", "                      ", "                      ", "                      ")
                    .where('A', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('B', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('c', CONJUNCTION.traceabilityPredicate.get())
                    .where('D', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('E', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('F', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get()))
                    .where('G', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('H', GTOPredicates.light())
                    .where('I', controller(blocks(definition.get())))
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
    // 工业空间站玻璃衔接舱
    public static final MachineDefinition SPACE_STATION_TRANSPARENT_DOCKING_MODULE = multiblock("space_station_transparent_docking_module", "工业空间站玻璃衔接舱", (h) -> new Conjunction(h, ILargeSpaceStationMachine.twoWayPositionFunction(19)))
            .allRotation()
            .workableInSpace()
            .tooltips(GTOMachineTooltips.INSTANCE.getConjunctionSpaceStationModuleTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                     ", "                     ", "           A         ", "         BAAAB       ", "         BCCCB       ", "         BCCCB       ", "         BCCCB       ", "         BAAAB       ", "           A         ", "                     ", "                     ")
                    .aisle("                     ", "           A         ", "         BDDDB       ", "      DDDDEEEDDDD    ", "     DCCCCCCCCCCCD   ", "     DCCCCCCCCCCCD   ", "     DCCCCCCCCCCCD   ", "      DDDDEEEDDDD    ", "         BDDDB       ", "           A         ", "                     ")
                    .aisle("           A         ", "         BDDDB       ", "      DDDDEEEDDDD    ", "     DFFFDFFFDFFFD   ", "  GGDEHHHHHHHHHHHEDGG", "  BBDEHHHHHHHHHHHEDBB", "  GGDEHHHHHHHHHHHEDGG", "     DFFFDFFFDFFFD   ", "      DDDDEEEDDDD    ", "         BDDDB       ", "           A         ")
                    .aisle("         BAAAB       ", "      DDDDEEEDDDD    ", "     DFFFDFFFDFFFD   ", "  GGDIIIIIIIIIIIIIDGG", "  EEEHHHHHHHHHHHHHEEE", "KJJEEHHHHHHHHHHHHHEcJ", "  EEEHHHHHHHHHHHHHEEE", "  GGDIIIIIIIIIIIIIDGG", "     DFFFDFFFDFFFD   ", "      DDDDEEEDDDD    ", "         BAAAB       ")
                    .aisle("         BCCCB       ", "     DCCCCCCCCCCCD   ", "  GGDEHHHHHHHHHHHEDGG", "  EEEHHHHHHHHHHHHHEEE", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  EEEHHHHHHHHHHHHHEEE", "  GGDEHHHHHHHHHHHEDGG", "     DCCCCCCCCCCCD   ", "         BCCCB       ")
                    .aisle("         BCCCB       ", "     DCCCCCCCCCCCD   ", "  BBDEHHHHHHHHHHHEDBB", "  JEEHHHHHHHHHHHHHEcJ", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  JEEHHHHHHHHHHHHHEcJ", "  BBDEHHHHHHHHHHHEDBB", "     DCCCCCCCCCCCD   ", "         BCCCB       ")
                    .aisle("         BCCCB       ", "     DCCCCCCCCCCCD   ", "  GGDEHHHHHHHHHHHEDGG", "  EEEHHHHHHHHHHHHHEEE", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  EEEHHHHHHHHHHHHHEEE", "  GGDEHHHHHHHHHHHEDGG", "     DCCCCCCCCCCCD   ", "         BCCCB       ")
                    .aisle("         BAAAB       ", "      DDDDEEEDDDD    ", "     DFFFDFFFDFFFD   ", "  GGDIIIIIIIIIIIIIDGG", "  EEEHHHHHHHHHHHHHEEE", "  JEEHHHHHHHHHHHHHEcJ", "  EEEHHHHHHHHHHHHHEEE", "  GGDIIIIIIIIIIIIIDGG", "     DFFFDFFFDFFFD   ", "      DDDDEEEDDDD    ", "         BAAAB       ")
                    .aisle("           A         ", "         BDDDB       ", "      DDDDEEEDDDD    ", "     DFFFDFFFDFFFD   ", "  GGDEHHHHHHHHHHHEDGG", "  BBDEHHHHHHHHHHHEDBB", "  GGDEHHHHHHHHHHHEDGG", "     DFFFDFFFDFFFD   ", "      DDDDEEEDDDD    ", "         BDDDB       ", "           A         ")
                    .aisle("                     ", "           A         ", "         BDDDB       ", "      DDDDEEEDDDD    ", "     DCCCCCCCCCCCD   ", "     DCCCCCCCCCCCD   ", "     DCCCCCCCCCCCD   ", "      DDDDEEEDDDD    ", "         BDDDB       ", "           A         ", "                     ")
                    .aisle("                     ", "                     ", "           A         ", "         BAAAB       ", "         BCCCB       ", "         BCCCB       ", "         BCCCB       ", "         BAAAB       ", "           A         ", "                     ", "                     ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteel316)))
                    .where('B', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('c', CONJUNCTION.traceabilityPredicate.get())
                    .where('D', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('E', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('F', GTOPredicates.light())
                    .where('G', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('H', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where('I', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get()))
                    .where('J', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
    // 工业空间站环境维护舱
    public static final MachineDefinition SPACE_STATION_ENVIRONMENTAL_MAINTENANCE_MODULE = multiblock("space_station_environmental_maintenance_module", "工业空间站环境维护舱", CleanroomProvider::new)
            .allRotation()
            .workableInSpace()
            .tooltips(GTOMachineTooltips.INSTANCE.getSpaceStationEnvironmentalMaintenanceModuleTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getFunctionSpaceStationModuleTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTOBlocks.SPACECRAFT_SEALING_MECHANICAL_BLOCK)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                                             ", "                                             ", "                                             ", "                                             ", "                                             ", "         IIIIPPIIII         IIIIPPIIII       ", "        IIIIIPPIIIII       IIIIIPPIIIII      ", "        IIIIIPPIIIII       IIIIIPPIIIII      ", "        IIIIIPPIIIII       IIIIIPPIIIII      ", "         IIIIPPIIII         IIIIPPIIII       ", "                                             ", "                                             ", "                                             ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                                             ", "             QQ                 QQ           ", "        IIIIIIIIIIII       IIIIIIIIIIII      ", "       IIJJIIPPIIJJII     IIJJIIPPIIJJII     ", "       IIIIIIIIIIIIII     IIIIIIIIIIIIII     ", "       IIIIIIIIIIIIIIFFFFFIIIIIIIIIIIIII     ", "       IIIIIIIIIIIIII     IIIIIIIIIIIIII     ", "       IIJJIIPPIIJJII     IIJJIIPPIIJJII     ", "        IIIIIIIIIIII       IIIIIIIIIIII      ", "             QQ                 QQ           ", "                                             ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "             QQ                 QQ           ", "             QQ                 QQ           ", "             QQ      QQQQQ      QQ           ", "     FG  JJ  PP  JJ  QRQRQ  JJ  PP  JJ  GF   ", "     FG              QRQRQ              GF   ", "     FGJJJJJJ  JJJJJJQQQQQJJJJJJ  JJJJJJGF   ", "     FG              QRQRQ              GF   ", "     FG  JJ  PP  JJ  QRQRQ  JJ  PP  JJ  GF   ", "             QQ      QQQQQ      QQ           ", "             QQ                 QQ           ", "             QQ                 QQ           ", "                                             ", "                                             ")
                    .aisle("                                             ", "             QQ                 QQ           ", "             QQ                 QQ           ", "        NNNN    NNNN QQQQQ NNNN    NNNN      ", "     FG NNNN    NNNN Q   Q NNNN    NNNN GF   ", "     FG NJJN PP NJJN Q   Q NJJN PP NJJN GF   ", "     G KKKKKK  KKKKKKQ   QKKKKKK  KKKKKK G   ", "  CCFGGJKKKKJ  JKKKKJQ   QJKKKKJ  JKKKKJGGFCC", "     G KKKKKK  KKKKKKQ   QKKKKKK  KKKKKK G   ", "     FG NJJN PP NJJN Q   Q NJJN PP NJJN GF   ", "     FG NNNN    NNNN Q   Q NNNN    NNNN GF   ", "        NNNN    NNNN QQQQQ NNNN    NNNN      ", "             QQ                 QQ           ", "             QQ                 QQ           ", "                                             ")
                    .aisle("                                             ", "        IIIIIIIIIIII       IIIIIIIIIIII      ", "             QQ      QQQQQ      QQ           ", "     FG NNNN    NNNN Q   Q NNNN    NNNN GF   ", "     FG N  N PP N  N Q   Q N  N PP N  N GF   ", "     G  NNNN PP NNNN Q   Q NNNN PP NNNN  G   ", "   EEAAKKKKKK  KKKKKKQ   QKKKKKK  KKKKKKAAEE ", "   CCAAKKKKKK  KKKKKKQSSSQKKKKKK  KKKKKKAACC ", "   EEAAKKKKKK  KKKKKKQ   QKKKKKK  KKKKKKAAEE ", "     G  NNNN PP NNNN Q   Q NNNN PP NNNN  G   ", "     FG N  N PP N  N Q   Q N  N PP N  N GF   ", "     FG NNNN    NNNN Q   Q NNNN    NNNN GF   ", "             QQ      QQQQQ      QQ           ", "        IIIIIIIIIIII       IIIIIIIIIIII      ", "                                             ")
                    .aisle("         IIIIPPIIII         IIIIPPIIII       ", "       IIJJIIPPIIJJII     IIJJIIPPIIJJII     ", "     FG  JJ  PP  JJ  QRQRQ  JJ  PP  JJ  GF   ", "     FG NJJN PP NJJN Q   Q NJJN PP NJJN GF   ", "     G  NNNN PP NNNN Q   Q NNNN PP NNNN  G   ", "   EEAALOOOOLOOLOOOOLOOOOOLOOOOLOOLOOOOLAAEE ", "AAAAAHHLOOOOLOOLOOOOLOOTOOLOOOOLOOLOOOOLHHAA ", "ABDDAHHMMMMMMMMMMMMMMOpppOMMMMMMMMMMMMMMHHaD ", "AAAAAHHLOOOOLOOLOOOOLOOTOOLOOOOLOOLOOOOLHHAA ", "   EEAALOOOOLOOLOOOOLOOOOOLOOOOLOOLOOOOLAAEE ", "     G  NNNN PP NNNN Q   Q NNNN PP NNNN  G   ", "     FG NJJN PP NJJN Q   Q NJJN PP NJJN GF   ", "     FG  JJ  PP  JJ  QRQRQ  JJ  PP  JJ  GF   ", "       IIJJIIPPIIJJII     IIJJIIPPIIJJII     ", "         IIIIPPIIII         IIIIPPIIII       ")
                    .aisle("        IIIIIPPIIIII       IIIIIPPIIIII      ", "       IIIIIIIIIIIIII     IIIIIIIIIIIIII     ", "     FG              QRQRQ              GF   ", "     G KKKKKK  KKKKKKQ   QKKKKKK  KKKKKK G   ", "   EEAAKKKKKK  KKKKKKQ   QKKKKKK  KKKKKKAAEE ", "   AAHHLOOOOLOOLOOOOLOOTOOLOOOOLOOLOOOOLHHAA ", "   ppppppppppppppppppppppppppppppppppppppppp ", "   ppppppppppppppppppppppppppppppppppppppppp ", "   ppppppppppppppppppppppppppppppppppppppppp ", "   AAHHLOOOOLOOLOOOOLOOTOOLOOOOLOOLOOOOLHHAA ", "   EEAAKKKKKK  KKKKKKQ   QKKKKKK  KKKKKKAAEE ", "     G KKKKKK  KKKKKKQ   QKKKKKK  KKKKKK G   ", "     FG              QRQRQ              GF   ", "       IIIIIIIIIIIIII     IIIIIIIIIIIIII     ", "        IIIIIPPIIIII       IIIIIPPIIIII      ")
                    .aisle("        IIIIIPPIIIII       IIIIIPPIIIII      ", "       IIIIIIIIIIIIIIFFFFFIIIIIIIIIIIIII     ", "     FGJJJJJJ  JJJJJJQQQQQJJJJJJ  JJJJJJGF   ", "  CCFGGJKKKKJ  JKKKKJQ   QJKKKKJ  JKKKKJGGFCC", "   CCAAKKKKKK  KKKKKKQSSSQKKKKKK  KKKKKKAACC ", "   DAHHMMMMMMMMMMMMMMOpppOMMMMMMMMMMMMMMHHaD ", "   ppppppppppppppppppppppppppppppppppppppppp ", "   ppppppppppppppppppppppppppppppppppppppppp ", "   ppppppppppppppppppppppppppppppppppppppppp ", "   DAHHMMMMMMMMMMMMMMOpppOMMMMMMMMMMMMMMHHaD ", "   CCAAKKKKKK  KKKKKKQSSSQKKKKKK  KKKKKKAACC ", "  CCFGGJKKKKJ  JKKKKJQ   QJKKKKJ  JKKKKJGGFCC", "     FGJJJJJJ  JJJJJJQQQQQJJJJJJ  JJJJJJGF   ", "       IIIIIIIIIIIIIIFFFFFIIIIIIIIIIIIII     ", "        IIIIIPPIIIII       IIIIIPPIIIII      ")
                    .aisle("        IIIIIPPIIIII       IIIIIPPIIIII      ", "       IIIIIIIIIIIIII     IIIIIIIIIIIIII     ", "     FG              QRQRQ              GF   ", "     G KKKKKK  KKKKKKQ   QKKKKKK  KKKKKK G   ", "   EEAAKKKKKK  KKKKKKQ   QKKKKKK  KKKKKKAAEE ", "   AAHHLOOOOLOOLOOOOLOOTOOLOOOOLOOLOOOOLHHAA ", "   ppppppppppppppppppppppppppppppppppppppppp ", "   ppppppppppppppppppppppppppppppppppppppppp ", "   ppppppppppppppppppppppppppppppppppppppppp ", "   AAHHLOOOOLOOLOOOOLOOTOOLOOOOLOOLOOOOLHHAA ", "   EEAAKKKKKK  KKKKKKQ   QKKKKKK  KKKKKKAAEE ", "     G KKKKKK  KKKKKKQ   QKKKKKK  KKKKKK G   ", "     FG              QRQRQ              GF   ", "       IIIIIIIIIIIIII     IIIIIIIIIIIIII     ", "        IIIIIPPIIIII       IIIIIPPIIIII      ")
                    .aisle("         IIIIPPIIII         IIIIPPIIII       ", "       IIJJIIPPIIJJII     IIJJIIPPIIJJII     ", "     FG  JJ  PP  JJ  QRQRQ  JJ  PP  JJ  GF   ", "     FG NJJN PP NJJN Q   Q NJJN PP NJJN GF   ", "     G  NNNN PP NNNN Q   Q NNNN PP NNNN  G   ", "   EEAALOOOOLOOLOOOOLOOOOOLOOOOLOOLOOOOLAAEE ", "   AAHHLOOOOLOOLOOOOLOOTOOLOOOOLOOLOOOOLHHAA ", "   DAHHMMMMMMMMMMMMMMOpppOMMMMMMMMMMMMMMHHaD ", "   AAHHLOOOOLOOLOOOOLOOTOOLOOOOLOOLOOOOLHHAA ", "   EEAALOOOOLOOLOOOOLOOOOOLOOOOLOOLOOOOLAAEE ", "     G  NNNN PP NNNN Q   Q NNNN PP NNNN  G   ", "     FG NJJN PP NJJN Q   Q NJJN PP NJJN GF   ", "     FG  JJ  PP  JJ  QRQRQ  JJ  PP  JJ  GF   ", "       IIJJIIPPIIJJII     IIJJIIPPIIJJII     ", "         IIIIPPIIII         IIIIPPIIII       ")
                    .aisle("                                             ", "        IIIIIIIIIIII       IIIIIIIIIIII      ", "             QQ      QQQQQ      QQ           ", "     FG NNNN    NNNN Q   Q NNNN    NNNN GF   ", "     FG N  N PP N  N Q   Q N  N PP N  N GF   ", "     G  NNNN PP NNNN Q   Q NNNN PP NNNN  G   ", "   EEAAKKKKKK  KKKKKKQ   QKKKKKK  KKKKKKAAEE ", "   CCAAKKKKKK  KKKKKKQSSSQKKKKKK  KKKKKKAACC ", "   EEAAKKKKKK  KKKKKKQ   QKKKKKK  KKKKKKAAEE ", "     G  NNNN PP NNNN Q   Q NNNN PP NNNN  G   ", "     FG N  N PP N  N Q   Q N  N PP N  N GF   ", "     FG NNNN    NNNN Q   Q NNNN    NNNN GF   ", "             QQ      QQQQQ      QQ           ", "        IIIIIIIIIIII       IIIIIIIIIIII      ", "                                             ")
                    .aisle("                                             ", "             QQ                 QQ           ", "             QQ                 QQ           ", "        NNNN    NNNN QQQQQ NNNN    NNNN      ", "     FG NNNN    NNNN Q   Q NNNN    NNNN GF   ", "     FG NJJN PP NJJN Q   Q NJJN PP NJJN GF   ", "     G KKKKKK  KKKKKKQ   QKKKKKK  KKKKKK G   ", "  CCFGGJKKKKJ  JKKKKJQ   QJKKKKJ  JKKKKJGGFCC", "     G KKKKKK  KKKKKKQ   QKKKKKK  KKKKKK G   ", "     FG NJJN PP NJJN Q   Q NJJN PP NJJN GF   ", "     FG NNNN    NNNN Q   Q NNNN    NNNN GF   ", "        NNNN    NNNN QQQQQ NNNN    NNNN      ", "             QQ                 QQ           ", "             QQ                 QQ           ", "                                             ")
                    .aisle("                                             ", "                                             ", "             QQ                 QQ           ", "             QQ                 QQ           ", "             QQ      QQQQQ      QQ           ", "     FG  JJ  PP  JJ  QRQRQ  JJ  PP  JJ  GF   ", "     FG              QRQRQ              GF   ", "     FGJJJJJJ  JJJJJJQQQQQJJJJJJ  JJJJJJGF   ", "     FG              QRQRQ              GF   ", "     FG  JJ  PP  JJ  QRQRQ  JJ  PP  JJ  GF   ", "             QQ      QQQQQ      QQ           ", "             QQ                 QQ           ", "             QQ                 QQ           ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                                             ", "             QQ                 QQ           ", "        IIIIIIIIIIII       IIIIIIIIIIII      ", "       IIJJIIPPIIJJII     IIJJIIPPIIJJII     ", "       IIIIIIIIIIIIII     IIIIIIIIIIIIII     ", "       IIIIIIIIIIIIIIFFFFFIIIIIIIIIIIIII     ", "       IIIIIIIIIIIIII     IIIIIIIIIIIIII     ", "       IIJJIIPPIIJJII     IIJJIIPPIIJJII     ", "        IIIIIIIIIIII       IIIIIIIIIIII      ", "             QQ                 QQ           ", "                                             ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                                             ", "                                             ", "                                             ", "         IIIIPPIIII         IIIIPPIIII       ", "        IIIIIPPIIIII       IIIIIPPIIIII      ", "        IIIIIPPIIIII       IIIIIPPIIIII      ", "        IIIIIPPIIIII       IIIIIPPIIIII      ", "         IIIIPPIIII         IIIIPPIIII       ", "                                             ", "                                             ", "                                             ", "                                             ", "                                             ")
                    .where('A', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('a', MODULE.traceabilityPredicate.get())
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('D', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('E', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteel316)))
                    .where('G', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('H', blocks(GTOBlocks.SPACECRAFT_SEALING_MECHANICAL_BLOCK.get())
                            .or(abilities(EXPORT_ITEMS)))
                    .where('I', blocks(GTOBlocks.STAINLESS_STEEL_CORROSION_RESISTANT_CASING.get()))
                    .where('J', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('K', blocks(GTOBlocks.HIGH_PRESSURE_GAS_STORAGE_TANKS_CASING.get()))
                    .where('L', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('M', Predicates.cleanroomFilters())
                    .where('N', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('O', blocks(GTOBlocks.SPACECRAFT_SEALING_MECHANICAL_BLOCK.get()))
                    .where('P', blocks(GTOBlocks.LOAD_BEARING_STRUCTURAL_STEEL_MECHANICAL_BLOCK.get()))
                    .where('Q', blocks(GTOBlocks.PRESSURE_RESISTANT_HOUSING_MECHANICAL_BLOCK.get()))
                    .where('R', blocks(GTBlocks.HERMETIC_CASING_LuV.get()))
                    .where('S', blocks(GTOBlocks.IRIDIUM_GEARBOX.get()))
                    .where('T', abilities(DRONE_HATCH))
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/spacecraft_sealing_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
    // 轨道冶炼所
    public static final MachineDefinition ORBITAL_SMELTING_FACILITY = multiblock("orbital_smelting_facility", "轨道冶炼舱", OrbitalSmeltingFacility::new)
            .allRotation()
            .workableInSpace()
            .parallelizableTooltips()
            .tooltips(GTOMachineTooltips.INSTANCE.getRecipeExtensionTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getFunctionSpaceStationModuleTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.SPACE_SMELTING_RECIPES)
            .recipeTypes(GTORecipeTypes.ALLOY_BLAST_RECIPES)
            .block(GTOBlocks.SMELTING_CONTROL_CASING)
            .recipeModifier(RecipeModifierFunction.GCYM_OVERCLOCKING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle
                    .aisle("                                             ", "                                             ", "                                             ", "                                             ", "                 M M       M M               ", "                 M M       M M               ", "                 O OI K K IO O               ", "             IIIIO OI K K IO OIIII           ", "                 O OI K K IO O               ", "             IIIIO OI K K IO OIIII           ", "                 O OI K K IO O               ", "                 M M       M M               ", "                 M M       M M               ", "                                             ", "                                             ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                 M M       M M               ", "                 M M       M M               ", "                 ONOINKNKNIONO               ", "                 ONOINKNKNIONO               ", "                    PPPPPPP                  ", "          IIIIIIIIIII P P IIIIIIIIIII        ", "             KKKKL LPPPPPPPL LKKKK           ", "          IIIIIIIIIII P P IIIIIIIIIII        ", "                    PPPPPPP                  ", "                 O OI K K IO O               ", "                 O OI K K IO O               ", "                 M M       M M               ", "                 M M       M M               ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                 M M       M M               ", "                 ONOINKNKNIONO               ", "                J             J              ", "                J             J              ", "                JJJPMMMMMMMPJJJ              ", "       IIIIIII     QMMMMMMMQ     IIIIIII     ", "      F   KKKK   L LMPMPMPML L   KKKK   F    ", "       IIIIIII     QMMMMMMMQ     IIIIIII     ", "                   PMMMMMMMP                 ", "                                             ", "                                             ", "                 O OI K K IO O               ", "                 M M       M M               ", "                                             ", "                                             ")
                    .aisle("                                             ", "                 M M       M M               ", "                 O OI K K IO O               ", "                 JJJ       JJJ               ", "                J JJRRRRRRRJJ J              ", "                J JJMMMMMMMJJ J              ", "      AJJ       JJ PMMMMMMMP JJ       JJA    ", "     FAIIII        QMOOOOOMQ        IIIIAF   ", "  CCFFAKKKK      L LMP P PML L      KKKKAFFCC", "     FAIIII        QMOOOOOMQ        IIIIAF   ", "      AJJ          PMMMMMMMP          JJA    ", "                    MMMMMMM                  ", "                    RRRRRRR                  ", "                                             ", "                 O OI K K IO O               ", "                 M M       M M               ", "                                             ")
                    .aisle("                                             ", "                 M M       M M               ", "                 O OI K K IO O               ", "                 JJ         JJ               ", "           JJJJJJ J MMMMMMM J JJJJJJ         ", "      AJJJJJJNNNJ J MMMMMMM J JNNNJJJJJJA    ", "     FAJJJJJJJJJJJ PMOOOOOMP JJJJJJJJJJJAF   ", "   EEAGAAJJJJ      QM     MQ      JJJJAAGAEE ", "   CCAGAA        L LMP P PML L        AAGACC ", "   EEAGAA          QM     MQ          AAGAEE ", "     FAJJ          PMOOOOOMP          JJAF   ", "      AJJ           MMMMMMM           JJA    ", "                    MMMMMMM                  ", "                                             ", "                 O OI K K IO O               ", "                 M M       M M               ", "                                             ")
                    .aisle("                 M M       M M               ", "                 O OI K K IO O               ", "                    PPPPPPP                  ", "           JJJJJJJJPMMMMMMMPJJJJJJJJ         ", "      AJJJJ       JPMMMMMMMPJ       JJJJA    ", "     FAJJ         JPMOOOOOMPJ         JJAF   ", "   EEAGA    JJJJJJ PM     MP JJJJJJ    AGAEE ", "AAAAAA    JJJ      QM     MQ      JJJ    AAA ", "ABDDAA   LLLLLLLLLLLMP P PMLLLLLLLLLLL   AaD ", "AAAAAAHHK          QM     MQ          KHHAAA ", "   EEAGAA          PM     MP          AAGAEE ", "     FAJJ          PMOOOOOMP          JJAF   ", "      AJJ          PMMMMMMMP          JJA    ", "                   PMMMMMMMP                 ", "                    PPPPPPP                  ", "                 O OI K K IO O               ", "                 M M       M M               ")
                    .aisle("                 M M       M M               ", "             IIIIO OI K K IO OIIII           ", "          IIIIIIIIIII P P IIIIIIIIIII        ", "       IIIIIII     QMMMMMMMQ     IIIIIII     ", "     FAIIIIJJJJJJJJQMOOOOOMQJJJJJJJJIIIIAF   ", "   EEAGAAJJJJJJJJJJQM     MQJJJJJJJJJJAAGAEE ", "   AAAHHKJJJ       QM     MQ       JJJKHHAAA ", "   pppppHMMMMMMMMMMMMP P PMMMMMMMMMMMMH      ", "   pppppHMMMMMMMMMMMMP P PMMMMMMMMMMMMH      ", "   pppppHMMMMMMMMMMMMP P PMMMMMMMMMMMMH      ", "   AAAHHK          QM     MQ          KHHAAA ", "   EEAGAA          QM     MQ          AAGAEE ", "     FAIIII        QMOOOOOMQ        IIIIAF   ", "       IIIIIII     QMMMMMMMQ     IIIIIII     ", "          IIIIIIIIIII P P IIIIIIIIIII        ", "             IIIIO OI K K IO OIIII           ", "                 M M       M M               ")
                    .aisle("                 M M       M M               ", "                 O OI K K IO O               ", "             KKKKL LPPPPPPPL LKKKK           ", "      F   KKKK   L LMPMPMPML L   KKKK   F    ", "  CCFFAKKKK      L LMP P PML L      KKKKAFFCC", "   CCAGAA        L LMP P PML L        AAGACC ", "   DAAHHKLLLLLLLLLLLMP P PMLLLLLLLLLLLKHHAaD ", "   pppppHMMMMMMMMMMMMP P PMMMMMMMMMMMMH      ", "   pppppH                             H      ", "   pppppHMMMMMMMMMMMMP P PMMMMMMMMMMMMH      ", "   DAAHHKLLLLLLLLLLLMP P PMLLLLLLLLLLLKHHAaD ", "   CCAGAA        L LMP P PML L        AAGACC ", "  CCFFAKKKK      L LMP P PML L      KKKKAFFCC", "      F   KKKK   L LM MPM ML L   KKKK   F    ", "             KKKKL LPPPPPPPL LKKKK           ", "                 O OI K K IO O               ", "                 M M       M M               ")
                    .aisle("                 M M       M M               ", "             IIIIO OI K K IO OIIII           ", "          IIIIIIIIIII P P IIIIIIIIIII        ", "       IIIIIII     QMMMMMMMQ     IIIIIII     ", "     FAIIIIJJJJJJJJQMOOOOOMQJJJJJJJJIIIIAF   ", "   EEAGAAJJJJJJJJJJQM     MQJJJJJJJJJJAAGAEE ", "   AAAHHKJJJ       QM     MQ       JJJKHHAAA ", "   pppppHMMMMMMMMMMMMP P PMMMMMMMMMMMMH      ", "   pppppHMMMMMMMMMMMMP P PMMMMMMMMMMMMH      ", "   pppppHMMMMMMMMMMMMP P PMMMMMMMMMMMMH      ", "   AAAHHK          QM     MQ          KHHAAA ", "   EEAGAA          QM     MQ          AAGAEE ", "     FAIIII        QMOOOOOMQ        IIIIAF   ", "       IIIIIII     QMMMMMMMQ     IIIIIII     ", "          IIIIIIIIIII P P IIIIIIIIIII        ", "             IIIIO OI K K IO OIIII           ", "                 M M       M M               ")
                    .aisle("                 M M       M M               ", "                 O OI K K IO O               ", "                    PPPPPPP                  ", "           JJJJJJJJPMMMMMMMPJJJJJJJJ         ", "      AJJJJ       JPMMMMMMMPJ       JJJJA    ", "     FAJJ         JPMOOOOOMPJ         JJAF   ", "   EEAGA    JJJJJJ PM     MP JJJJJJ    AGAEE ", "   AAA    JJJ      QM     MQ      JJJ    AAA ", "   DAA   LLLLLLLLLLLMP P PMLLLLLLLLLLL   AaD ", "   AAAHHK          QM     MQ          KHHAAA ", "   EEAGAA          PM     MP          AAGAEE ", "     FAJJ          PMOOOOOMP          JJAF   ", "      AJJ          PMMMMMMMP          JJA    ", "                   PMMMMMMMP                 ", "                    PPPPPPP                  ", "                 O OI K K IO O               ", "                 M M       M M               ")
                    .aisle("                                             ", "                 M M       M M               ", "                 O OI K K IO O               ", "                 JJ         JJ               ", "           JJJJJJ J MMMMMMM J JJJJJJ         ", "      AJJJJJJNNNJ J MMMMMMM J JNNNJJJJJJA    ", "     FAJJJJJJJJJJJ PMOOOOOMP JJJJJJJJJJJAF   ", "   EEAGAAJJJJ      QM     MQ      JJJJAAGAEE ", "   CCAGAA        L LMP P PML L        AAGACC ", "   EEAGAA          QM     MQ          AAGAEE ", "     FAJJ          PMOOOOOMP          JJAF   ", "      AJJ           MMMMMMM           JJA    ", "                    MMMMMMM                  ", "                                             ", "                 O OI K K IO O               ", "                 M M       M M               ", "                                             ")
                    .aisle("                                             ", "                 M M       M M               ", "                 O OI K K IO O               ", "                 JJJ       JJJ               ", "                J JJRRRRRRRJJ J              ", "                J JJMMMMMMMJJ J              ", "      AJJ       JJ PMMMMMMMP JJ       JJA    ", "     FAIIII        QMOOOOOMQ        IIIIAF   ", "  CCFFAKKKK      L LMP P PML L      KKKKAFFCC", "     FAIIII        QMOOOOOMQ        IIIIAF   ", "      AJJ          PMMMMMMMP          JJA    ", "                    MMMMMMM                  ", "                    RRRRRRR                  ", "                                             ", "                 O OI K K IO O               ", "                 M M       M M               ", "                                             ")
                    .aisle("                                             ", "                                             ", "                 M M       M M               ", "                 ONOINKNKNIONO               ", "                J             J              ", "                J             J              ", "                JJJPMMMMMMMPJJJ              ", "       IIIIIII     QMMMMMMMQ     IIIIIII     ", "      F   KKKK   L LMPMPMPML L   KKKK   F    ", "       IIIIIII     QMMMMMMMQ     IIIIIII     ", "                   PMMMMMMMP                 ", "                                             ", "                                             ", "                 O OI K K IO O               ", "                 M M       M M               ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                 M M       M M               ", "                 M M       M M               ", "                 ONOINKNKNIONO               ", "                 ONOINKNKNIONO               ", "                    PPPPPPP                  ", "          IIIIIIIIIII P P IIIIIIIIIII        ", "             KKKKL LPPPPPPPL LKKKK           ", "          IIIIIIIIIII P P IIIIIIIIIII        ", "                    PPPPPPP                  ", "                 O OI K K IO O               ", "                 O OI K K IO O               ", "                 M M       M M               ", "                 M M       M M               ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                                             ", "                                             ", "                 M M       M M               ", "                 M M       M M               ", "                 O OI K K IO O               ", "             IIIIO OI K K IO OIIII           ", "                 O OI K K IO O               ", "             IIIIO OI K K IO OIIII           ", "                 O OI K K IO O               ", "                 M M       M M               ", "                 M M       M M               ", "                                             ", "                                             ", "                                             ", "                                             ")
                    .aisle
                    .where('A', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('a', MODULE.traceabilityPredicate.get())
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('D', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('E', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteel316)))
                    .where('G', blocks(GTOBlocks.PRESSURE_RESISTANT_HOUSING_MECHANICAL_BLOCK.get()))
                    .where('H', blocks(GTOBlocks.SMELTING_CONTROL_CASING.get())
                            .or(autoGCYMAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH))
                            .or(abilities(OVERCLOCK_HATCH)))
                    .where('I', blocks(GTOBlocks.CREEP_RESISTANT_SMELTING_CASING.get()))
                    .where('J', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('K', blocks(GTOBlocks.SMELTING_CONTROL_CASING.get()))
                    .where('L', blocks(GTOBlocks.LOAD_BEARING_STRUCTURAL_STEEL_MECHANICAL_BLOCK.get()))
                    .where('M', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where('N', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('O', blocks(GTOBlocks.INNER_LINING_OF_SMELTING_FURNACE_CASING.get()))
                    .where('P', heatingCoils())
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where('Q', blocks(GTOBlocks.TUNGSTEN_ALLOY_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('R', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/smelting_control_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
    // 轨道精细材料工厂
    public static final MachineDefinition ORBITAL_FINE_MATERIALS_FACTORY = multiblock("orbital_fine_materials_factory", "轨道超材料锻造工厂舱", (d -> new RecipeExtension(d, ILargeSpaceStationMachine.twoWayPositionFunction(41))))
            .allRotation()
            .workableInSpace()
            .parallelizableTooltips()
            .tooltips(GTOMachineTooltips.INSTANCE.getRecipeExtensionTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getFunctionSpaceStationModuleTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.SUPERMATERIAL_FORGING_RECIPES)
            .block(GTOBlocks.SPACE_STATION_CONTROL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                                             ", "                                             ", "                                             ", "                                             ", "                                             ", "           FFFFFFFFFFFFFFFFFFFFFFFFF         ", "                                             ", "                                             ", "                                             ", "           FFFFFFFFFFFFFFFFFFFFFFFFF         ", "                                             ", "                                             ", "                                             ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                                             ", "                                             ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "          FOOOSTTTSTTTS STTTSTTTSOOOF        ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "                                             ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "          FQKQ QKQ QKQSTSQKQ QKQ QKQF        ", "           QKQ QKQ QKQSTSQKQ QKQ QKQ         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "                                             ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "          IOOOSOOOSOOOS SOOOSOOOSOOOI        ", "         FIKFFFFFFFFFFK KFFFFFFFFFFKIF       ", "         EEOOOSOOOSOOOS SOOOSOOOSOOOEE       ", "         EE   P   P         P   P   EE       ", "         EEQQQ QQQ QQQSTSQQQ QQQ QQQEE       ", "         FIKNK KNK KNK A KNK KNK KNKIF       ", "          IKNK KNK KNK A KNK KNK KNKI        ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "                                             ", "                                             ")
                    .aisle("                                             ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "           KFFSFFFSFFFS SFFFSFFFSFFK         ", "           K          K K          K         ", "        FIIK          K K          KIIF      ", "        FIIK          K K          KIIF      ", "        FIIOOOSOOOSOOOS SOOOSOOOSOOOIIF      ", "      FFFII                         IIFFF    ", "        FIIQQQPQQQPQQQSTSQQQPQQQPQQQIIF      ", "        FIIKQK KQK KQK A KQK KQK KQKIIF      ", "        FIIKNK KNK KNK A KNK KNK KNKIIF      ", "           KNK KNK KNK A KNK KNK KNK         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "                                             ")
                    .aisle("                                             ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "           K          K K          K         ", "        FIIK          K K          KIIF      ", "        FIIK          K K          KIIF      ", "      AII  KMMMMMMMMMMRRRMMMMMMMMMMK  IIA    ", "     FAII  OOOSOOOSOOOS SOOOSOOOSOOO  IIAF   ", "  CCFFAII                             IIAFFCC", "     FAII             STS             IIAF   ", "      AII  QQQPQQQPQQQ A QQQPQQQPQQQ  IIA    ", "        FIIKQK KQK KQK A KQK KQK KQKIIF      ", "        FIIKNK KNK KNK A KNK KNK KNKIIF      ", "           KNK KNK KNKAA KNK KNK KNK         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ")
                    .aisle("           OOOSOOOSOOOS SOOOSOOOSOOO         ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "        FIIK          K K          KIIF      ", "        FIIK          K K          KIIF      ", "      AII  OOOSOOOSOOOS SOOOSOOOSOOO  IIA    ", "     FAII  OOOSOOOSOOOS SOOOSOOOSOOO  IIAF   ", "   EEA  I  OOOSOOOSOOOS SOOOSOOOSOOO  I  AEE ", "   CCA  I                             I  ACC ", "   EEA  I             STS             I  AEE ", "     FAII  H H H H H HSTSH H H H H H  IIAF   ", "      AII  QQQPQQQPQQQSTSQQQPQQQPQQQ  IIA    ", "        FIIKQK KQK KQKSTSKQK KQK KQKIIF      ", "        FIIKNK KNK KNK A KNK KNK KNKIIF      ", "          IKNK KNK KNK A KNK KNK KNKI        ", "           QKQ QKQ QKQSTSQKQ QKQ QKQ         ")
                    .aisle("           OOOSTTTSTTTS STTTSTTTSOOO         ", "           KFFFFFFFFFFK KFFFFFFFFFFK         ", "        FIIK          K K          KIIF      ", "      AII  KMMMMMMMMMMRRRMMMMMMMMMMK  IIA    ", "     FAII  OOOSOOOSOOOS SOOOSOOOSOOO  IIAF   ", "   EEAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHAEE ", "AAAAAGGJKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKJGGAA ", "ABDDAGGGKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKGGGaD ", "AAAAAGGGKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKGGGAA ", "   EEAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHAEE ", "     FAIILLHLHLHLHLHLHLLLHLHLHLHLHLHLLIIAF   ", "      AIILLQQQLQQQLQQQSTSQQQLQQQLQQQLLIIA    ", "        FIIKQKLKQKLKQKSTSKQKLKQKLKQKIIF      ", "          IKNK KNK KNK A KNK KNK KNKI        ", "           QKQ QKQ QKQSTSQKQ QKQ QKQ         ")
                    .aisle("           OOOSOOOSOOOS SOOOSOOOSOOO         ", "         EEOOOSOOOSOOOS SOOOSOOOSOOOEE       ", "        FIIOOOSOOOSOOOS SOOOSOOOSOOOIIF      ", "     FAII  OOOSOOOSOOOS SOOOSOOOSOOO  IIAF   ", "   EEA  I  OOOSOOOSOOOS SOOOSOOOSOOO  I  AEE ", "   AAGGJKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKJGGAA ", "   ppppGKKNFNFNFNFNFNFNFNFNFNFNFNFNFNKKGpppp ", "   pppp KK                           KK pppp ", "   pppp  KNFNFNFNFNFNFNFNFNFNFNFNFNFNK  pppp ", "   AAGG   KKKKKKKKKKKKKKKKKKKKKKKKKKK   GGAA ", "   EEAA                                 AAEE ", "     FAII                             IIAF   ", "        FIIQQQLQQQLQQQSTSQQQLQQQLQQQIIF      ", "         EEQRQ QRQ QRQ A QRQ QRQ QRQEE       ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ")
                    .aisle("           HHHSHHHSHHHSHSHHHSHHHSHHH         ", "         EEPPPSPPPSPPPSPSPPPSPPPSPPPEE       ", "      FFFII                         IIFFF    ", "  CCFFAII                             IIAFFCC", "   CCA  I                             I  ACC ", "   DAGGJKKMMKMMMKMMMKMMKMMKMMMKMMMKMMKKJGGaD ", "   ppppGKK  N   N   N     N   N   N  KKGpppp ", "   ppppGKK                           KKGpppp ", "   ppppGKK  N   N   N     N   N   N  KKGpppp ", "   DAGGGK MMRMMMRMMMRLLLLLRMMMRMMMRMM KGGGaD ", "   CCAAIK   R   R   R     R   R   R   KIAACC ", "  CCFFAII   R   R   R     R   R   R   IIAFFCC", "      FFFIIQRQLQRQLQRQSTSQRQLQRQLQRQIIFFF    ", "         EEPRPPPRPPPRPPAPPRPPPRPPPRPEE       ", "           HHHHHHHHHHHSTSHHHHHHHHHHH         ")
                    .aisle("           OOOSOOOSOOOS SOOOSOOOSOOO         ", "         EEOOOSOOOSOOOS SOOOSOOOSOOOEE       ", "        FIIOOOSOOOSOOOS SOOOSOOOSOOOIIF      ", "     FAII  OOOSOOOSOOOS SOOOSOOOSOOO  IIAF   ", "   EEA  I  OOOSOOOSOOOS SOOOSOOOSOOO  I  AEE ", "   AAGGJKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKJGGAA ", "   ppppGKKNFNFNFNFNFNFNFNFNFNFNFNFNFNKKGpppp ", "   pppp KK                           KK pppp ", "   pppp  KNFNFNFNFNFNFNFNFNFNFNFNFNFNK  pppp ", "   AAGG   KKKKKKKKKKKKKKKKKKKKKKKKKKK   GGAA ", "   EEAA                                 AAEE ", "     FAII                             IIAF   ", "        FIIQQQLQQQLQQQSTSQQQLQQQLQQQIIF      ", "         EEQRQ QRQ QRQ A QRQ QRQ QRQEE       ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ")
                    .aisle("           OOOSTTTSTTTS STTTSTTTSOOO         ", "           KFFFFFFFFFFK KFFFFFFFFFFK         ", "        FIIK          K K          KIIF      ", "      AII  KMMMMMMMMMMRRRMMMMMMMMMMK  IIA    ", "     FAII  OOOSOOOSOOOS SOOOSOOOSOOO  IIAF   ", "   EEAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHAEE ", "   AAGGJKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKJGGAA ", "   DAGGGKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKGGGaD ", "   AAGGGKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKGGGAA ", "   EEAHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHAEE ", "     FAIILLHLHLHLHLHLHLLLHLHLHLHLHLHLLIIAF   ", "      AIILLQQQLQQQLQQQSTSQQQLQQQLQQQLLIIA    ", "        FIIKQKLKQKLKQKSTSKQKLKQKLKQKIIF      ", "          IKNK KNK KNK A KNK KNK KNKI        ", "           QKQ QKQ QKQSTSQKQ QKQ QKQ         ")
                    .aisle("           OOOSOOOSOOOS SOOOSOOOSOOO         ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "        FIIK          K K          KIIF      ", "        FIIK          K K          KIIF      ", "      AII  OOOSOOOSOOOS SOOOSOOOSOOO  IIA    ", "     FAII  OOOSOOOSOOOS SOOOSOOOSOOO  IIAF   ", "   EEA  I  OOOSOOOSOOOS SOOOSOOOSOOO  I  AEE ", "   CCA  I                             I  ACC ", "   EEA  I             STS             I  AEE ", "     FAII  H H H H H HSTSH H H H H H  IIAF   ", "      AII  QQQPQQQPQQQSTSQQQPQQQPQQQ  IIA    ", "        FIIKQK KQK KQKSTSKQK KQK KQKIIF      ", "        FIIKNK KNK KNK A KNK KNK KNKIIF      ", "          IKNK KNK KNK A KNK KNK KNKI        ", "           QKQ QKQ QKQSTSQKQ QKQ QKQ         ")
                    .aisle("                                             ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "           K          K K          K         ", "        FIIK          K K          KIIF      ", "        FIIK          K K          KIIF      ", "      AII  KMMMMMMMMMMRRRMMMMMMMMMMK  IIA    ", "     FAII  OOOSOOOSOOOS SOOOSOOOSOOO  IIAF   ", "  CCFFAII                             IIAFFCC", "     FAII             STS             IIAF   ", "      AII  QQQPQQQPQQQ A QQQPQQQPQQQ  IIA    ", "        FIIKQK KQK KQK A KQK KQK KQKIIF      ", "        FIIKNK KNK KNK A KNK KNK KNKIIF      ", "           KNK KNK KNK AAKNK KNK KNK         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ")
                    .aisle("                                             ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "           KFFSFFFSFFFS SFFFSFFFSFFK         ", "           K          K K          K         ", "        FIIK          K K          KIIF      ", "        FIIK          K K          KIIF      ", "        FIIOOOSOOOSOOOS SOOOSOOOSOOOIIF      ", "      FFFII                         IIFFF    ", "        FIIQQQPQQQPQQQSTSQQQPQQQPQQQIIF      ", "        FIIKQK KQK KQK A KQK KQK KQKIIF      ", "        FIIKNK KNK KNK A KNK KNK KNKIIF      ", "           KNK KNK KNK A KNK KNK KNK         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "                                             ")
                    .aisle("                                             ", "                                             ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "          IOOOSOOOSOOOS SOOOSOOOSOOOI        ", "         FIKFFFFFFFFFFK KFFFFFFFFFFKIF       ", "         EEOOOSOOOSOOOS SOOOSOOOSOOOEE       ", "         EE   P   P         P   P   EE       ", "         EEQQQ QQQ QQQSTSQQQ QQQ QQQEE       ", "         FIKNK KNK KNK A KNK KNK KNKIF       ", "          IKNK KNK KNK A KNK KNK KNKI        ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                                             ", "                                             ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "          FOOOSTTTSTTTS STTTSTTTSOOOF        ", "           OOOSOOOSOOOS SOOOSOOOSOOO         ", "                                             ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "          FQKQ QKQ QKQSTSQKQ QKQ QKQF        ", "           QKQ QKQ QKQSTSQKQ QKQ QKQ         ", "           QQQ QQQ QQQSTSQQQ QQQ QQQ         ", "                                             ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                                             ", "                                             ", "                                             ", "           FFFFFFFFFFFFFFFFFFFFFFFFF         ", "                                             ", "                                             ", "                                             ", "           FFFFFFFFFFFFFFFFFFFFFFFFF         ", "                                             ", "                                             ", "                                             ", "                                             ", "                                             ")
                    .where('A', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('a', MODULE.traceabilityPredicate.get())
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('D', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('E', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteel316)))
                    .where('G', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get())
                            .or(autoGCYMAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH))
                            .or(abilities(OVERCLOCK_HATCH)))
                    .where('H', blocks(GTOBlocks.LOAD_BEARING_STRUCTURAL_STEEL_MECHANICAL_BLOCK.get()))
                    .where('I', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('J', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get()))
                    .where('K', blocks(GTOBlocks.STAINLESS_STEEL_CORROSION_RESISTANT_CASING.get()))
                    .where('L', blocks(GTOBlocks.HSSS_BOROSILICATE_GLASS.get()))
                    .where('M', blocks(GTOBlocks.PRECISION_PROCESSING_MECHANICAL_CASING.get()))
                    .where('N', blocks(GTOBlocks.IRIDIUM_PIPE_CASING.get()))
                    .where('O', blocks(GTOBlocks.PIKYONIUM_MACHINE_CASING.get()))
                    .where('P', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteelGC4)))
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where('Q', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('R', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('S', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('T', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/space_station_control_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
    // 轨道纳米精密加工舱
    public static final MachineDefinition ORBITAL_NANOPRECISION_PROCESSING_CHAMBER = multiblock("orbital_nanoprecision_processing_chamber", "轨道纳米精密加工舱", d -> new RecipeExtension(d, ILargeSpaceStationMachine.twoWayPositionFunction(41)))
            .allRotation()
            .workableInSpace()
            .parallelizableTooltips()
            .tooltips(GTOMachineTooltips.INSTANCE.getRecipeExtensionTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getFunctionSpaceStationModuleTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.MICROGRAVITY_NANOFABRICATION_RECIPES)
            .block(GTOBlocks.PRECISION_MACHINING_CONTROL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                                             ", "                                             ", "                                             ", "          G         G     G         G        ", "         GG         GG   GG         GG       ", "        KKKKK     KKKKK KKKKK     KKKKK      ", "         GG         GG   GG         GG       ", "        KKKKK     KKKKK KKKKK     KKKKK      ", "         GG         GG   GG         GG       ", "          G         G     G         G        ", "                                             ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "          G         G     G         G        ", "         GG         GG   GG         GG       ", "         GGGG     GGGL   LGGG     GGGL       ", "        KGJGGK   KGGJGK KGJGGK   KGGJGK      ", "     FIIIGJGG     GGJG   GJGG     GGJGIIIF   ", "        KGJGGK   KGGJGK KGJGGK   KGGJGK      ", "         LGGG     GGGL   LGGG     GGGL       ", "         GG         GG   GG         GG       ", "          G         G     G         G        ", "                                             ", "                                             ")
                    .aisle("                                             ", "          G         G     G         G        ", "         GG         GG   GG         GG       ", "         GGGG     GGGGFFFGGGG     GGGG       ", "     GGGGL   G K G   L   L   G K G   LGGGG   ", "     GIIKG   GKKKG   GK KG   GKKKG   GKIIG   ", "  CCFGIIIG   G K G   G   G   G K G   GIIIGFCC", "     GIIKG   GKKKG   GK KG   GKKKG   GKIIG   ", "     GGGGL   G K G   L   L   G K G   LGGGG   ", "         GGGG     GGGGFFFGGGG     GGGG       ", "         GG         GG   GG         GG       ", "          G         G     G         G        ", "                                             ")
                    .aisle("          G         G     G         G        ", "         GG         GG   GG         GG       ", "         GGGG     GGGGFFFGGGG     GGGG       ", "     GGGGG   G K G   GFFFG   G K G   GGGGG   ", "     GGGGL   GGGGG   L   L   GGGGG   LGGGG   ", "   EEA  KG    GGG    GKKKG    GGG    GK  AEE ", "   CCA   G    GGG    G   G    GGG    G   ACC ", "   EEA  KG    GGG    GKKKG    GGG    GK  AEE ", "     GGGGL   GGGGG   L   L   GGGGG   LGGGG   ", "     GGGGG   G K G   GFFFG   G K G   GGGGG   ", "         GGGG     GGGGFFFGGGG     GGGG       ", "         GG         GG   GG         GG       ", "          G         G     G         G        ")
                    .aisle("         GG         GG   GG         GG       ", "         LGGG     GGGL   LGGG     GGGG       ", "     GGGGL   G K G   L   L   G K G   LGGGG   ", "     GGGGL   GGGGG   L   L   GGGGG   LGGGG   ", "   EEA   LJJJJJJJJJJJL   LJJJJJJJJJJJL   AEE ", "AAAAAHHHIG           GIIIG           GIHHHAA ", "ABDDAHHHIG           GIIIG           GIHHHaD ", "AAAAAHHHIG           GIIIG           GIHHHAA ", "   EEA   LJJJJJJJJJJJL   LJJJJJJJJJJJL   AEE ", "     GGGGL   GGGGG   L   L   GGGGG   LGGGG   ", "     GGGGL   G K G   L   L   G K G   LGGGG   ", "         LGGG     GGGL   LGGG     GGGL       ", "         GG         GG   GG         GG       ")
                    .aisle("        KKKKK     KKKKK KKKKK     KKKKK      ", "        KGJGGK   KGGJGK KGJGGK   KGGJGK      ", "     GIIKG   GKKKG   GK KG   GKKKG   GKIIG   ", "   EEA  KG    GGG    GKKKG    GGG    GK  AEE ", "   AAHHHIG           GIIIG           GIHHHAA ", "   pppppHG           GIIIG           GHppppp ", "   pppppHMMMMMMMMMMMMMMMMMMMMMMMMMMMMMHppppp ", "   pppppHG           GIIIG           GHppppp ", "   AAHHHIG           GIIIG           GIHHHAA ", "   EEA  KG    GGG    GKKKG    GGG    GK  AEE ", "     GIIKG   GKKKG   GK KG   GKKKG   GKIIG   ", "        KGJGGK   KGGJGK KGJGGK   KGGJGK      ", "        KKKKK     KKKKK KKKKK     KKKKK      ")
                    .aisle("         GG         GG   GG         GG       ", "     FIIIGJGG     GGJG   GJGG     GGJGIIIF   ", "  CCFGIIIG   G K G   G   G   G K G   GIIIGFCC", "   CCA   G    GGG    G   G    GGG    G   ACC ", "   DAHHHIG           GIIIG           GIHHHaD ", "   pppppHMMMMMMMMMMMMMMMMMMMMMMMMMMMMMHppppp ", "   pppppHJJJJJJJJJJJJJJJJJJJJJJJJJJJJJHppppp ", "   pppppHMMMMMMMMMMMMMMMMMMMMMMMMMMMMMHppppp ", "   DAHHHIG           GIIIG           GIHHHaD ", "   CCA   G    GGG    G   G    GGG    G   ACC ", "  CCFGIIIG   G K G   G   G   G K G   GIIIGFCC", "     FIIIGJGG     GGJG   GJGG     GGJGIIIF   ", "         GG         GG   GG         GG       ")
                    .aisle("        KKKKK     KKKKK KKKKK     KKKKK      ", "        KGJGGK   KGGJGK KGJGGK   KGGJGK      ", "     GIIKG   GKKKG   GK KG   GKKKG   GKIIG   ", "   EEA  KG    GGG    GKKKG    GGG    GK  AEE ", "   AAHHHIG           GIIIG           GIHHHAA ", "   pppppHG           GIIIG           GHppppp ", "   pppppHMMMMMMMMMMMMMMMMMMMMMMMMMMMMMHppppp ", "   pppppHG           GIIIG           GHppppp ", "   AAHHHIG           GIIIG           GIHHHAA ", "   EEA  KG    GGG    GKKKG    GGG    GK  AEE ", "     GIIKG   GKKKG   GK KG   GKKKG   GKIIG   ", "        KGJGGK   KGGJGK KGJGGK   KGGJGK      ", "        KKKKK     KKKKK KKKKK     KKKKK      ")
                    .aisle("         GG         GG   GG         GG       ", "         LGGG     GGGL   LGGG     GGGL       ", "     GGGGL   G K G   L   L   G K G   LGGGG   ", "     GGGGL   GGGGG   L   L   GGGGG   LGGGG   ", "   EEAJJ LJJJJJJJJJJJL   LJJJJJJJJJJJL JJAEE ", "   AAHH IGNNNIIIIINNNGIIIGIIINNNNNIIIGI HHAA ", "   DAHH IGIIIIIIIIIIIGIIIGIIIIIIIIIIIGI HHaD ", "   AAHH IGNNNIIIIINNNGIIIGIIINNNNNIIIGI HHAA ", "   EEAJJ LJJJJJJJJJJJL   LJJJJJJJJJJJL JJAEE ", "     GGGGL   GGGGG   L   L   GGGGG   LGGGG   ", "     GGGGL   G K G   L   L   G K G   LGGGG   ", "         LGGG     GGGL   LGGG     GGGL       ", "         GG         GG   GG         GG       ")
                    .aisle("          G         G     G         G        ", "         GG         GG   GG         GG       ", "         GGGG     GGGGFFFGGGG     GGGG       ", "     GGGGG   G K G   GFFFG   G K G   GGGGG   ", "     GGGGLIIIGGGGGIIILIIILIIIGGGGGIIILGGGG   ", "   EEAI                                 IAEE ", "   CCAI                                 IACC ", "   EEAI                                 IAEE ", "     GGGGLIIIGGGGGIIILIIILIIIGGGGGIIILGGGG   ", "     GGGGG   G K G   GFFFG   G K G   GGGGG   ", "         GGGG     GGGGFFFGGGG     GGGG       ", "         GG         GG   GG         GG       ", "          G         G     G         G        ")
                    .aisle("                                             ", "          G         G     G         G        ", "         GG         GG   GG         GG       ", "         GGGG     GGGGFFFGGGG     GGGG       ", "     GGGGLIIIG K GIIILIIILIIIG K GIIILGGGG   ", "     GIIKGIIIGKKKGIIIGKNKGIIIGKKKGIIIGKIIG   ", "  CCFGIIIGIIIGKKKGIIIGINIGIIIGKKKGIIIGIIIGFCC", "     GIIKGIIIGKKKGIIIGKNKGIIIGKKKGIIIGKIIG   ", "     GGGGLIIIG K GIIILIIIL   G K GIIILGGGG   ", "         GGGG     GGGGFFFGGGG     GGGG       ", "         GG         GG   GG         GG       ", "          G         G     G         G        ", "                                             ")
                    .aisle("                                             ", "                                             ", "          G         G     G         G        ", "         GG         GG   GG         GG       ", "         LGGG     GGGL   LGGG     GGGL       ", "        KGJGGKIIIKGGJGK KGJGGKIIIKGGJGK      ", "     FIIIGJGGIIIIIGGJG   GJGGIIIIIGGJGIIIF   ", "        KGJGGKIIIKGGJGK KGJGGKIIIKGGJGK      ", "         LGGG     GGGL   LGGG     GGGL       ", "         GG         GG   GG         GG       ", "          G         G     G         G        ", "                                             ", "                                             ")
                    .aisle("                                             ", "                                             ", "                                             ", "          G         G     G         G        ", "         GG         GG   GG         GG       ", "        KKKKK     KKKKK KKKKK     KKKKK      ", "         GG         GG   GG         GG       ", "        KKKKK     KKKKK KKKKK     KKKKK      ", "         GG         GG   GG         GG       ", "          G         G     G         G        ", "                                             ", "                                             ", "                                             ")
                    .where('A', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('a', MODULE.traceabilityPredicate.get())
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('D', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('E', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteel316)))
                    .where('G', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('H', blocks(GTOBlocks.PRECISION_MACHINING_CONTROL_CASING.get())
                            .or(autoGCYMAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH))
                            .or(abilities(OVERCLOCK_HATCH)))
                    .where('I', blocks(GTOBlocks.TUNGSTEN_ALLOY_RADIATION_SHIELDING_MECHANICAL_BLOCK.get()))
                    .where('J', blocks(GTOBlocks.PRECISION_MACHINING_CONTROL_CASING.get()))
                    .where('K', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('L', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('M', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('N', blocks(GTOBlocks.NAQUADAH_BOROSILICATE_GLASS.get()))
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/precision_machining_control_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
}
