package com.gtocore.common.data.machines;

import com.gtocore.api.machine.part.GTOPartAbility;
import com.gtocore.api.pattern.GTOPredicates;
import com.gtocore.client.renderer.machine.DigitalMinerRenderer;
import com.gtocore.common.block.BlockMap;
import com.gtocore.common.data.GTOBlocks;
import com.gtocore.common.data.GTOMachines;
import com.gtocore.common.data.GTOMaterials;
import com.gtocore.common.data.GTORecipeTypes;
import com.gtocore.common.data.translation.GTOMachineStories;
import com.gtocore.common.data.translation.GTOMachineTooltips;
import com.gtocore.common.machine.multiblock.electric.FastNeutronBreederReactor;
import com.gtocore.common.machine.multiblock.electric.miner.DigitalMiner;
import com.gtocore.common.machine.multiblock.electric.space.ISpacePredicateMachine;
import com.gtocore.common.machine.multiblock.electric.space.MegaSpaceElevatorModuleMachine;
import com.gtocore.common.machine.multiblock.electric.space.SpaceElevatorModuleMachine;
import com.gtocore.common.machine.multiblock.electric.space.spacestaion.Conjunction;
import com.gtocore.common.machine.multiblock.electric.space.spacestaion.Core;
import com.gtocore.common.machine.multiblock.electric.space.spacestaion.Extension;
import com.gtocore.common.machine.multiblock.electric.space.spacestaion.SimpleSpaceStationMachine;
import com.gtocore.common.machine.multiblock.steam.LargeSteamSolarBoilerMachine;

import com.gtolib.GTOCore;
import com.gtolib.api.annotation.NewDataAttributes;
import com.gtolib.api.machine.feature.multiblock.ITierCasingMachine;
import com.gtolib.api.machine.multiblock.*;
import com.gtolib.api.recipe.modifier.RecipeModifierFunction;
import com.gtolib.api.registries.GTOMachineBuilder;
import com.gtolib.utils.MultiBlockFileReader;
import com.gtolib.utils.RegistriesUtils;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.GTValues;
import com.gregtechceu.gtceu.api.block.IMachineBlock;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MachineDefinition;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.machine.feature.multiblock.ICoilMachine;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.MultiblockShapeInfo;
import com.gregtechceu.gtceu.api.pattern.Predicates;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.api.recipe.modifier.RecipeModifier;
import com.gregtechceu.gtceu.common.data.*;

import net.minecraft.core.BlockPos;
import net.minecraft.core.Direction;
import net.minecraft.world.level.block.Blocks;

import com.google.common.collect.ImmutableSet;

import java.util.List;
import java.util.Set;
import java.util.stream.Stream;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gtocore.api.machine.part.ILargeSpaceStationMachine.ConnectType.*;
import static com.gtocore.api.pattern.GTOPredicates.*;
import static com.gtocore.utils.register.MachineRegisterUtils.multiblock;
import static com.gtolib.api.GTOValues.GLASS_TIER;
import static com.gtolib.api.GTOValues.POWER_MODULE_TIER;
import static com.hepdd.gtmthings.data.GTMTRecipeTypes.DIGITAL_MINER_RECIPE;

public final class MultiBlockH {

    public static void init() {}

    public static final MultiblockMachineDefinition LHC = multiblock("lhc", "大型强子对撞机", NoRecipeLogicMultiblockMachine::new)
            .nonYAxisRotation()
            .langValue("Large Hadron Collider")
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where('D', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('E', blocks(GTOBlocks.ELECTRON_PERMEABLE_AMPROSIUM_COATED_GLASS.get()))
                    .where('F', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('G', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('H', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('I', blocks(GTBlocks.FUSION_CASING.get()))
                    .where('J', blocks(GTOBlocks.MOLECULAR_COIL.get()))
                    .where('K', blocks(GTOBlocks.SHIELDED_ACCELERATOR.get()))
                    .where('L', blocks(RegistriesUtils.getBlock("gtceu:magnetic_neodymium_block")))
                    .where('M', blocks(RegistriesUtils.getBlock("gtceu:magnetic_samarium_block")))
                    .where('N', blocks(RegistriesUtils.getBlock("gtocore:energetic_netherite_block")))
                    .where('O', blocks(GTOBlocks.MAGTECH_CASING.get()))
                    .where('P', blocks(GTOBlocks.RADIATION_ABSORBENT_CASING.get()))
                    .where('Q', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('R', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('S', blocks(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE.get()))
                    .where('T', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('U', blocks(GCYMBlocks.CASING_ATOMIC.get()))
                    .where('V', blocks(GTOBlocks.OIL_GAS_TRANSPORTATION_PIPE_CASING.get()))
                    .where('W', blocks(Blocks.SNOW_BLOCK))
                    .where('X', blocks(Blocks.LIME_CONCRETE))
                    .where('Y', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition ENCAPSULATOR_EXECUTION_MODULE = multiblock("encapsulator_execution_module", "产线封装者执行模块", GTOMachineBuilder::encapsulatorModule)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .parallelizablePerfectOverclock()
            .perfectOCTooltips()
            .parallelizableTooltips()
            .laserTooltips()
            .block(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAA", "AAAAA", "AAAAA")
                    .aisle("BBBBB", "BBCBB", "BBBBB")
                    .where('A', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('B', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get())
                            .or(abilities(GTOPartAbility.ACCELERATE_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_ITEMS))
                            .or(abilities(EXPORT_ITEMS))
                            .or(abilities(IMPORT_FLUIDS))
                            .or(abilities(EXPORT_FLUIDS))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(2)))
                    .where('C', controller(blocks(definition.get())))
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/naquadah_reinforced_plant_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition PROCESSING_ENCAPSULATOR = multiblock("processing_encapsulator", "产线封装者", GTOMachineBuilder::encapsulator)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .block(GCYMBlocks.CASING_ATOMIC)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('B', blocks(GTOBlocks.DIMENSIONALLY_TRANSCENDENT_CASING.get()))
                    .where('C', blocks(GTOBlocks.GRAVITY_STABILIZATION_CASING.get()))
                    .where('D', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('E', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('F', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('G', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('H', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('I', blocks(GTOBlocks.QUARK_PIPE.get()))
                    .where('J', blocks(GTOBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where('K', blocks(GTOBlocks.ENHANCE_HYPER_MECHANICAL_CASING.get()))
                    .where('L', GTOPredicates.glass())
                    .where('M', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('N', blocks(GTOBlocks.SPACETIME_ASSEMBLY_LINE_UNIT.get()))
                    .where('O', blocks(GTOBlocks.HERMETIC_CASING_UXV.get()))
                    .where('P', blocks(GCYMBlocks.CASING_ATOMIC.get()))
                    .where('Q', blocks(GTOBlocks.MANIPULATOR.get()))
                    .where('R', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('S', blocks(GTOBlocks.SPACETIME_ASSEMBLY_LINE_CASING.get()))
                    .where('T', blocks(GCYMBlocks.CASING_ATOMIC.get())
                            .or(blocks(GTOMachines.MACHINE_ACCESS_TERMINAL.getBlock()).setMaxGlobalLimited(4).setMinGlobalLimited(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('U', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where('V', blocks(GTOBlocks.QUARK_EXCLUSION_CASING.get()))
                    .where('W', GTOPredicates.integralFramework())
                    .where('X', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('Y', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/atomic_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition GIANT_FLOTATION_TANK = multiblock("giant_flotation_tank", "巨型浮游选矿池", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getGiantFlotationTankTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTORecipeTypes.FLOTATING_BENEFICIATION_RECIPES)
            .block(GTOBlocks.HASTELLOY_N_75_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.HASTELLOY_N_75_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GCYMBlocks.CASING_CORROSION_PROOF.get()))
                    .where('D', blocks(GTOBlocks.ALUMINIUM_BRONZE_CASING.get()))
                    .where('E', blocks(GTOBlocks.HASTELLOY_N_75_CASING.get()))
                    .where('F', blocks(GTOBlocks.CALCIUM_OXIDE_CERAMIC_ANTI_METAL_CORROSION_MECHANICAL_BLOCK.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.WatertightSteel)))
                    .where('H', blocks(GTOBlocks.INCONEL_625_PIPE.get()))
                    .where('I', blocks(GTOBlocks.STABILIZED_NAQUADAH_WATER_PLANT_CASING.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.MaragingSteel300)))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Duranium)))
                    .where('L', blocks(GTOBlocks.HASTELLOY_N_75_GEARBOX.get()))
                    .where('M', blocks(GTOBlocks.HASTELLOY_N_75_PIPE.get()))
                    .where('N', blocks(GTOBlocks.FLOTATION_CELL.get()))
                    .where('O', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hastelloy_n_75_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition ENTROPY_FLUX_ENGINE = multiblock("entropy_flux_engine", "熵流引擎", TierCasingCrossRecipeMultiblockMachine.createParallel(m -> 1L << (2 * m.getCasingTier(GLASS_TIER)), GLASS_TIER))
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getEntropyFluxEngineTooltips().getSupplier())
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(
                    h -> h.addLines("由玻璃等级决定", "Determined by glass tier"),
                    c -> c.addCommentLines("公式 : 4^玻璃等级", "Formula: 4^(Glass Tier)")))
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTORecipeTypes.DECAY_HASTENER_RECIPES)
            .block(GTOBlocks.GRAVITON_FIELD_CONSTRAINT_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('A', blocks(GTOBlocks.FUSION_CASING_MK5.get()))
                    .where('B', blocks(GTOBlocks.FISSION_REACTOR_CASING.get()))
                    .where('C', blocks(GTOBlocks.PBI_RADIATION_RESISTANT_MECHANICAL_ENCLOSURE.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('E', blocks(GTOBlocks.STRONTIUM_CARBONATE_CERAMIC_RAY_ABSORBING_MECHANICAL_CUBE.get()))
                    .where('F', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('G', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('H', blocks(GTOBlocks.QUARK_PIPE.get()))
                    .where('I', blocks(GTOBlocks.ACCELERATED_PIPELINE.get()))
                    .where('J', GTOPredicates.glass())
                    .where('K', blocks(GTOBlocks.URUIUM_COIL_BLOCK.get()))
                    .where('L', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('M', blocks(GTOBlocks.GRAVITON_FIELD_CONSTRAINT_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('N', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/graviton_field_constraint_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition TRANSLIMINAL_OASIS = multiblock("transliminal_oasis", "超限绿洲", TierCasingCrossRecipeMultiblockMachine.createParallel(m -> 1L << (2 * m.getCasingTier(GLASS_TIER)), GLASS_TIER))
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getTransliminalOasisTooltips().getSupplier())
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(
                    h -> h.addLines("由玻璃等级决定", "Determined by glass tier"),
                    c -> c.addCommentLines("公式 : 4^玻璃等级", "Formula: 4^(Glass Tier)")))
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTORecipeTypes.GREENHOUSE_RECIPES)
            .recipeTypes(GTORecipeTypes.TREE_GROWTH_SIMULATOR_RECIPES)
            .block(GTOBlocks.BIOACTIVE_MECHANICAL_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.LEFT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('A', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('C', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('D', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('F', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('G', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Polytetrafluoroethylene)))
                    .where('I', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('J', blocks(GTOBlocks.BIOACTIVE_MECHANICAL_CASING.get()))
                    .where('K', blocks(GTBlocks.FILTER_CASING_STERILE.get()))
                    .where('L', GTOPredicates.glass())
                    .where('M', blocks(Blocks.PACKED_MUD))
                    .where('N', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('O', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('P', blocks(GTOBlocks.STRONTIUM_CARBONATE_CERAMIC_RAY_ABSORBING_MECHANICAL_CUBE.get()))
                    .where('Q', blocks(GTOBlocks.BOROSILICATE_GLASS.get()))
                    .where('R', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('S', blocks(GTOBlocks.FLOCCULATION_CASING.get()))
                    .where('T', blocks(GTOBlocks.BIOACTIVE_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('U', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('X', GTOPredicates.light())
                    .where('V', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/bioactive_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition NEUTRON_FORGING_ANVIL = multiblock("neutron_forging_anvil", "中子锻砧", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getNeutronForgingAnvilTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.FORGE_HAMMER_RECIPES)
            .recipeTypes(GTORecipeTypes.ISOSTATIC_PRESSING_RECIPES)
            .block(GTOBlocks.HYPER_MECHANICAL_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('B', blocks(GTOBlocks.RED_STEEL_CASING.get()))
                    .where('C', blocks(GTOBlocks.COMPRESSOR_CONTROLLER_CASING.get()))
                    .where('D', blocks(GTOBlocks.COMPRESSOR_PIPE_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Amprosium)))
                    .where('F', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('G', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('H', blocks(GTOBlocks.PVC_PLASTIC_MECHANICAL_HOUSING.get()))
                    .where('I', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('J', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('K', blocks(GTOBlocks.GRAVITY_STABILIZATION_CASING.get()))
                    .where('L', blocks(GTOBlocks.ENHANCE_HYPER_MECHANICAL_CASING.get()))
                    .where('M', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('N', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('O', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('P', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('Q', blocks(GTBlocks.HERMETIC_CASING_UV.get()))
                    .where('R', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTOMaterials.Amprosium)))
                    .where('S', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('T', blocks(GTOBlocks.AMPROSIUM_BOROSILICATE_GLASS.get()))
                    .where('U', blocks(GTOBlocks.PI_HIGH_TEMPERATURE_INSULATION_MECHANICAL_HOUSING.get()))
                    .where('V', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition DISSOLUTION_CORE = multiblock("dissolution_core", "溶解核心", CoilCrossRecipeMultiblockMachine.createCoilParallelEBF())
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getDissolutionCoreTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTORecipeTypes.DISSOLUTION_TREATMENT_RECIPES, GTORecipeTypes.DIGESTION_TREATMENT_RECIPES)
            .block(GTOBlocks.HYPER_MECHANICAL_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE.get()))
                    .where('B', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('C', blocks(GTOBlocks.STABILIZED_NAQUADAH_WATER_PLANT_CASING.get()))
                    .where('D', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('E', blocks(GTOBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('F', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('H', blocks(GTOBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('I', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('J', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('K', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Polytetrafluoroethylene)))
                    .where('M', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('N', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('O', blocks(GTOBlocks.PPS_CORROSION_RESISTANT_MECHANICAL_HOUSING.get()))
                    .where('P', blocks(GTOBlocks.CALCIUM_OXIDE_CERAMIC_ANTI_METAL_CORROSION_MECHANICAL_BLOCK.get()))
                    .where('Q', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('R', heatingCoils())
                    .where('S', blocks(GTOBlocks.PI_HIGH_TEMPERATURE_INSULATION_MECHANICAL_HOUSING.get()))
                    .where('T', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('U', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    // 快中子增殖堆
    public static final MultiblockMachineDefinition FAST_NEUTRON_BREEDER_REACTOR = multiblock("fast_neutron_breeder_reactor", "快中子增殖堆", FastNeutronBreederReactor::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .tooltipsSupplier(GTOMachineTooltips.INSTANCE.getFastNeutronBreederTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.FAST_NEUTRON_BREEDER_REACTOR_RECIPES)
            .block(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE)
            .recipeModifiers(RecipeModifier.NO_MODIFIER)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.LEFT)
                    .where('A', blocks(GTOBlocks.ABS_GREY_CASING.get()))
                    .where('B', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_SPINDLE.get()))
                    .where('C', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('D', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('E', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('F', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('G', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('H', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('I', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.BabbittAlloy)))
                    .where('K', blocks(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(blocks(GTOMachines.HEAT_SENSOR.get()).setMaxGlobalLimited(1).setMinGlobalLimited(0))
                            .or(blocks(GTOMachines.NEUTRON_SENSOR.get()).setMaxGlobalLimited(1).setMinGlobalLimited(0))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('L', blocks(GTOBlocks.RADIATION_ABSORBENT_CASING.get()))
                    .where('M', blocks(GTOBlocks.PBI_RADIATION_RESISTANT_MECHANICAL_ENCLOSURE.get()))
                    .where('N', blocks(GTOBlocks.FISSION_REACTOR_CASING.get()))
                    .where('O', blocks(GTBlocks.CASING_LAMINATED_GLASS.get()))
                    .where('P', blocks(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE.get()))
                    .where('Q', blocks(GTOBlocks.FISSION_FUEL_COMPONENT.get()))
                    .where('R', blocks(GTOBlocks.COBALT_OXIDE_CERAMIC_STRONG_THERMALLY_CONDUCTIVE_MECHANICAL_BLOCK.get()))
                    .where('S', blocks(GTBlocks.HERMETIC_CASING_ZPM.get()))
                    .where('T', blocks(GTOBlocks.FISSION_COOLER_COMPONENT.get()))
                    .where('U', controller(blocks(definition.get())))
                    .where('V', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenCarbide)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/boron_carbide_ceramic_radiation_resistant_mechanical_cube"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    // 中子辐照室
    public static final MultiblockMachineDefinition NEUTRON_IRRADIATION_CHAMBER = multiblock("neutron_irradiation_chamber", "中子辐照室", NoRecipeLogicMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.LEFT)
                    .where('A', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('B', blocks(GTOBlocks.FISSION_REACTOR_CASING.get()))
                    .where('C', blocks(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE.get()))
                    .where('E', blocks(GTOBlocks.STRONTIUM_CARBONATE_CERAMIC_RAY_ABSORBING_MECHANICAL_CUBE.get()))
                    .where('F', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('G', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('H', blocks(GTOBlocks.PBI_RADIATION_RESISTANT_MECHANICAL_ENCLOSURE.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('J', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.DepletedUraniumAlloy)))
                    .where('L', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/boron_carbide_ceramic_radiation_resistant_mechanical_cube"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    // 生命熔炉
    public static final MultiblockMachineDefinition LIFE_FORGE = multiblock("life_forge", "生命熔炉", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getLifeForgeTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .combinedRecipeTooltips()
            .recipeTypes(GTORecipeTypes.LIFE_FORGE)
            .block(GTOBlocks.SPS_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.LEFT) // definition
                    .where('A', blocks(GTOBlocks.SPS_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('C', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('D', blocks(GTOBlocks.BIOACTIVE_MECHANICAL_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Mithril)))
                    .where('F', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('G', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('H', GTOPredicates.light())
                    .where('I', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('J', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('K', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('L', heatingCoils())
                    .where('M', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('N', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('O', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('P', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/sps_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    // 双子星封装系统
    public static final MultiblockMachineDefinition GEMINI_CONTAINMENT_SYSTEM = multiblock("gemini_containment_system", "双子星封装系统", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getGeminiContainmentSystemTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTORecipeTypes.PACKER_RECIPES, GTORecipeTypes.UNPACKER_RECIPES)
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.ABS_GREEN_CASING.get()))
                    .where('B', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('C', blocks(GTOBlocks.ABS_RED_CASING.get()))
                    .where('D', blocks(GTOBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('E', blocks(GTOBlocks.ENGINEERING_MECHANICAL_CASING.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('G', blocks(GTOBlocks.PEEK_WEAR_RESISTANT_MECHANICAL_HOUSING.get()))
                    .where('H', GTOPredicates.light())
                    .where('I', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('J', blocks(GTOBlocks.INDUSTRIAL_FRAMELESS_GLASS.get()))
                    .where('K', heatingCoils())
                    .where('L', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('M', blocks(GTOBlocks.MACHINE_CASING_CIRCUIT_ASSEMBLY_LINE.get()))
                    .where('N', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('O', blocks(GTBlocks.CASING_TITANIUM_GEARBOX.get()))
                    .where('P', blocks(GCYMBlocks.CASING_VIBRATION_SAFE.get()))
                    .where('Q', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('R', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('S', blocks(GTOBlocks.INCONEL_625_GEARBOX.get()))
                    .where('T', blocks(GTOBlocks.LASER_CASING.get()))
                    .where('U', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('V', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition DIGITAL_MINER = multiblock("digital_miner", "数字型采矿机", DigitalMiner::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getDigitalMinerTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getDigitalMinerTooltips().getSupplier())
            .block(GTBlocks.CASING_STEEL_SOLID)
            .recipeTypes(DIGITAL_MINER_RECIPE)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAA", "CDCDC", "C C C", "  C  ", " CCC ", "     ", "     ", "     ")
                    .aisle("AEEEA", "D   D", "     ", "     ", "     ", " CDC ", "     ", "     ")
                    .aisle("AEFEA", "D G D", "  F  ", "  F  ", "  F  ", "  F  ", " CDC ", "  E  ")
                    .aisle("AEEEA", "D   D", "     ", "     ", "     ", "     ", " CCC ", "     ")
                    .aisle("AABAA", "CDDDC", "C   C", "     ", "     ", "     ", "     ", "     ")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS))
                            .or(abilities(EXPORT_ITEMS)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('E', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('F', blocks(GTBlocks.CASING_STEEL_GEARBOX.get()))
                    .where('G', GTOPredicates.integralFramework())
                    .where(' ', any())
                    .build())
            .renderer(DigitalMinerRenderer::new)
            .hasTESR(true)
            .register();

    public static final MultiblockMachineDefinition KERR_NEWMAN_HOMOGENIZER = multiblock("kerr_newman_homogenizer", "克尔-纽曼均质仪", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getKerrNewmanHomogenizerTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            // .multipleRecipesTooltips()
            .recipeTypes(GTORecipeTypes.MIXER_RECIPES)
            .block(GTOBlocks.DIMENSION_INJECTION_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.ENHANCE_HYPER_MECHANICAL_CASING.get()))
                    .where('B', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('C', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('D', blocks(GTOBlocks.ZIRCONIA_CERAMIC_HIGH_STRENGTH_BENDING_RESISTANCE_MECHANICAL_BLOCK.get()))
                    .where('E', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where('G', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('I', blocks(GTOBlocks.OIL_GAS_TRANSPORTATION_PIPE_CASING.get()))
                    .where('J', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('K', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('L', blocks(GTOBlocks.GRAVITY_STABILIZATION_CASING.get()))
                    .where('M', blocks(GTOBlocks.INDUSTRIAL_FRAMELESS_GLASS.get()))
                    .where('N', blocks(GTOBlocks.SHIELDED_ACCELERATOR.get()))
                    .where('O', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('P', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('Q', blocks(GTOBlocks.BIOACTIVE_MECHANICAL_CASING.get()))
                    .where('R', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('S', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_SPINDLE.get()))
                    .where('T', blocks(GTOBlocks.ACCELERATOR_ELECTROMAGNETIC_COIL_CONSTRAINT_CASING_UHV.get()))
                    .where('U', blocks(GTOBlocks.EXTREME_DENSITY_CASING.get()))
                    .where('V', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('W', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenCarbide)))
                    .where('X', blocks(GTOBlocks.PPS_CORROSION_RESISTANT_MECHANICAL_HOUSING.get()))
                    .where('Y', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('Z', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('[', blocks(GCYMBlocks.CASING_ATOMIC.get()))
                    .where('\\', blocks(GTOBlocks.RADIATION_ABSORBENT_CASING.get()))
                    .where(']', blocks(GTOBlocks.FUSION_CASING_MK4.get()))
                    .where('^', blocks(GTOBlocks.ADVANCED_FUSION_COIL.get()))
                    .where('_', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('`', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Trinium)))
                    .where('a', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('b', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/dimension_injection_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition LARGE_STEAM_SOLAR_BOILER = multiblock("large_steam_solar_boiler", "大型蒸汽太阳能锅炉", LargeSteamSolarBoilerMachine::new)
            .nonYAxisRotation()
            .addTooltipsFromClass(LargeSteamSolarBoilerMachine.class)
            .tooltips(GTOMachineStories.INSTANCE.getLargeSteamSolarBoilerTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getLargeSteamSolarBoilerTooltips().getSupplier())
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .block(GTBlocks.STEEL_HULL)
            .pattern((definition) -> FactoryBlockPattern.start(definition)
                    .aisle("aaaaa").aisle("abbba").aisle("abbba").aisle("abbba").aisle("ab~ba")
                    .where('a', blocks(GTBlocks.STEEL_HULL.get())
                            .or(abilities(EXPORT_FLUIDS_1X))
                            .or(abilities(IMPORT_FLUIDS_1X)))
                    .where('b', blocks(GTOBlocks.SOLAR_HEAT_COLLECTOR_PIPE_CASING.get()))
                    .where('~', controller(blocks(definition.get())))
                    .build())
            .shapeInfos((controller) -> {
                var minBuilder = MultiblockShapeInfo.builder()
                        .aisle("ac~da")
                        .aisle("abbba")
                        .aisle("abbba")
                        .aisle("abbba")
                        .aisle("aaaaa")
                        .where('a', GTBlocks.STEEL_HULL)
                        .where('b', GTOBlocks.SOLAR_HEAT_COLLECTOR_PIPE_CASING)
                        .where('~', MultiBlockH.LARGE_STEAM_SOLAR_BOILER, Direction.NORTH)
                        .where('c', GTMachines.FLUID_IMPORT_HATCH[GTValues.LV], Direction.NORTH)
                        .where('d', GTMachines.FLUID_EXPORT_HATCH[GTValues.LV], Direction.NORTH);
                MultiblockShapeInfo minShape = minBuilder.build();
                final int maxL = 63, maxR = 63, maxB = 125;
                final int width = maxL + maxR + 1;
                String controllerRowBuilder = "a".repeat(maxL) +
                        '~' +
                        "a".repeat(maxR);
                StringBuilder middleRowBuilder = new StringBuilder(width);
                middleRowBuilder.append('a');
                middleRowBuilder.append("b".repeat(width - 2));
                middleRowBuilder.append('a');
                String boundaryRow = String.valueOf('a').repeat(width);
                var maxBuilder = MultiblockShapeInfo.builder()
                        .aisle(controllerRowBuilder);
                for (int i = 0; i < maxB; i++) {
                    maxBuilder.aisle(middleRowBuilder.toString());
                }
                maxBuilder.aisle(boundaryRow)
                        .where('~', controller.getBlock())
                        .where('a', GTBlocks.STEEL_HULL.get())
                        .where('b', GTOBlocks.SOLAR_HEAT_COLLECTOR_PIPE_CASING.get());
                MultiblockShapeInfo maxShape = maxBuilder.build();
                return List.of(minShape, maxShape);
            })
            .workableCasingRenderer(GTCEu.id("block/casings/steam/steel/side"), GTCEu.id("block/multiblock/multiblock_tank"))
            .register();

    // 地幔粉碎者
    public static final MultiblockMachineDefinition MANTLE_CRUSHER = multiblock("mantle_crusher", "地层撕裂者", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getMantleCrusherTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTORecipeTypes.CRUSHER_RECIPES, GTRecipeTypes.ROCK_BREAKER_RECIPES)
            .block(GTOBlocks.NAQUADAH_ALLOY_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" AAAABCCCBAAAA ", "      CCC      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("AAAAAEEEEEAAAAA", "  AAABCCCBAAA  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "               ", "               ", "               ", "               ")
                    .aisle("AAAAABBBBBAAAAA", " AGAAEEEEEAAGA ", " FGAABBBBBAAGF ", " FGG       GGF ", " FGG       GGF ", " FGG       GGF ", " FGG       GGF ", " FFH       HFF ", "  GG       GG  ", "               ", "               ", "               ")
                    .aisle("AAAAAGIGIGAAAAA", " AAAAGIGIGAAAA ", "  AAAGIGIGAAA  ", "  GG BBBBB GG  ", "  GG       GG  ", "  GG       GG  ", "  GGG     GGG  ", "  HFH     HFH  ", "  GGG     GGG  ", "               ", "               ", "               ")
                    .aisle("AAAAAIGGGIAAAAA", " AAAAIJJJIAAAA ", "  AAAIGGGIAAA  ", "    BKBBBKB    ", "     KBBBK     ", "     K   K     ", "   GGG   GGG   ", "   HFH   HFH   ", "   GGG   GGG   ", "       F       ", "       F       ", "       F       ")
                    .aisle("BEBGIGGGGGIGBEB", " BEGIJLLLJIGEB ", "  BGIGGGGGIGB  ", "   BKB   BKB   ", "    KB   BK    ", "    K     K    ", "    GGG GGG    ", "    HFH HFH    ", "    GGG GGG    ", "      FFF      ", "      HHH      ", "      FFF      ")
                    .aisle("CEBIGG   GGIBEC", "CCEIJL   LJIECC", "  BIGG   GGIB  ", "   BB     BB   ", "    B     B    ", "               ", "     GGIGG     ", "     HFHFH     ", "     GGIGG     ", "     FFFFF     ", "     HFFFH     ", "     FFFFF     ")
                    .aisle("CEBGGG   GGGBEC", "CCEGJL M LJGECC", "  BGGG N GGGB  ", "   BB  N  BB   ", "    B  N  B    ", "       N       ", "      INI      ", "      HNH      ", "      INI      ", "    FFFNFFF    ", "    FHFNFHF    ", "    FFFFFFF    ")
                    .aisle("CEBIGG   GGIBEC", "CCEIJL   LJIECC", "  BIGG   GGIB  ", "   BB     BB   ", "    B     B    ", "               ", "     GGIGG     ", "     HFHFH     ", "     GGIGG     ", "     FFFFF     ", "     HFFFH     ", "     FFFFF     ")
                    .aisle("BEBGIGGGGGIGBEB", " BEGIJLLLJIGEB ", "  BGIGGGGGIGB  ", "   BKB   BKB   ", "    KB   BK    ", "    K     K    ", "    GGG GGG    ", "    HFH HFH    ", "    GGG GGG    ", "      FFF      ", "      HHH      ", "      FFF      ")
                    .aisle("AAAAAIGGGIAAAAA", " AAAAIJJJIAAAA ", "  AAAIGGGIAAA  ", "    BKBBBKB    ", "     KBBBK     ", "     K   K     ", "   GGG   GGG   ", "   HFH   HFH   ", "   GGG   GGG   ", "       F       ", "       F       ", "       F       ")
                    .aisle("AAAAAGIGIGAAAAA", " AAAAGIGIGAAAA ", "  AAAGIGIGAAA  ", "  GG BBBBB GG  ", "  GG       GG  ", "  GG       GG  ", "  GGG     GGG  ", "  HFH     HFH  ", "  GGG     GGG  ", "               ", "               ", "               ")
                    .aisle("AAAAABBBBBAAAAA", " AGAAEEEEEAAGA ", " FGAABBBBBAAGF ", " FGG       GGF ", " FGG       GGF ", " FGG       GGF ", " FGG       GGF ", " FFH       HFF ", "  GG       GG  ", "               ", "               ", "               ")
                    .aisle("AAAAAEEEEEAAAAA", "  AAABCCCBAAA  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "  F         F  ", "               ", "               ", "               ", "               ")
                    .aisle(" AAAABCCCBAAAA ", "      CDC      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .where('A', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadah)))
                    .where('C', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(IMPORT_FLUIDS))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', controller(blocks(definition.get())))
                    .where('E', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('F', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('G', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('H', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('I', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('J', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_MECHANICAL_CASING.get()))
                    .where('K', blocks(GTOBlocks.IRIDIUM_GEARBOX.get()))
                    .where('L', blocks(GTOBlocks.IRIDIUM_PIPE_CASING.get()))
                    .where('M', blocks(GTOBlocks.MACHINE_CASING_GRINDING_HEAD.get()))
                    .where('N', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_SPINDLE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/machines/rock_crusher"))
            .register();

    // 巨型烧结阵列
    public static final MultiblockMachineDefinition GIANT_SINTERING_ARRAY = multiblock("giant_sintering_array", "巨型烧结阵列",
            CoilTieredCasingMultiblockMachine.createEBFParallel(m -> 1L << (2 * (m.getCasingTier(GLASS_TIER) - 1)), true, GLASS_TIER))
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getGiantSinteringArrayTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(
                    h -> h.addLines("由玻璃等级决定", "Determined by glass tier"),
                    c -> c.addCommentLines("公式 : 4^玻璃等级", "Formula: 4^(Glass Tier)")))
            .tooltipsText("线圈温度越高，运行速度越快", "The higher the coil temperature, the faster the operation speed")
            .recipeModifiers((machine, recipe) -> RecipeModifierFunction.recipeReduction(recipe, 1, Math.log(900) / Math.log(((ICoilMachine) machine).getTemperature())), RecipeModifierFunction.OVERCLOCKING)
            .recipeTypes(GTORecipeTypes.SINTERING_FURNACE_RECIPES)
            .block(GTOBlocks.NAQUADAH_ALLOY_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('B', blocks(GTOBlocks.COBALT_OXIDE_CERAMIC_STRONG_THERMALLY_CONDUCTIVE_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('D', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('E', blocks(GTOBlocks.BLAZE_CASING.get()))
                    .where('F', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where('G', GTOPredicates.glass())
                    .where('H', heatingCoils())
                    .where('I', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('J', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('K', blocks(GTOBlocks.IRIDIUM_GEARBOX.get()))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahEnriched)))
                    .where('M', controller(blocks(definition.get())))
                    .where('N', blocks(GTOBlocks.IRIDIUM_PIPE_CASING.get()))
                    .where('O', abilities(MUFFLER))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
    public static final MultiblockMachineDefinition MEGA_RESOURCE_MINING = multiblock("mega_se_mining", "巨型太空电梯资源采集模块", (h) -> new MegaSpaceElevatorModuleMachine(h, true))
            .langValue("Mega Space Elevator Mining")
            .nonYAxisRotation()
            .laserTooltips()
            .specialParallelizableTooltips()
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(h -> h.addLines("8^(动力模块等级-1)", "8^(Power Module tier - 1)")))
            .recipeTypes(GTORecipeTypes.MINER_MODULE_RECIPES, GTORecipeTypes.DRILLING_MODULE_RECIPES)
            .block(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("ABBBA", "CCCCC", "CFFFC", "CFJFC", "CFFFC", "CCCCC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("ABBBA", "CCCCC", "CG GC", "CHJHC", "CGKGC", "CCCCC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "EHJHE", "DGKGD", "CDDDC")
                    .aisle("ABBBA", "CCICC", "CFFFC", "CFJFC", "CFFFC", "CCCCC")
                    .where('A', blocks(GTOBlocks.MODULE_CONNECTOR.get()))
                    .where('B', blocks(GTOBlocks.SPACE_ELEVATOR_MODULE_BASE.get()))
                    .where('C', blocks(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('E', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('F', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('G', heatingCoils())
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Amprosium)))
                    .where('I', controller(blocks(definition.get())))
                    .where('J', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_SPINDLE.get()))
                    .where('K', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/space_elevator_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition MEGA_ASSEMBLER = multiblock("mega_se_assembler", "巨型太空电梯组装模块", (h) -> new MegaSpaceElevatorModuleMachine(h, true))
            .langValue("Mega Space Elevator Assembler")
            .nonYAxisRotation()
            .specialParallelizableTooltips()
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(h -> h.addLines("8^(动力模块等级-1)", "8^(Power Module tier - 1)")))
            .laserTooltips()
            .recipeTypes(GTORecipeTypes.ASSEMBLER_MODULE_RECIPES)
            .block(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("ABBBA", "CCCCC", "CFFFC", "CFFFC", "CFFFC", "CCCCC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "DHJHD", "DG GD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "DHJHD", "DG GD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "EG GE", "EHJHE", "EG GE", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "EG GE", "EHJHE", "EG GE", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "DHJHD", "DG GD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "DHJHD", "DG GD", "CDDDC")
                    .aisle("ABBBA", "CCCCC", "CG GC", "CHJHC", "CG GC", "CCCCC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "DHJHD", "DG GD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "DHJHD", "DG GD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "EG GE", "EHJHE", "EG GE", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "EG GE", "EHJHE", "EG GE", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "DHJHD", "DG GD", "CDDDC")
                    .aisle("BBBBB", "CDDDC", "DG GD", "DHJHD", "DG GD", "CDDDC")
                    .aisle("ABBBA", "CCICC", "CFFFC", "CFFFC", "CFFFC", "CCCCC")
                    .where('A', blocks(GTOBlocks.MODULE_CONNECTOR.get()))
                    .where('B', blocks(GTOBlocks.SPACE_ELEVATOR_MODULE_BASE.get()))
                    .where('C', blocks(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('E', GTOPredicates.glass())
                    .where('F', blocks(GTOBlocks.PRECISION_PROCESSING_MECHANICAL_CASING.get()))
                    .where('G', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('H', blocks(GTOBlocks.SPACETIME_ASSEMBLY_LINE_UNIT.get()))
                    .where('I', controller(blocks(definition.get())))
                    .where('J', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/space_elevator_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();
    public static final MultiblockMachineDefinition MEGA_ASSEMBLY_LINE = multiblock("mega_se_assembly_line", "太空电梯装配线", (h) -> new MegaSpaceElevatorModuleMachine(h, true, m -> ((SpaceElevatorModuleMachine) m).getSpaceElevatorTier() > 7 ? (int) Math.pow(2, ((SpaceElevatorModuleMachine) m).getSpaceElevatorMachine().getCasingTier(POWER_MODULE_TIER) - 1) : 0))
            .langValue("Mega Space Elevator Assembly Line")
            .nonYAxisRotation()
            .specialParallelizableTooltips()
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(h -> h.addLines("2^(动力模块等级-1)", "2^(Power Module tier - 1)")))
            .laserTooltips()
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("ABBBA", "CCCCC", "CFFFC", "CFFFC", "CFFFC", "CCCCC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CHHHC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CCCCC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CHHHC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CCCCC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CHHHC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CCCCC")
                    .aisle("ABBBA", "DCCCC", "EGJGE", "E   E", "EGJGE", "CHHHC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CCCCC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CHHHC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CCCCC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CHHHC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CCCCC")
                    .aisle("BBBBB", "DFFFC", "EGJGE", "E   E", "EGJGE", "CHHHC")
                    .aisle("ABBBA", "CCICC", "CFFFC", "CFFFC", "CFFFC", "CCCCC")
                    .where('A', blocks(GTOBlocks.MODULE_CONNECTOR.get()))
                    .where('B', blocks(GTOBlocks.SPACE_ELEVATOR_MODULE_BASE.get()))
                    .where('C', blocks(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTMachines.ITEM_IMPORT_BUS[GTValues.ULV].get()))
                    .where('E', blocks(GTOBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where('F', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('G', blocks(GTOBlocks.SPACETIME_ASSEMBLY_LINE_UNIT.get()))
                    .where('H', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('I', controller(blocks(definition.get())))
                    .where('J', blocks(GTOBlocks.SPACETIME_ASSEMBLY_LINE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/space_elevator_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    // 智能筛选中枢
    public static final MultiblockMachineDefinition SMART_FILTERING_HUB = multiblock("smart_siftering_hub", "智能筛选中枢",
            TierCasingCrossRecipeMultiblockMachine.createParallel(m -> 1L << (2 * m.getCasingTier(GLASS_TIER)), GLASS_TIER))
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getSmartSifteringHubTooltips().getSupplier())
            .multipleRecipesTooltips()
            .laserTooltips()
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(
                    h -> h.addLines("由玻璃等级决定", "Determined by glass tier"),
                    c -> c.addCommentLines("公式 : 4^玻璃等级", "Formula: 4^(Glass Tier)")))
            .recipeTypes(GTORecipeTypes.SIFTER_RECIPES)
            .block(GTOBlocks.NAQUADAH_ALLOY_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("     A AAA     ", "     A A       ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "       A A     ", "     AAA A     ")
                    .aisle("   A BBBBBAA   ", "   A ACACC     ", "     ACACC     ", "     ACCCC     ", "     ACCCC     ", "     CCACC     ", "     CCACC     ", "     CCACA     ", "     CCACA     ", "     CCACA     ", "     CCACA     ", "     CCACA     ", "     CCACA     ", "     CCACA     ", "     CCACA     ", "     CCACA     ", "     CCACA A   ", "   AABBBBB A   ")
                    .aisle("   BBBBBBBBBA  ", "   AC     CC   ", "   AC  F  CC   ", "   AC     CC   ", "   ACF    CC   ", "   AC  H  CC   ", "   AC  O  CC   ", "   CC  O HCC   ", "   CC  O  CC   ", "   CC  O  CA   ", "   CC  O  CA   ", "   CC  O  CA   ", "   CC  O  CA   ", "   CC  O  CA   ", "   CC  O  CA   ", "   CC  O  CA   ", "   CC  O  CA   ", "  ABBBBBBBBB   ")
                    .aisle(" ABBBBBBBBBBBA ", " AAIII   IIIC  ", "  A    F    C  ", "  A         C  ", "  A  F      C  ", "  A    H    C  ", "  AE   O JJJC  ", "  A    O H  C  ", "  A    O JJJC  ", "  CJJJ O   GC  ", "  C    O    C  ", "  CJJJ O    A  ", "  C    O    A  ", "  C    O    A  ", "  C    O    A  ", "  C    O    A  ", "  CIII O IIIAA ", " ABKKKKKKKKKBA ")
                    .aisle("  BBBBBBBBBBBA ", "  CIII   IIIC  ", "  C I  F  I C  ", "  C L     L C  ", "  C LF    L C  ", "  C L  H  L C  ", "  CEI  O JIJC  ", "  C I  O HI C  ", "  E I  O JIJC  ", "  CJIJ O  IGC  ", "  C I  O  I C  ", "  CJIJ O  I G  ", "  C L  O  L C  ", "  C L  O  L C  ", "  C L  O  L C  ", "  C I  O  I C  ", "  CIII O IIIC  ", " ABKKKKKKKKKB  ")
                    .aisle("ABBBBBBBBBBBBBA", "AA III   III C ", " A     F     C ", " A           C ", " A   F       C ", " A     H     C ", " A E   O JJJ C ", " A     O H   C ", " AE    O JJJ C ", " A JJJ O   G C ", " AFFFFFO     C ", " C JJJ O    GC ", " C     O     C ", " C     OHHHHHA ", " C     O     A ", " C     O     A ", " C III O III AA", "ABBKKKKKKKKKBBA")
                    .aisle(" BBBBBBBBBBBBBA", " C           C ", " C     F     C ", " C           C ", " C   F       C ", " C     H     C ", " C E   O     C ", " C     O H   C ", " CE    O     C ", " C     O   G C ", " C     O     C ", " C     O    GC ", " C     O     C ", " C     O     C ", " C     O     C ", " C     O     C ", " C     O     C ", "ABBKKKKKKKKKBB ")
                    .aisle("ABBBBBBBBBBBBBA", "AAQQQQQMDDDDDAA", " AQQQQQMDDDDDA ", " AQQQQQMDDDDDA ", " AQQQQQMDDDDDA ", " AQQQQQMDDDDDA ", " AQQQQQMDDDDDA ", " AQQQQQMDDDDDA ", " AQQQQQMDDDDDA ", " AQQQQQMDDDDDA ", " AQQQQQMDDDDDA ", " AQQQQQMDDDDDA ", " AFFFFFMFFFFFA ", " C     M     C ", " C     M     C ", " AHHHHHMHHHHHA ", "AA     M     AA", "ABBKKKKPKKKKBBA")
                    .aisle("ABBBBBBBBBBBBB ", " C           C ", " C     F     C ", " C           C ", " C       F   C ", " C     H     C ", " C     N   E C ", " C   H N     C ", " C     N    EC ", " C G   N     C ", " C     N     C ", " CG    N     C ", " C     N     C ", " C     N     C ", " C     N     C ", " C     N     C ", " C     N     C ", " BBKKKKKKKKKBBA")
                    .aisle("ABBBBBBBBBBBBBA", " C III   III AA", " C     F     A ", " C           A ", " C       F   A ", " C     H     A ", " C JJJ N   E A ", " C   H N     A ", " C JJJ N    EA ", " C G   N JJJ A ", " C     NFFFFFA ", " CG    N JJJ C ", " C     N     C ", " AHHHHHN     C ", " A     N     C ", " A     N     C ", "AA III N III C ", "ABBKKKKKKKKKBBA")
                    .aisle(" ABBBBBBBBBBB  ", "  CIII   IIIC  ", "  C I  F  I C  ", "  C L     L C  ", "  C L    FL C  ", "  C L  H  L C  ", "  CJIJ N  IEC  ", "  C IH N  I C  ", "  CJIJ N  I E  ", "  CGI  N JIJC  ", "  C I  N  I C  ", "  G I  N JIJC  ", "  C L  N  L C  ", "  C L  N  L C  ", "  C L  N  L C  ", "  C I  N  I C  ", "  CIII N IIIC  ", "  BKKKKKKKKKBA ")
                    .aisle(" ABBBBBBBBBBBA ", "  CIII   IIIAA ", "  C    F    A  ", "  C         A  ", "  C      F  A  ", "  C    H    A  ", "  CJJJ N   EA  ", "  C  H N    A  ", "  CJJJ N    A  ", "  CG   N JJJC  ", "  C    N    C  ", "  A    N JJJC  ", "  A    N    C  ", "  A    N    C  ", "  A    N    C  ", "  A    N    C  ", " AAIII N IIIC  ", " ABKKKKKKKKKBA ")
                    .aisle("  ABBBBBBBBB   ", "   CC     CA   ", "   CC  F  CA   ", "   CC     CA   ", "   CC    FCA   ", "   CC  H  CA   ", "   CC  N  CA   ", "   CCH N  CC   ", "   CC  N  CC   ", "   AC  N  CC   ", "   AC  N  CC   ", "   AC  N  CC   ", "   AC  N  CC   ", "   AC  N  CC   ", "   AC  N  CC   ", "   AC  N  CC   ", "   AC  N  CC   ", "   BBBBBBBBBA  ")
                    .aisle("   AABBBBB A   ", "     CCACA A   ", "     CCACA     ", "     CCCCA     ", "     CCCCA     ", "     CCACC     ", "     CCACC     ", "     ACACC     ", "     ACACC     ", "     ACACC     ", "     ACACC     ", "     ACACC     ", "     ACACC     ", "     ACACC     ", "     ACACC     ", "     ACACC     ", "   A ACACC     ", "   A BBBBBAA   ")
                    .aisle("     AAA A     ", "       A A     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "     A A       ", "     A AAA     ")
                    .where('A', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('B', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('C', GTOPredicates.glass())
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenSteel)))
                    .where('E', blocks(GTOBlocks.IRIDIUM_GEARBOX.get()))
                    .where('F', blocks(GTOBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('G', blocks(GTOBlocks.INCONEL_625_GEARBOX.get()))
                    .where('H', blocks(GTOBlocks.INCONEL_625_CASING.get()))
                    .where('I', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('J', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('K', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('L', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('M', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('N', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Quantanium)))
                    .where('O', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyC276)))
                    .where('P', controller(blocks(definition.get())))
                    .where('Q', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Europium)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/cleanroom"))
            .register();

    public static final MultiblockMachineDefinition ELECTROPLATING_BATH = multiblock("electroplating_bath", "电镀池", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.ELECTROPLATING_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getElectroplatingBathTooltips().getSupplier())
            .block(GTBlocks.CASING_PTFE_INERT)
            .recipeModifier(RecipeModifierFunction.GCYM_OVERCLOCKING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAA", "AAAAAAA", "BBBBBBB", "B     B", "BBBBBBB")
                    .aisle("ADDDDDA", "A     A", "BEEEEEB", "C     C", "BFFFFFB")
                    .aisle("ADDDDDA", "ADDDDDA", "BBGBGBB", "BBGBGBB", "BBBBBBB")
                    .aisle("ADDDDDA", "A     A", "BEEEEEB", "C     C", "BFFFFFB")
                    .aisle("AAAHAAA", "AAAAAAA", "BBBBBBB", "B     B", "BBBBBBB")
                    .where('A', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(autoGCYMAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH))
                            .or(autoAbilities(true, false, true)))
                    .where('B', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Polytetrafluoroethylene)))
                    .where('D', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('E', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('F', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('G', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    public static final MultiblockMachineDefinition GIANT_ELECTROCHEMICAL_WORKSTATION = multiblock("giant_electrochemical_workstation", "巨型电化学工作站", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .allRotation()
            .tooltips(GTOMachineStories.INSTANCE.getGiantElectrochemicalWorkstationTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTORecipeTypes.ELECTROPLATING_RECIPES, GTORecipeTypes.ELECTROLYZER_RECIPES)
            .block(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING)
            .recipeModifier(RecipeModifierFunction.GCYM_OVERCLOCKING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('B', blocks(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('D', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('F', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('G', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('H', heatingCoils())
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Polytetrafluoroethylene)))
                    .where('J', blocks(GTOBlocks.CALCIUM_OXIDE_CERAMIC_ANTI_METAL_CORROSION_MECHANICAL_BLOCK.get()))
                    .where('K', blocks(GTOBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('L', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('M', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('N', blocks(GTOBlocks.IRIDIUM_PIPE_CASING.get()))
                    .where('O', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/space_elevator_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_chemical_bath"))
            .register();

    // 雾化冷凝器
    public static final MultiblockMachineDefinition ATOMIZING_CONDENSER = multiblock("atomizing_condenser", "雾化冷凝器", TierCasingParallelMultiblockMachine.createParallel(m -> (4 * (m.getCasingTier(BlockMap.hermetic_casing))), false, BlockMap.hermetic_casing))
            .nonYAxisRotation()
            .specialParallelizableTooltips()
            .tooltips(GTOMachineStories.INSTANCE.getAtomizingCondenserTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.ATOMIZATION_CONDENSATION_RECIPES)
            .recipeModifier(RecipeModifierFunction.GCYM_OVERCLOCKING)
            .block(GTBlocks.CASING_ALUMINIUM_FROSTPROOF)
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(h -> h.addLines("(密封机械方块等级)×4", "(Hermetic Mechanical Casing tier)×4")))
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" AAA ", " EBE ", " BBB ", " BBB ", " BBB ", " BBB ", " AAA ")
                    .aisle("AA AA", "ABBBA", "ABDBA", "ABDBA", "ABDBA", "ABHBA", "AAHAA")
                    .aisle(" AAA ", " BCB ", " BBB ", " BBB ", " BBB ", " BBB ", " AAA ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('B', blocks(GTBlocks.CASING_ALUMINIUM_FROSTPROOF.get())
                            .or(autoGCYMAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', hermeticCasing())
                    .where('E', abilities(MUFFLER))
                    .where('H', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_frost_proof"), GTCEu.id("block/multiblock/vacuum_freezer"))
            .register();

    // 热压成型机
    public static final MultiblockMachineDefinition THERMO_PRESS = multiblock("thermo_press", "热压成型机", TierCasingMultiblockMachine.createMachine(BlockMap.hermetic_casing))
            .nonYAxisRotation()
            .parallelizableTooltips()
            .tooltips(GTOMachineStories.INSTANCE.getThermoPressTooltips().getSupplier())
            .tooltips(NewDataAttributes.TIME_COST_MULTIPLY.create(h -> h.addLines("0.9^(密封机械方块等级)", "0.9^(Hermetic Mechanical Casing tier)")))
            .recipeTypes(GTORecipeTypes.THERMO_PRESSING_RECIPES)
            .recipeModifier((m, r) -> {
                if (m instanceof ITierCasingMachine tm) {
                    r.duration = (int) Math.max(Math.pow(0.9, tm.getCasingTier(BlockMap.hermetic_casing)), 1);
                }
                return r;
            })
            .block(GTOBlocks.COMPRESSOR_CONTROLLER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAA", "ABBBA", "ABBBA", "ABBBA", "ACCCA")
                    .aisle(" BBB ", "BDDDB", "BDEDB", "BDDDB", " BBB ")
                    .aisle(" BBB ", "B   B", "B   B", "B   B", " BBB ")
                    .aisle(" BBB ", "B   B", "B   B", "B   B", " BBB ")
                    .aisle(" BBB ", "B   B", "B   B", "B   B", " BBB ")
                    .aisle(" BBB ", "BDDDB", "BDEDB", "BDDDB", " BBB ")
                    .aisle("AAAAA", "ABBBA", "ABEBA", "ABBBA", "AAAAA")
                    .aisle(" FEF ", " FEF ", " FEF ", " FFF ", "     ")
                    .aisle(" FFF ", " FGF ", " FFF ", " FFF ", "     ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlueSteel)))
                    .where('B', blocks(GTBlocks.CASING_TITANIUM_STABLE.get()))
                    .where('C', blocks(GTBlocks.CASING_STAINLESS_STEEL_GEARBOX.get()))
                    .where('D', hermeticCasing())
                    .where('E', blocks(GTOBlocks.COMPRESSOR_CONTROLLER_CASING.get()))
                    .where('F', blocks(GTOBlocks.COMPRESSOR_CONTROLLER_CASING.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('G', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/compressor_controller_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition SPACE_STATION = multiblock("space_station", "空间站", SimpleSpaceStationMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getSpaceStationTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .workableInSpace()
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("       ", "  A A  ", " AGGGA ", "  GMG  ", " AGGGA ", "  A A  ", "       ")
                    .aisle("       ", " AAGAA ", " AGGGA ", " GGMGG ", " AGGGA ", " AAGAA ", "       ")
                    .aisle("  FFF  ", " AGGGA ", " G   G ", " G M G ", " G   G ", " AGGGA ", "       ")
                    .aisle("       ", "  GMG  ", "CG M GC", " e M e ", "CG   GC", " lGGGl ", "       ")
                    .aisle("  FFF  ", "  GFG  ", " GLLLG ", " FLMLF ", " GLLLG ", " lGMGl ", "       ")
                    .aisle("       ", "  GMG  ", "CGLLLGC", " eLLLe ", "CGLLLGC", " lGGGl ", "       ")
                    .aisle("  FFF  ", "  GGG  ", " GLLLG ", " GLLLG ", " GLLLG ", "  GGG  ", "       ")
                    .aisle("       ", "   J   ", "  HHH  ", " JH HJ ", "  HHH  ", "   J   ", "       ")
                    .aisle("       ", "   J   ", "  HHH  ", " JH HJ ", "  HHH  ", "   J   ", "       ")
                    .aisle("  AAA  ", " AAAAA ", "AIFFFIA", "AIFNFIA", "AIFFFIA", " AAAAA ", "  AAA  ")
                    .aisle(" AADAA ", "AfFpFfA", "ApppppA", "ApppppA", "ApppppA", "AfFpFfA", " AADAA ")
                    .aisle(" BBBBB ", "BFFpFFB", "BpppppB", "EpppppE", "BpppppB", "BFFpFFB", " BBBBB ")
                    .aisle(" AAAAA ", "ApppppA", "ApppppA", "ApppppA", "ApppppA", "ApppppA", " AAAAA ")
                    .aisle(" BBABB ", "BpppppB", "BpppppB", "ApppppA", "BpppppB", "BpppppB", " BBABB ")
                    .aisle(" BBABB ", "BpppppB", "BpppppB", "ApppppA", "BpppppB", "BpppppB", " BBABB ")
                    .aisle(" BBABB ", "BpppppB", "BpppppB", "ApppppA", "BpppppB", "BpppppB", " BBABB ")
                    .aisle(" AAAAA ", "ApppppA", "ApppppA", "ApppppA", "ApppppA", "ApppppA", " AAAAA ")
                    .aisle(" BBBBB ", "BFFpFFB", "BpppppB", "EpppppE", "BpppppB", "BFFpFFB", " BBBBB ")
                    .aisle(" AADAA ", "AfFpFfA", "ApppppA", "ApppppA", "ApppppA", "AfFpFfA", " AADAA ")
                    .aisle("  AAA  ", " AAAAA ", "AALpLAA", "AALpLAA", "AALpLAA", " AAAAA ", "  AAA  ")
                    .aisle("   C   ", "  AJA  ", " AFpFA ", "CJCpCJC", " AFpFA ", "  AJA  ", "   C   ")
                    .aisle("       ", "  HJH  ", " HFpFH ", " JCpCJ ", " HFpFH ", "  HJH  ", "       ")
                    .aisle("       ", "  HJH  ", " HFpFH ", " JCpCJ ", " HFpFH ", "  HJH  ", "       ")
                    .aisle("   C   ", "  AJA  ", " AFpFA ", "CJCpCJC", " AFpFA ", "  AJA  ", "   C   ")
                    .aisle("  AAA  ", " AAAAA ", "AALpLAA", "AALpLAA", "AALpLAA", " AAAAA ", "  AAA  ")
                    .aisle("  AAA  ", " AAAAA ", "ApppppA", "DpppppD", "AKpppKA", " AAAAA ", "  AAA  ")
                    .aisle("  BBB  ", " BpppB ", "BpppppB", "EpppppE", "BKpppKB", " BpppB ", "  BBB  ")
                    .aisle("  AAA  ", " ApppA ", "ApppppA", "ApppppA", "AKpppKA", " ipppi ", "  III  ")
                    .aisle("  BAB  ", " BpppB ", "BpppppB", "ApppppA", "BKpppKB", " BpppB ", "  BIB  ")
                    .aisle("  BAB  ", " BpppB ", "BpppppB", "ApppppA", "BKpppKB", " BpppB ", "  BIB  ")
                    .aisle("  AAA  ", " ApppA ", "ApppppA", "ApppppA", "AKpppKA", " ipppi ", "  III  ")
                    .aisle("  BBB  ", " BpppB ", "BpppppB", "EpppppE", "BKpppKB", " BpppB ", "  BBB  ")
                    .aisle("  AAA  ", " AAAAA ", "ApppppA", "DpppppD", "AKpppKA", " IpppI ", "  IDI  ")
                    .aisle("  AAA  ", " AAAAA ", "AAFpFAA", "AAFpFAA", "AAFFFAA", " AAAAA ", "  AAA  ")
                    .aisle("       ", "  AAA  ", " AFpFA ", " AJpJA ", " AFlFA ", "  AAA  ", "       ")
                    .aisle("       ", "  BBB  ", " BFpFB ", " BJpJB ", " BFlFB ", "  BBB  ", "       ")
                    .aisle("       ", "  GGG  ", " GFpFG ", " GFpFG ", " GFFFG ", "  GGG  ", "       ")
                    .aisle("  C C  ", "  GFG  ", "CG   GC", " e   e ", "CG   GC", " lGFGl ", "       ")
                    .aisle("  C C  ", "  GFG  ", " G   G ", " f   f ", " G   G ", " lGFGl ", "  FFF  ")
                    .aisle("  C C  ", "  GFG  ", "CG   GC", " e   e ", "CG   GC", " lF Fl ", "  F F  ")
                    .aisle("       ", "  GGG  ", " GFFFG ", " GFFFG ", " GFFFG ", "  GFG  ", "  FFF  ")
                    .aisle("       ", " AAGAA ", " AGGGA ", " GGGGG ", " AGGGA ", " AAGAA ", "       ")
                    .aisle("       ", "  A A  ", " ACCCA ", "  C C  ", " ACCCA ", "  A A  ", "       ")
                    .where('A', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('B', blocks(GTOBlocks.ALUMINUM_ALLOY_8090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteelGC4)))
                    .where('D', blocks(Stream.of(GTMachines.HULL).map(MachineDefinition::get).toArray(IMachineBlock[]::new)).or(abilities(IMPORT_FLUIDS, EXPORT_FLUIDS, INPUT_ENERGY)))
                    .where('e', ISpacePredicateMachine.photovoltaicPlantSupplyingPredicate.get())
                    .where('E', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('F', blocks(GTOBlocks.SPACECRAFT_SEALING_MECHANICAL_BLOCK.get()))
                    .where('f', blocks(GTOBlocks.SPACECRAFT_SEALING_MECHANICAL_BLOCK.get()).or(light()))
                    .where('G', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('H', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('I', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(autoAbilities(definition.getRecipeTypes())))
                    .where('i', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .or(light()))
                    .where('J', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('K', Predicates.cleanroomFilters())
                    .where('L', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('l', light())
                    .where('M', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('N', controller(blocks(definition.get())))
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    // 纺丝机
    public static final MultiblockMachineDefinition FIBER_EXTRUDER = multiblock("fiber_extruder", "纺丝机", CoilCustomParallelMultiblockMachine.createParallelCoil(m -> 1L << (long) (m.getTemperature() / 900.0D), true, false, false))
            .nonYAxisRotation()
            .parallelizableTooltips()
            .tooltips(GTOMachineStories.INSTANCE.getFiberExtruderTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.FIBER_EXTRUSION_RECIPES)
            .block(GTOBlocks.STAINLESS_STEEL_CORROSION_RESISTANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAA", "ABBBA", "ABBBA", "AAAAA", "     ")
                    .aisle("ACCCA", "DDDDD", "DDDDD", "ACCCA", "     ")
                    .aisle("ACCCA", "A   A", "A   A", "ACCCA", "     ")
                    .aisle("ACCCA", "E   E", "E   E", "E   E", "EEEEE")
                    .aisle("ACCCA", "E   E", "DDDDD", "DDDDD", "EBBBE")
                    .aisle("ACCCA", "E   E", "EBBBE", "EBBBE", "EEEEE")
                    .aisle("ACCCA", "A   A", "ACCCA", "     ", "     ")
                    .aisle("AFFFA", "FBBBF", "AFFFA", "     ", "     ")
                    .aisle("AAGAA", "A   A", "AAAAA", "     ", "     ")
                    .where('A', blocks(GTOBlocks.STAINLESS_STEEL_CORROSION_RESISTANT_CASING.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteelGC4)))
                    .where('C', blocks(GTOBlocks.STAINLESS_STEEL_CORROSION_RESISTANT_CASING.get()))
                    .where('D', blocks(GTBlocks.CASING_TITANIUM_GEARBOX.get()))
                    .where('E', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('F', heatingCoils())
                    .where('G', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/stainless_steel_corrosion_resistant_casing"),
                    GTCEu.id("block/multiblock/gcym/large_extruder"))
            .register();

    // 大型可扩展空间站核心舱
    public static final MultiblockMachineDefinition LARGE_EXPANDABLE_SPACE_STATION_CORE_MODULE = multiblock("large_expandable_space_station_core_module", "工业空间站核心舱", Core::new)
            .langValue("Large Space Station Core Module")
            .allRotation()
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getLargeSpaceStationTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getLargeSpaceStationTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getCoreSpaceStationModuleTooltips().getSupplier())
            .tooltips()
            .block(GTOBlocks.SPACE_STATION_CONTROL_CASING)
            .workableInSpace()
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "        ]]]        ", "       ]]]]]       ", "       ]]]]]       ", "       ]]]]]       ", "        ]]]        ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "       ]]]]]       ", "      ]]aaa]]      ", "      ]aHHHa]      ", "      ]aHHHa]      ", "      ]aHHHa]      ", "      ]]aaa]]      ", "       ]]]]]       ", "                   ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "       ]]]]]       ", "      ]  a  ]      ", "     ]       ]     ", "     ]       ]     ", "     ]a     a]     ", "     ]       ]     ", "     ]       ]     ", "      ]  a  ]      ", "       ]]]]]       ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "       YYYYY       ", "      Y  a  Y      ", "     Y       Y     ", "     Y       Y     ", "     Ya     aY     ", "     Y       Y     ", "     Y       Y     ", "      Y  a  Y      ", "       YYYYY       ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "       UUZUU       ", "       UVZVU       ", "       YYZYY       ", "      Y[[Z[[Y      ", "   UUY[  Z  [YUU   ", "   UVY[  Z  [YVU   ", "   ZZZZZZZZZZZZZ   ", "   UVY[  Z  [YVU   ", "   UUY[  Z  [YUU   ", "      Y[[Z[[Y      ", "       YYZYY       ", "       UVZVU       ", "       UUZUU       ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "        UVU        ", "       UUUUU       ", "    JJJU Z UJJJ    ", "    JKJYYYYYJKJ    ", "    JJY     YJJ    ", "   UUY       YUU   ", "  UU Y       Y UU  ", "  VUZY   Z   YZUV  ", "  UU Y       Y UU  ", "   UUY       YUU   ", "    JJY     YJJ    ", "    JKJYYYYYJKJ    ", "    JJJU Z UJJJ    ", "       UUUUU       ", "        UVU        ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "        UVU        ", "    JJJUUUUUJJJ    ", "   JWWJU Z UJWWJ   ", "   JWWJYYYYYJWWJ   ", "   JJJY     YJJJ   ", "   UUY       YUU   ", "  UU Y       Y UU  ", "  VUZY   Z   YZUV  ", "  UU Y       Y UU  ", "   UUY       YUU   ", "   JJJY     YJJJ   ", "   JWWJYYYYYJWWJ   ", "   JWWJU Z UJWWJ   ", "    JJJUUUUUJJJ    ", "        UVU        ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "    JKJUUZUUJKJ    ", "   JWWJU Z UJWWJ   ", "   KWWJYYZYYJWWK   ", "   JJJY[[Z[[YJJJ   ", "   UUY[  Z  [YUU   ", "   U Y[  Z  [Y U   ", "   ZZZZZZZZZZZZZ   ", "   U Y[  Z  [Y U   ", "   UUY[  Z  [YUU   ", "   JJJY[[Z[[YJJJ   ", "   KWWJYYZYYJWWK   ", "   JWWJU Z UJWWJ   ", "    JKJUUZUUJKJ    ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "        UVU        ", "    JJJUUUUUJJJ    ", "   JWWJXXXXXJWWJ   ", "   JWWJYYYYYJWWJ   ", "   JJJY     YJJJ   ", "   UXY       YXU   ", "  UUXY       YXUU  ", "  VUXY       YXUV  ", "  UUXY       YXUU  ", "   UXY       YXU   ", "   JJJY     YJJJ   ", "   JWWJYYYYYJWWJ   ", "   JWWJXXXXXJWWJ   ", "    JJJUUUUUJJJ    ", "        UVU        ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "        UVU        ", "    JKJUUUUUJKJ    ", "   JWWJX X XJWWJ   ", "   KWWJ Y Y JWWK   ", "   JJJ       JJJ   ", "   UX         XU   ", "  UU Y       Y UU  ", "  VUX         XUV  ", "  UU Y       Y UU  ", "   UX         XU   ", "   JJJ       JJJ   ", "   KWWJ Y Y JWWK   ", "   JWWJX X XJWWJ   ", "    JKJUUUUUJKJ    ", "        UVU        ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "    JJJUUUUUJJJ    ", "   JWWJX X XJWWJ   ", "   JWWJ Y Y JWWJ   ", "   JJJ       JJJ   ", "   UX         XU   ", "   U Y       Y U   ", "   UX         XU   ", "   U Y       Y U   ", "   UX         XU   ", "   JJJ       JJJ   ", "   JWWJ Y Y JWWJ   ", "   JWWJX X XJWWJ   ", "    JJJUUUUUJJJ    ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "        UVU        ", "    JKJUUUUUJKJ    ", "   JWWJX X XJWWJ   ", "   KWWJ Y Y JWWK   ", "   JJJ       JJJ   ", "   UX         XU   ", "  UU Y       Y UU  ", "  VUX         XUV  ", "  UU Y       Y UU  ", "   UX         XU   ", "   JJJ       JJJ   ", "   KWWJ Y Y JWWK   ", "   JWWJX X XJWWJ   ", "    JKJUUUUUJKJ    ", "        UVU        ", "                   ", "                   ")
                    .aisle("                   ", "       E   E       ", "    EEEEUVUEEEE    ", "   EJJJUUUUUJJJE   ", "  EJWWJXXXXXJWWJE  ", "  EJWWJ Y Y JWWJE  ", "  EJJJ       JJJE  ", " EEUX         XUEE ", "  UUXY       YXUU  ", "  VUX         XUV  ", "  UUXY       YXUU  ", " EEUX         XUEE ", "  EJJJ       JJJE  ", "  EJWWJ Y Y JWWJE  ", "  EJWWJXXXXXJWWJE  ", "   EJJJUUUUUJJJE   ", "    EEEEUVUEEEE    ", "       E   E       ", "                   ")
                    .aisle("       E   E       ", "     IIIIFIIII     ", "    IIIIIFIIIII    ", "   IIIICCFCCIIII   ", "  IIIICCCFCCCIIII  ", " IIIICCGGGGGCCIIII ", " IIICCGOOOOOGCCIII ", "EIICCGOOQQQOOGCCIIE", " IICCGOQQQQQOGCCII ", " FFFFGOQQQQQOGFFFF ", " IICCGOQQQQQOGCCII ", "EIICCGOOQQQOOGCCIIE", " IIICCGOOOOOGCCIII ", " IIIICCGGGGGCCIIII ", "  IIIICCCFCCCIIII  ", "   IIIICCFCCIIII   ", "    IIIIIFIIIII    ", "     IIIIFIIII     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FCCCCCCCCCF    ", "   FCpRRRSRRRpCF   ", "  FCppRRRRRRRppCF  ", " JCpppRRRRRRRpppCJ ", " JCpppppppppppppCJ ", "EJCpppHEpppEHpppCJE", " JCppHEpppppEHppCJ ", " FCEEEEpppppEEEECF ", " JC  HE     EH  CJ ", "EJC   HE   EH   CJE", " JC    HEEEH    CJ ", " JC   TTTETTT   CJ ", "  FCppTTTETTTppCF  ", "   FC TTTETTT CF   ", "    FCCCCCCCCCF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", "JJpppppppppppppppJJ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", "JJpppppppppppppppJJ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", " JpppppppppppppppJ ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " JpppppppppppppppJ ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", "JJpppppppppppppppJJ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", "JJpppppppppppppppJJ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FHpppppppppHF   ", "  FHpppppppppppHF  ", " JpppppppppppppppJ ", " NpppppppppppppppN ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " NpppppppppppppppN ", " JpppppppppppppppJ ", "  FHpppppppppppHF  ", "   FHpppppppppHF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "    AAAAAAAAAAA    ", "   AFpppppppppFA   ", "  AFHpppppppppHFA  ", " AFHpppppppppppHFA ", " ApppppppppppppppA ", " ApppppppppppppppA ", "EApppppppppppppppAE", " ApppppppppppppppA ", " ApppppppppppppppA ", " ApppppppppppppppA ", "EApppppppppppppppAE", " ApppppppppppppppA ", " ApppppppppppppppA ", " AFHpppppppppppHFA ", "  AFHpppppppppHFA  ", "   AFpppppppppFA   ", "    AAAAAAAAAAA    ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FHpppppppppHF   ", "  FHpppppppppppHF  ", " JpppppppppppppppJ ", " NpppppppppppppppN ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " NpppppppppppppppN ", " JpppppppppppppppJ ", "  FHpppppppppppHF  ", "   FHpppppppppHF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", "JJpppppppppppppppJJ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", "JJpppppppppppppppJJ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", " JpppppppppppppppJ ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " JpppppppppppppppJ ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FpppppppppF    ", "   FGpppppppppGF   ", "  FGpppppppppppGF  ", "JJpppppppppppppppJJ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", " FpppppppppppppppF ", " JpppppppppppppppJ ", "EJpppppppppppppppJE", " JpppppppppppppppJ ", "JJpppppppppppppppJJ", "  FGpppppppppppGF  ", "   FGpppppppppGF   ", "    FpppppppppF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "     JJJJFJJJJ     ", "    FCCCCCCCCCF    ", "   FCCpppppppCCF   ", "  FCCpppppppppCCF  ", " JCCpppppppppppCCJ ", " JCpppppppppppppCJ ", "EJCpppppppppppppCJE", " JCpppppppppppppCJ ", " FCpppppppppppppCF ", " JCpppppppppppppCJ ", "EJCpppppppppppppCJE", " JCpppppppppppppCJ ", " JCCpppppppppppCCJ ", "  FCCpppppppppCCF  ", "   FCCpppppppCCF   ", "    FCCCCCCCCCF    ", "     JJJJFJJJJ     ", "       E   E       ")
                    .aisle("       E   E       ", "       BLLLB       ", "   MMBNOOAOONBMM   ", "  MBBGpppppppGBBM  ", "  MBGpppppppppGBM  ", "  BGpppppppppppGB  ", "  NpppppppppppppN  ", "EBOpppppppppppppOBE", " LOpppppppppppppOL ", " LOpppppppppppppOL ", " LOpppppppppppppOL ", "EBOpppppppppppppOBE", "  NpppppppppppppN  ", "  BGpppppppppppGB  ", "  MBGpppppppppGBM  ", "  MBBGpppppppGBBM  ", "   MMBNOOAOONBMM   ", "       BLLLB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBHOAOHBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBHOAOHBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "   MMBNHOAOHNBMM   ", "  MBBGpppppppGBBM  ", "  MBGpppppppppGBM  ", "  BGpppppppppppGB  ", "  NpppppppppppppN  ", "EBOpppppppppppppOBE", " JHpppppppppppppHJ ", " JHpppppppppppppHJ ", " JHpppppppppppppHJ ", "EBOpppppppppppppOBE", "  NpppppppppppppB  ", "  BGpppppppppppGB  ", "  MBGpppppppppGBP  ", "  MBBGpppppppGBB   ", "   MMBNHOAOHNBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBHOAOHBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", "EBOpppppppppppppOBE", "  BpppppppppppppN  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBM  ", "   BBGpppppppGBBM  ", "    PBBHOAOHBBMM   ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBHOAOHBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBHOAOHBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "   MMBNHOAOHNBMM   ", "  MBBGpppppppGBBM  ", "  MBGpppppppppGBM  ", "  BGpppppppppppGB  ", "  NpppppppppppppN  ", "EBOpppppppppppppOBE", " JHpppppppppppppHJ ", " JHpppppppppppppHJ ", " JHpppppppppppppHJ ", "EBOpppppppppppppOBE", "  NpppppppppppppN  ", "  BGpppppppppppGB  ", "  MBGpppppppppGBM  ", "  MBBGpppppppGBBM  ", "   MMBNHOAOHNBMM   ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBHOAOHBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBHOAOHBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "    PBBOOAOOBBP    ", "   BBGpppppppGBB   ", "  PBGpppppppppGBP  ", "  BGpppppppppppGB  ", "  BpppppppppppppB  ", "EBOpppppppppppppOBE", " QQpppppppppppppQQ ", " JOpppppppppppppOJ ", " QQpppppppppppppQQ ", "EBOpppppppppppppOBE", "  BpppppppppppppB  ", "  BGpppppppppppGB  ", "  PBGpppppppppGBP  ", "   BBGpppppppGBB   ", "    PBBOOAOOBBP    ", "       BJJJB       ", "       E   E       ")
                    .aisle("       E   E       ", "       BJJJB       ", "   MMBNOOAOONBMM   ", "  MBBGpppppppGBBM  ", "  MBGpppppppppGBM  ", "  BGpppppppppppGB  ", "  NpppppppppppppN  ", "EBOpppppppppppppOBE", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", " JOpppppppppppppOJ ", "EBOpppppppppppppOBE", "  NpppppppppppppN  ", "  BGpppppppppppGB  ", "  MBGpppppppppGBM  ", "  MBBGpppppppGBBM  ", "   MMBNOOAOONBMM   ", "       BJJJB       ", "       E   E       ")
                    .aisle("                   ", "       ELLLE       ", "      ECCCCCE      ", "     ECpppppCE     ", "    ECpppppppCE    ", "   ECpppppppppCE   ", "  ECpppppppppppCE  ", " ECpppppppppppppCE ", " LCpppppppppppppCL ", " LCpppppppppppppCL ", " LCpppppppppppppCL ", " ECpppppppppppppCE ", "  ECpppppppppppCE  ", "   ECpppppppppCE   ", "    ECpppppppCE    ", "     ECpppppCE     ", "      ECCCCCE      ", "       ELLLE       ", "                   ")
                    .aisle("                   ", "                   ", "       E   E       ", "       JJJJJ       ", "     JJpppppJJ     ", "    JJpppppppJJ    ", "    JpppppppppJ    ", "  EJpppppppppppJE  ", "   JpppppppppppJ   ", "   JpppppppppppJ   ", "   JpppppppppppJ   ", "  EJpppppppppppJE  ", "    JpppppppppJ    ", "    JJpppppppJJ    ", "     JJpppppJJ     ", "       JJJJJ       ", "       E   E       ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "       E   E       ", "       JJKJJ       ", "     JJFFFFFJJ     ", "    JJFpppppFJJ    ", "    JFFpppppFFJ    ", "  EJFpppppppppFJE  ", "   JFpppppppppFJ   ", "   KFpppppppppFK   ", "   JFpppppppppFJ   ", "  EJFpppppppppFJE  ", "    JFFpppppFFJ    ", "    JJFpppppFJJ    ", "     JJFFFFFJJ     ", "       JJKJJ       ", "       E   E       ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "       EEEEE       ", "       BBBBB       ", "      BpppppB      ", "     BGpppppGB     ", "   EBpppppppppBE   ", "   EBpppppppppBE   ", "   EBpppppppppBE   ", "   EBpppppppppBE   ", "   EBpppppppppBE   ", "     BGpppppGB     ", "      BpppppB      ", "       BBBBB       ", "       EEEEE       ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "         E         ", "       BBBBB       ", "      BpppppB      ", "     BGpppppGB     ", "    BpppppppppB    ", "    BpppppppppB    ", "   EBpppppppppBE   ", "    BpppppppppB    ", "    BpppppppppB    ", "     BGpppppGB     ", "      BpppppB      ", "       BBBBB       ", "         E         ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "         E         ", "      IIIIIII      ", "     IIpppppII     ", "    IIGpppppGII    ", "    IpppppppppI    ", "    IpppppppppI    ", "   EIpppppppppIE   ", "    IpppppppppI    ", "    IpppppppppI    ", "    IIGpppppGII    ", "     IIpppppII     ", "      IIIIIII      ", "         E         ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "         E         ", "       BBBBB       ", "      BpppppB      ", "     BGpppppGB     ", "    BpppppppppB    ", "    BpppppppppB    ", "   EBpppppppppBE   ", "    BpppppppppB    ", "    BpppppppppB    ", "     BGpppppGB     ", "      BpppppB      ", "       BBBBB       ", "         E         ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "         E         ", "       BBBBB       ", "      BGGHGGB      ", "     BGpppppGB     ", "    BGpppppppGB    ", "    BGpppppppGB    ", "   EBHpppppppHBE   ", "    BGpppppppGB    ", "    BGpppppppGB    ", "     BGpppppGB     ", "      BGGHGGB      ", "       BBBBB       ", "         E         ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "         E         ", "         E         ", "       CCCCC       ", "      CCFFFCC      ", "     CCFpppFCC     ", "     CFpppppFC     ", "   EECFpppppFCEE   ", "     CFpppppFC     ", "     CCFpppFCC     ", "      CCFFFCC      ", "       CCCCC       ", "         E         ", "         E         ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "        EEE        ", "       ECCCE       ", "      ECCCCCE      ", "     ECCpppCCE     ", "     ECCpppCCE     ", "     ECCpppCCE     ", "      ECCCCCE      ", "       ECCCE       ", "        EEE        ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "         E         ", "        BAB        ", "       BCcCB       ", "      BCpppCB      ", "     EAcpppcAE     ", "      BCpppCB      ", "       BCcCB       ", "        BAB        ", "         E         ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "         A         ", "        BAB        ", "       BCDCB       ", "      BCpppCB      ", "     AADpppDAA     ", "      BCpppCB      ", "       BCDCB       ", "        BAB        ", "         A         ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "         A         ", "                   ", "                   ", "                   ", "     A       A     ", "                   ", "                   ", "                   ", "         A         ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .where('A', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('B', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('c', CORE.traceabilityPredicate.get())
                    .where('D', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteel316)))
                    .where('F', blocks(GTOBlocks.PRESSURE_RESISTANT_HOUSING_MECHANICAL_BLOCK.get()))
                    .where('G', blocks(GTOBlocks.SPACECRAFT_SEALING_MECHANICAL_BLOCK.get()))
                    .where('H', GTOPredicates.light())
                    .where('I', blocks(GTOBlocks.ALUMINUM_ALLOY_8090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('J', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('K', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('L', blocks(GTOBlocks.LOAD_BEARING_STRUCTURAL_STEEL_MECHANICAL_BLOCK.get()))
                    .where('M', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.AluminumAlloy7050)))
                    .where('N', blocks(Stream.of(GTMachines.HULL).map(MachineDefinition::get).toArray(IMachineBlock[]::new)))
                    .where('O', blocks(GTOBlocks.STAINLESS_STEEL_CORROSION_RESISTANT_CASING.get()))
                    .where('P', blocks(GTOBlocks.INSULATION_TILE_MECHANICAL_BLOCK.get()))
                    .where('Q', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('R', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get())
                            .or(abilities(INPUT_ENERGY, IMPORT_FLUIDS, EXPORT_FLUIDS))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('S', controller(blocks(definition.get())))
                    .where('T', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get()))
                    .where('U', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('V', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('W', blocks(GTOBlocks.HIGH_PRESSURE_GAS_STORAGE_TANKS_CASING.get()))
                    .where('X', blocks(GTOBlocks.COBALT_OXIDE_CERAMIC_STRONG_THERMALLY_CONDUCTIVE_MECHANICAL_BLOCK.get()))
                    .where('Y', blocks(GTOBlocks.TUNGSTEN_ALLOY_RADIATION_SHIELDING_MECHANICAL_BLOCK.get()))
                    .where('Z', blocks(GTOBlocks.ELECTRIC_POWER_TRANSMISSION_CASING.get()))
                    .where('[', GTOPredicates.integralFramework())
                    .where('a', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.PlatinumRhodiumAlloy)))
                    .where(']', blocks(GTOBlocks.SENSOR_PROTECTIVE_COVER_CASING.get()))
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/space_station_control_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    // 大型可扩展空间站走廊舱
    public static final MachineDefinition SPACE_STATION_EXTENSION_MODULE = multiblock("space_station_extension_module",
            "工业空间站拓展舱", Extension::new)
            .allRotation()
            .workableInSpace()
            .tooltips(GTOMachineTooltips.INSTANCE.getFunctionSpaceStationModuleTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTOBlocks.SPACE_STATION_CONTROL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                                                               ", "                                                               ", "                                                               ", "                                                               ", "                                                               ", "                  LpLpppLpLpppLpLpppLpLpppLpLpppLppLpppLpLpppLpLpppLpLpppLpLpppLpL            ", "                                                               ", "                                                               ", "                                                               ", "                                                               ", "                                                               ")
                    .aisle("                                                               ", "                                                               ", "                                                               ", "                                                               ", "                C     C     C     C     C     C     C          ", "                CLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLC          ", "               ECOLLLOCOLLLOCOLLLOCOLLLOCOLLLOCOLLLOCE         ", "              FLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLF        ", "              NLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLN        ", "              NLCGGGGGCGGGGGCGGGGGCGGGGGCGGGGGCGGGGGCLN        ", "              NLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLN        ", "              FLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLF        ", "                COLLLOCOLLLOCOLLLOCOLLLOCOLLLOCOLLLOCE         ", "                CLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLC          ", "                C     C     C     C     C     C     C          ", "                                                               ", "                                                               ", "                                                               ", "                                                               ")
                    .aisle("                                                               ", "                                                               ", "                                                               ", "                C     C     C     C     C     C     C          ", "               EGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGE         ", "               EpppppppppppppppppppppppppppppppppppppE         ", "              FHpppppppppppppppppppppppppppppppppppppHF        ", "            FFAApppppppppppppppppppppppppppppppppppppAAFF      ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "            FFAApppppppppppppppppppppppppppppppppppppAAFF      ", "              FEpppppppppppppppppppppppppppppppppppppHF        ", "               EpppppppppppppppppppppppppppppppppppppE         ", "                GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGE         ", "                C     C     C     C     C     C     C          ", "                                                               ", "                                                               ", "                                                               ")
                    .aisle("                                                               ", "                                                               ", "                C     C     C     C     C     C     C          ", "               EGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGE         ", "               EHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHE         ", "              FHpppppppppppppppppppppppppppppppppppppHF        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "      FFFFFFMLpppppppppppppppppppppppppppppppppppppppppLMFF    ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              FEpppppppppppppppppppppppppppppppppppppHF        ", "               EHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHE         ", "                GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGE         ", "                C     C     C     C     C     C     C          ", "                                                               ", "                                                               ")
                    .aisle("                                                               ", "                C     C     C     C     C     C     C          ", "               EGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGE         ", "               EHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHE         ", "              FHpppppppppppppppppppppppppppppppppppppHF        ", "            LLAApppppppppppppppppppppppppppppppppppppAALL      ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "      FEEKEEGpppppppppppppppppppppppppppppppppppppppppppGEF    ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "            LLAApppppppppppppppppppppppppppppppppppppAALL      ", "              FEpppppppppppppppppppppppppppppppppppppHF        ", "               EHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHE         ", "                GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGE         ", "                C     C     C     C     C     C     C          ", "                                                               ")
                    .aisle("                                                               ", "                CLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLC          ", "               EpppppppppppppppppppppppppppppppppppppE         ", "              FHpppppppppppppppppppppppppppppppppppppHF        ", "            LLAApppppppppppppppppppppppppppppppppppppAALL      ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "      AHJJJJpppppppppppppppppppppppppppppppppppppppppppppAA    ", "     FAHJJJJpppppppppppppppppppppppppppppppppppppppppppppAAF   ", "  CCFFAIJJJJpppppppppppppppppppppppppppppppppppppppppppppAAFFCC", "     FAHJJJJpppppppppppppppppppppppppppppppppppppppppppppAAF   ", "      AHJJJJpppppppppppppppppppppppppppppppppppppppppppppAA    ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "            LLAApppppppppppppppppppppppppppppppppppppAALL      ", "              FEpppppppppppppppppppppppppppppppppppppHF        ", "               EpppppppppppppppppppppppppppppppppppppE         ", "                CLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLC          ", "                                                               ")
                    .aisle("                                                               ", "               ECLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCE         ", "              FHpppppppppppppppppppppppppppppppppppppHF        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "      AHHHHHGpppppppppppppppppppppppppppppppppppppppppppGIA    ", "     FApppppppppppppppppppppppppppppppppppppppppppppppppppAF   ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "   CCAGpppppppppppppppppppppppppppppppppppppppppppppppppppGACC ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "     FApppppppppppppppppppppppppppppppppppppppppppppppppppAF   ", "      AHHHHHGpppppppppppppppppppppppppppppppppppppppppppGIA    ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              FEpppppppppppppppppppppppppppppppppppppHF        ", "                CLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCE         ", "                                                               ")
                    .aisle("               FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF         ", "              FLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLF        ", "            FFAApppppppppppppppppppppppppppppppppppppAAFF      ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "      AHJJJJpppppppppppppppppppppppppppppppppppppppppppppAA    ", "     FApppppppppppppppppppppppppppppppppppppppppppppppppppAF   ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "AAAAAApppppppppppppppppppppppppppppppppppppppppppppppppppppAAA ", "ABDDAApppppppppppppppppppppppppppppppppppppppppppppppppppppAcD ", "AAAAAApppppppppppppppppppppppppppppppppppppppppppppppppppppAAA ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "     FApppppppppppppppppppppppppppppppppppppppppppppppppppAF   ", "      AHJJJJpppppppppppppppppppppppppppppppppppppppppppppAA    ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "            FFAApppppppppppppppppppppppppppppppppppppAAFF      ", "              FLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLF        ", "               FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF         ")
                    .aisle("                                                               ", "              NLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLN        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "     FAHJJJJpppppppppppppppppppppppppppppppppppppppppppppAAF   ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "   AAApppppppppppppppppppppppppppppppppppppppppppppppppppppAAA ", "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "   AAApppppppppppppppppppppppppppppppppppppppppppppppppppppAAA ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "     FAHJJJJpppppppppppppppppppppppppppppppppppppppppppppAAF   ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              NLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLN        ", "                                                               ")
                    .aisle("                                                               ", "              NLCGGGGGCGGGGGCGGGGGCGGGGGCGGGGGCGGGGGCLN        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "      FFFFFFMLpppppppppppppppppppppppppppppppppppppppppLMFF    ", "      FEEKEEGpppppppppppppppppppppppppppppppppppppppppppGEF    ", "  CCFFAIJJJJpppppppppppppppppppppppppppppppppppppppppppppAAFFCC", "   CCAGpppppppppppppppppppppppppppppppppppppppppppppppppppGACC ", "   DAApppppppppppppppppppppppppppppppppppppppppppppppppppppAcD ", "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "   DAApppppppppppppppppppppppppppppppppppppppppppppppppppppAcD ", "   CCAGpppppppppppppppppppppppppppppppppppppppppppppppppppGACC ", "  CCFFAIJJJJpppppppppppppppppppppppppppppppppppppppppppppAAFFCC", "      FEEKEEGpppppppppppppppppppppppppppppppppppppppppppGEF    ", "      FFFFFFMLpppppppppppppppppppppppppppppppppppppppppLMFF    ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              NLCGGGGGCGGGGGCGGGGGCGGGGGCGGGGGCGGGGGCLN        ", "                                                               ")
                    .aisle("                                                               ", "              NLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLN        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "     FAHJJJJpppppppppppppppppppppppppppppppppppppppppppppAAF   ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "   AAApppppppppppppppppppppppppppppppppppppppppppppppppppppAAA ", "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", "   AAApppppppppppppppppppppppppppppppppppppppppppppppppppppAAA ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "     FAHJJJJpppppppppppppppppppppppppppppppppppppppppppppAAF   ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              NLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLN        ", "                                                               ")
                    .aisle("               FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF         ", "              FLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLF        ", "            FFAApppppppppppppppppppppppppppppppppppppAAFF      ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "      AHJJJJpppppppppppppppppppppppppppppppppppppppppppppAA    ", "     FApppppppppppppppppppppppppppppppppppppppppppppppppppAF   ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "   AAApppppppppppppppppppppppppppppppppppppppppppppppppppppAAA ", "   DAApppppppppppppppppppppppppppppppppppppppppppppppppppppAcD ", "   AAApppppppppppppppppppppppppppppppppppppppppppppppppppppAAA ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "     FApppppppppppppppppppppppppppppppppppppppppppppppppppAF   ", "      AHJJJJpppppppppppppppppppppppppppppppppppppppppppppAA    ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "            FFAApppppppppppppppppppppppppppppppppppppAAFF      ", "              FLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLF        ", "               FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF         ")
                    .aisle("                                                               ", "               ECLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCE         ", "              FHpppppppppppppppppppppppppppppppppppppHF        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "      AHHHHHGpppppppppppppppppppppppppppppppppppppppppppGIA    ", "     FApppppppppppppppppppppppppppppppppppppppppppppppppppAF   ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "   CCAGpppppppppppppppppppppppppppppppppppppppppppppppppppGACC ", "   EEAGpppppppppppppppppppppppppppppppppppppppppppppppppppGAEE ", "     FApppppppppppppppppppppppppppppppppppppppppppppppppppAF   ", "      AHHHHHGpppppppppppppppppppppppppppppppppppppppppppGIA    ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              FHpppppppppppppppppppppppppppppppppppppEF        ", "               ECLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLC          ", "                                                               ")
                    .aisle("                                                               ", "                CLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLC          ", "               EpppppppppppppppppppppppppppppppppppppE         ", "              FHpppppppppppppppppppppppppppppppppppppHF        ", "            LLAApppppppppppppppppppppppppppppppppppppAALL      ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "      AHJJJJpppppppppppppppppppppppppppppppppppppppppppppAA    ", "     FAHJJJJpppppppppppppppppppppppppppppppppppppppppppppAAF   ", "  CCFFAIJJJJpppppppppppppppppppppppppppppppppppppppppppppAAFFCC", "     FAHJJJJpppppppppppppppppppppppppppppppppppppppppppppAAF   ", "      AHJJJJpppppppppppppppppppppppppppppppppppppppppppppAA    ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "            LLAApppppppppppppppppppppppppppppppppppppAALL      ", "              FHpppppppppppppppppppppppppppppppppppppEF        ", "               EpppppppppppppppppppppppppppppppppppppE         ", "                CLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLC          ", "                                                               ")
                    .aisle("                                                               ", "                C     C     C     C     C     C     C          ", "               EGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGE         ", "               EHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHE         ", "              FHpppppppppppppppppppppppppppppppppppppHF        ", "            LLAApppppppppppppppppppppppppppppppppppppAALL      ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "      FEEKEEGpppppppppppppppppppppppppppppppppppppppppppGEF    ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "       EEKEEGpppppppppppppppppppppppppppppppppppppppppppGE     ", "         KppLLpppppppppppppppppppppppppppppppppppppppppLL      ", "            LLAApppppppppppppppppppppppppppppppppppppAALL      ", "              FHpppppppppppppppppppppppppppppppppppppEF        ", "               EHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHE         ", "               EGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG          ", "                C     C     C     C     C     C     C          ", "                                                               ")
                    .aisle("                                                               ", "                                                               ", "                C     C     C     C     C     C     C          ", "               EGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGE         ", "               EHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHE         ", "              FHpppppppppppppppppppppppppppppppppppppHF        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "      FFFFFFMLpppppppppppppppppppppppppppppppppppppppppLMFF    ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "           FLLpppppppppppppppppppppppppppppppppppppppppLLF     ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              FHpppppppppppppppppppppppppppppppppppppEF        ", "               EHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHHIIIHHE         ", "               EGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG          ", "                C     C     C     C     C     C     C          ", "                                                               ", "                                                               ")
                    .aisle("                                                               ", "                                                               ", "                                                               ", "                C     C     C     C     C     C     C          ", "               EGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGE         ", "               EpppppppppppppppppppppppppppppppppppppE         ", "              FHpppppppppppppppppppppppppppppppppppppHF        ", "            FFAApppppppppppppppppppppppppppppppppppppAAFF      ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "              AApppppppppppppppppppppppppppppppppppppAA        ", "            FFAApppppppppppppppppppppppppppppppppppppAAFF      ", "              FHpppppppppppppppppppppppppppppppppppppEF        ", "               EpppppppppppppppppppppppppppppppppppppE         ", "               EGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG          ", "                C     C     C     C     C     C     C          ", "                                                               ", "                                                               ", "                                                               ")
                    .aisle("                                                               ", "                                                               ", "                                                               ", "                                                               ", "                C     C     C     C     C     C     C          ", "                CLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLC          ", "               ECOLLLOCOLLLOCOLLLOCOLLLOCOLLLOCOLLLOCE         ", "              FLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLF        ", "              NLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLN        ", "              NLCGGGGGCGGGGGCGGGGGCGGGGGCGGGGGCGGGGGCLN        ", "              NLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLN        ", "              FLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLF        ", "               ECOLLLOCOLLLOCOLLLOCOLLLOCOLLLOCOLLLOC          ", "                CLLLLLCLLLLLCLLLLLCLLLLLCLLLLLCLLLLLC          ", "                C     C     C     C     C     C     C          ", "                                                               ", "                                                               ", "                                                               ", "                                                               ")
                    .aisle("                                                               ", "                                                               ", "                                                               ", "                                                               ", "                                                               ", "                  LpLpppLpLpppLpLpppLpLpppLpLpppLppLpppLpLpppLpLpppLpLpppLpLpppLpL            ", "                                                               ", "                                                               ", "                                                               ", "                                                               ", "                                                               ")
                    .where('A', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('c', MODULE.traceabilityPredicate.get())
                    .where('D', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('E', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteel316)))
                    .where('G', blocks(GTOBlocks.PRESSURE_RESISTANT_HOUSING_MECHANICAL_BLOCK.get()))
                    .where('H', blocks(GTOBlocks.SPACECRAFT_SEALING_MECHANICAL_BLOCK.get()))
                    .where('I', GTOPredicates.light())
                    .where('J', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get()))
                    .where('K', blocks(GTOBlocks.ALUMINUM_ALLOY_8090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('L', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('M', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('N', blocks(GTOBlocks.LOAD_BEARING_STRUCTURAL_STEEL_MECHANICAL_BLOCK.get()))
                    .where('O', blocks(Stream.of(GTMachines.HULL).map(MachineDefinition::get).toArray(IMachineBlock[]::new)))
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/space_station_control_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    // 工业空间站六向衔接舱
    public static final MachineDefinition SPACE_STATION_DOCKING_MODULE = multiblock("space_station_docking_module", "工业空间站六向衔接舱", Conjunction::new)
            .allRotation()
            .workableInSpace()
            .tooltips(GTOMachineTooltips.INSTANCE.getConjunctionSpaceStationModuleTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                      ", "                      ", "                      ", "           ABA        ", "          ACDCA       ", "         ACpppCA      ", "         BDpppDB      ", "         ACpppCA      ", "          ACDCA       ", "           ABA        ", "                      ", "                      ", "                      ")
                    .aisle("                      ", "                      ", "                      ", "           ABA        ", "          ACcCA       ", "         ACpppCA      ", "         BcpppcB      ", "         ACpppCA      ", "          ACcCA       ", "           ABA        ", "                      ", "                      ", "                      ")
                    .aisle("                      ", "                      ", "                      ", "           EEE        ", "       EEEECCCEEEE    ", "      EEEECpppCEEEE   ", "      EEEECpppCEEEE   ", "      EEEECpppCEEEE   ", "       EEEECCCEEEE    ", "           EEE        ", "                      ", "                      ", "                      ")
                    .aisle("           ABA        ", "           ABA        ", "           EEE        ", "       EEEECCCEEEE    ", "      EEEEEGGGEEEEE   ", "   AAECGGGGpppGGGGCEAA", "   BBECGHHGpppGHHGCEBB", "   AAECGGGGpppGGGGCEAA", "      EEEEEGGGEEEEE   ", "       EEEECCCEEEE    ", "           EEE        ", "           ABA        ", "           ABA        ")
                    .aisle("          ACDCA       ", "          ACcCA       ", "       EEEECCCEEEE    ", "      EEEEEGGGEEEEE   ", "   AAEFFFFFFFFFFFFFEAA", "CCCCCCpppppppppppppCCC", "CIDDcCpppppppppppppCcD", "CCCCCCpppppppppppppCCC", "   AAEFFFFFFFFFFFFFEAA", "      EEEEEGGGEEEEE   ", "       EEEECCCEEEE    ", "          ACcCA       ", "          ACDCA       ")
                    .aisle("         ACpppCA      ", "         ACpppCA      ", "      EEEECpppCEEEE   ", "   AAECGGGGpppGGGGCEAA", "   CCCpppppppppppppCCC", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "   CCCpppppppppppppCCC", "   AAECGGGGpppGGGGCEAA", "      EEEECpppCEEEE   ", "         ACpppCA      ", "         ACpppCA      ")
                    .aisle("         BDpppDB      ", "         BcpppcB      ", "      EEEECpppCEEEE   ", "   BBECGHHGpppGHHGCEBB", "   DcCpppppppppppppCcD", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "   DcCpppppppppppppCcD", "   BBECGHHGpppGHHGCEBB", "      EEEECpppCEEEE   ", "         BcpppcB      ", "         BDpppDB      ")
                    .aisle("         ACpppCA      ", "         ACpppCA      ", "      EEEECpppCEEEE   ", "   AAECGGGGpppGGGGCEAA", "   CCCpppppppppppppCCC", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "pppppppppppppppppppppp", "   CCCpppppppppppppCCC", "   AAECGGGGpppGGGGCEAA", "      EEEECpppCEEEE   ", "         ACpppCA      ", "         ACpppCA      ")
                    .aisle("          ACDCA       ", "          ACcCA       ", "       EEEECCCEEEE    ", "      EEEEEGGGEEEEE   ", "   AAEFFFFFFFFFFFFFEAA", "   CCCpppppppppppppCCC", "   DcCpppppppppppppCcD", "   CCCpppppppppppppCCC", "   AAEFFFFFFFFFFFFFEAA", "      EEEEEGGGEEEEE   ", "       EEEECCCEEEE    ", "          ACcCA       ", "          ACDCA       ")
                    .aisle("           ABA        ", "           ABA        ", "           EEE        ", "       EEEECCCEEEE    ", "      EEEEEGGGEEEEE   ", "   AAECGGGGpppGGGGCEAA", "   BBECGHHGpppGHHGCEBB", "   AAECGGGGpppGGGGCEAA", "      EEEEEGGGEEEEE   ", "       EEEECCCEEEE    ", "           EEE        ", "           ABA        ", "           ABA        ")
                    .aisle("                      ", "                      ", "                      ", "           EEE        ", "       EEEECCCEEEE    ", "      EEEECpppCEEEE   ", "      EEEECpppCEEEE   ", "      EEEECpppCEEEE   ", "       EEEECCCEEEE    ", "           EEE        ", "                      ", "                      ", "                      ")
                    .aisle("                      ", "                      ", "                      ", "           ABA        ", "          ACcCA       ", "         ACpppCA      ", "         BcpppcB      ", "         ACpppCA      ", "          ACcCA       ", "           ABA        ", "                      ", "                      ", "                      ")
                    .aisle("                      ", "                      ", "                      ", "           ABA        ", "          ACDCA       ", "         ACpppCA      ", "         BDpppDB      ", "         ACpppCA      ", "          ACDCA       ", "           ABA        ", "                      ", "                      ", "                      ")
                    .where('A', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('B', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('c', CONJUNCTION.traceabilityPredicate.get())
                    .where('D', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('E', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('F', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get()))
                    .where('G', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('H', GTOPredicates.light())
                    .where('I', controller(blocks(definition.get())))
                    .where('p', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
    // 工业空间站玻璃衔接舱
    public static final MachineDefinition SPACE_STATION_TRANSPARENT_DOCKING_MODULE = multiblock("space_station_transparent_docking_module", "工业空间站玻璃衔接舱", (h) -> new Conjunction(h) {

        @Override
        public Set<BlockPos> getModulePositions() {
            var pos = getPos();
            var fFacing = getFrontFacing();
            var uFacing = getUpwardsFacing();
            var pos1 = pos.relative(fFacing, 2).relative(RelativeDirection.LEFT.getRelative(fFacing, uFacing, isFlipped()), 19);
            ImmutableSet.Builder<BlockPos> builder = ImmutableSet.builder();
            var newFFacing = RelativeDirection.LEFT.getRelative(fFacing, uFacing, isFlipped());
            var newUFacing = RelativeDirection.UP.getRelative(newFFacing, uFacing, isFlipped());
            builder.add(pos1.relative(RelativeDirection.UP.getRelative(newFFacing, newUFacing, isFlipped()), 2));
            builder.add(pos1.relative(RelativeDirection.DOWN.getRelative(newFFacing, newUFacing, isFlipped()), 2));
            builder.add(pos1.relative(RelativeDirection.LEFT.getRelative(newFFacing, newUFacing, isFlipped()), 2));
            builder.add(pos1.relative(RelativeDirection.RIGHT.getRelative(newFFacing, newUFacing, isFlipped()), 2));
            return builder.build();
        }
    })
            .allRotation()
            .workableInSpace()
            .tooltips(GTOMachineTooltips.INSTANCE.getConjunctionSpaceStationModuleTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DUMMY_RECIPES)
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                     ", "                     ", "           A         ", "         BAAAB       ", "         BCCCB       ", "         BCCCB       ", "         BCCCB       ", "         BAAAB       ", "           A         ", "                     ", "                     ")
                    .aisle("                     ", "           A         ", "         BDDDB       ", "      DDDDEEEDDDD    ", "     DCCCCCCCCCCCD   ", "     DCCCCCCCCCCCD   ", "     DCCCCCCCCCCCD   ", "      DDDDEEEDDDD    ", "         BDDDB       ", "           A         ", "                     ")
                    .aisle("           A         ", "         BDDDB       ", "      DDDDEEEDDDD    ", "     DFFFDFFFDFFFD   ", "  GGDEHHHHHHHHHHHEDGG", "  BBDEHHHHHHHHHHHEDBB", "  GGDEHHHHHHHHHHHEDGG", "     DFFFDFFFDFFFD   ", "      DDDDEEEDDDD    ", "         BDDDB       ", "           A         ")
                    .aisle("         BAAAB       ", "      DDDDEEEDDDD    ", "     DFFFDFFFDFFFD   ", "  GGDIIIIIIIIIIIIIDGG", "  EEEHHHHHHHHHHHHHEEE", "KJJEEHHHHHHHHHHHHHEcJ", "  EEEHHHHHHHHHHHHHEEE", "  GGDIIIIIIIIIIIIIDGG", "     DFFFDFFFDFFFD   ", "      DDDDEEEDDDD    ", "         BAAAB       ")
                    .aisle("         BCCCB       ", "     DCCCCCCCCCCCD   ", "  GGDEHHHHHHHHHHHEDGG", "  EEEHHHHHHHHHHHHHEEE", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  EEEHHHHHHHHHHHHHEEE", "  GGDEHHHHHHHHHHHEDGG", "     DCCCCCCCCCCCD   ", "         BCCCB       ")
                    .aisle("         BCCCB       ", "     DCCCCCCCCCCCD   ", "  BBDEHHHHHHHHHHHEDBB", "  JEEHHHHHHHHHHHHHEcJ", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  JEEHHHHHHHHHHHHHEcJ", "  BBDEHHHHHHHHHHHEDBB", "     DCCCCCCCCCCCD   ", "         BCCCB       ")
                    .aisle("         BCCCB       ", "     DCCCCCCCCCCCD   ", "  GGDEHHHHHHHHHHHEDGG", "  EEEHHHHHHHHHHHHHEEE", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  HHHHHHHHHHHHHHHHHHH", "  EEEHHHHHHHHHHHHHEEE", "  GGDEHHHHHHHHHHHEDGG", "     DCCCCCCCCCCCD   ", "         BCCCB       ")
                    .aisle("         BAAAB       ", "      DDDDEEEDDDD    ", "     DFFFDFFFDFFFD   ", "  GGDIIIIIIIIIIIIIDGG", "  EEEHHHHHHHHHHHHHEEE", "  JEEHHHHHHHHHHHHHEcJ", "  EEEHHHHHHHHHHHHHEEE", "  GGDIIIIIIIIIIIIIDGG", "     DFFFDFFFDFFFD   ", "      DDDDEEEDDDD    ", "         BAAAB       ")
                    .aisle("           A         ", "         BDDDB       ", "      DDDDEEEDDDD    ", "     DFFFDFFFDFFFD   ", "  GGDEHHHHHHHHHHHEDGG", "  BBDEHHHHHHHHHHHEDBB", "  GGDEHHHHHHHHHHHEDGG", "     DFFFDFFFDFFFD   ", "      DDDDEEEDDDD    ", "         BDDDB       ", "           A         ")
                    .aisle("                     ", "           A         ", "         BDDDB       ", "      DDDDEEEDDDD    ", "     DCCCCCCCCCCCD   ", "     DCCCCCCCCCCCD   ", "     DCCCCCCCCCCCD   ", "      DDDDEEEDDDD    ", "         BDDDB       ", "           A         ", "                     ")
                    .aisle("                     ", "                     ", "           A         ", "         BAAAB       ", "         BCCCB       ", "         BCCCB       ", "         BCCCB       ", "         BAAAB       ", "           A         ", "                     ", "                     ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.StainlessSteel316)))
                    .where('B', blocks(GTOBlocks.ALUMINUM_ALLOY_7050_SUPPORT_MECHANICAL_BLOCK.get()))
                    .where('C', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('c', CONJUNCTION.traceabilityPredicate.get())
                    .where('D', blocks(GTOBlocks.TITANIUM_ALLOY_PROTECTIVE_MECHANICAL_BLOCK.get()))
                    .where('E', blocks(GTOBlocks.TITANIUM_ALLOY_INTERNAL_FRAME.get()))
                    .where('F', GTOPredicates.light())
                    .where('G', blocks(GTOBlocks.ALUMINUM_ALLOY_2090_SKIN_MECHANICAL_BLOCK.get()))
                    .where('H', ISpacePredicateMachine.innerBlockPredicate.get())
                    .where('I', blocks(GTOBlocks.SPACE_STATION_CONTROL_CASING.get()))
                    .where('J', blocks(GTOBlocks.SPACECRAFT_DOCKING_CASING.get()))
                    .where('K', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();
}
