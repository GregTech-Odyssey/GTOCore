package com.gtocore.common.data.machines;

import com.gtocore.api.pattern.GTOPredicates;
import com.gtocore.common.data.GTOBlocks;
import com.gtocore.common.data.GTOMaterials;
import com.gtocore.common.data.GTORecipeTypes;
import com.gtocore.common.data.translation.GTOMachineStories;
import com.gtocore.common.data.translation.GTOMachineTooltips;
import com.gtocore.common.machine.multiblock.electric.processing.CompoundExtremeCoolingMachine;

import com.gtolib.GTOCore;
import com.gtolib.api.machine.MultiblockDefinition;
import com.gtolib.api.machine.multiblock.CoilCrossRecipeMultiblockMachine;
import com.gtolib.api.machine.multiblock.CrossRecipeMultiblockMachine;
import com.gtolib.api.machine.multiblock.CustomParallelMultiblockMachine;
import com.gtolib.api.machine.multiblock.ElectricMultiblockMachine;
import com.gtolib.api.recipe.modifier.RecipeModifierFunction;
import com.gtolib.utils.MultiBlockFileReader;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.pattern.MultiblockShapeInfo;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.*;

import java.util.ArrayList;
import java.util.List;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gtocore.utils.register.MachineRegisterUtils.multiblock;

public final class MultiBlockF {

    public static void init() {}

    public static final MultiblockMachineDefinition SUPER_BLAST_SMELTER = multiblock("super_blast_smelter", "超级冶炼炉", CoilCrossRecipeMultiblockMachine.createHatchParallel(true))
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getSuperBlastSmelterTooltips().getSupplier())
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.2")
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.BLAST_RECIPES)
            .recipeTypes(GCYMRecipeTypes.ALLOY_BLAST_RECIPES)
            .block(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING.get()))
                    .where('D', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('E', blocks(GTBlocks.CASING_ENGINE_INTAKE.get()))
                    .where('F', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('G', blocks(GTBlocks.FIREBOX_BRONZE.get()))
                    .where('H', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('I', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('J', blocks(GTBlocks.FIREBOX_STEEL.get()))
                    .where('K', blocks(GTBlocks.CASING_EXTREME_ENGINE_INTAKE.get()))
                    .where('L', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('M', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('N', blocks(GTBlocks.FIREBOX_TITANIUM.get()))
                    .where('O', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('P', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('Q', blocks(GTBlocks.FIREBOX_TUNGSTENSTEEL.get()))
                    .where('R', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('S', heatingCoils())
                    .where('T', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadah)))
                    .where('U', abilities(MUFFLER))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/high_temperature_smelting_casing"), GTCEu.id("block/multiblock/gcym/blast_alloy_smelter"))
            .register();

    public static final MultiblockMachineDefinition SUPER_PARTICLE_COLLIDER = multiblock("super_particle_collider", "超级粒子对撞机", ElectricMultiblockMachine::new)
            .allRotation()
            .parallelizableTooltips()
            .laserTooltips()
            .recipeTypes(GTORecipeTypes.SUPER_PARTICLE_COLLIDER_RECIPES)
            .parallelizableOverclock()
            .block(GTOBlocks.LAFIUM_MECHANICAL_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('a', controller(blocks(definition.get())))
                    .where('b', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('c', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get()))
                    .where('d', blocks(GTOBlocks.AGGREGATIONE_CORE.get()))
                    .where('d', blocks(GTOBlocks.ACCELERATED_PIPELINE.get()))
                    .where('e', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('f', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahEnriched)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/lafium_mechanical_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition COMPOUND_EXTREME_COOLING_UNIT = multiblock("compound_extreme_cooling_unit", "复合式极端冷却装置", CompoundExtremeCoolingMachine::new)
            .allRotation()
            .tooltips(GTOMachineStories.INSTANCE.getCompoundExtremeCoolingUnitTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.VACUUM_RECIPES)
            .recipeTypes(GTORecipeTypes.PLASMA_CONDENSER_RECIPES)
            .block(GTBlocks.CASING_ALUMINIUM_FROSTPROOF)
            .pattern(definition -> CompoundExtremeCoolingMachine.getBlockPattern(0, definition))
            .shapeInfos(definition -> {
                List<MultiblockShapeInfo> shapeInfos = new ArrayList<>();
                for (int i = 0; i < 2; i++) {
                    shapeInfos.addAll(MultiblockDefinition.getMatchingShapes(false, CompoundExtremeCoolingMachine.getBlockPattern(i, definition)));
                }
                return shapeInfos;
            })
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_frost_proof"), GTCEu.id("block/multiblock/vacuum_freezer"))
            .register();

    public static final MultiblockMachineDefinition COMPOUND_DISTILLATION_FRACTIONATOR = multiblock("compound_distillation_fractionator", "复合式蒸馏分馏塔", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getCompoundDistillationTowerTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.DISTILLATION_RECIPES)
            .recipeTypes(GTORecipeTypes.EVAPORATION_RECIPES)
            .block(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('A', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenCarbide)))
                    .where('D', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('E', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('F', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('G', blocks(GTBlocks.HERMETIC_CASING_UHV.get()))
                    .where('H', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('I', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('J', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSLASteel)))
                    .where('L', blocks(GTOBlocks.FLOCCULATION_CASING.get()))
                    .where('M', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('N', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.WatertightSteel)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/strengthen_the_base_block"), GTCEu.id("block/multiblock/gcym/large_distillery"))
            .register();

    public static final MultiblockMachineDefinition SUPERCONDUCTING_ELECTROMAGNETISM = multiblock("superconducting_electromagnetism", "超导电磁工厂", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getSuperconductingElectromagnetismTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.POLARIZER_RECIPES)
            .recipeTypes(GTRecipeTypes.ELECTROMAGNETIC_SEPARATOR_RECIPES)
            .recipeTypes(GTRecipeTypes.ELECTROLYZER_RECIPES)
            .block(GTOBlocks.LAFIUM_MECHANICAL_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('C', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('D', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get())
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('E', blocks(GCYMBlocks.MOLYBDENUM_DISILICIDE_COIL_BLOCK.get()))
                    .where('F', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where('H', blocks(GTOBlocks.ACCELERATED_PIPELINE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/lafium_mechanical_casing"), GTOCore.id("block/multiblock/general0"))
            .register();

    public static final MultiblockMachineDefinition CRYSTAL_BUILDER = multiblock("crystal_builder", "晶体构建者", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getCrystalBuilderTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.AUTOCLAVE_RECIPES)
            .recipeTypes(GTORecipeTypes.CRYSTALLIZATION_RECIPES)
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('A', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('B', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('C', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('D', blocks(GTOBlocks.PIKYONIUM_MACHINE_CASING.get()))
                    .where('E', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('F', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('G', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('H', blocks(GTOBlocks.LASER_CASING.get()))
                    .where('I', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('J', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('K', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('L', blocks(GTOBlocks.MOLECULAR_COIL.get()))
                    .where('M', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('N', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('O', heatingCoils())
                    .where('P', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('Q', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('R', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTOCore.id("block/multiblock/general1"))
            .register();

    public static final MultiblockMachineDefinition HOLY_SEPARATOR = multiblock("holy_separator", "神圣分离者", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getHolySeparatorTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.CENTRIFUGE_RECIPES)
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('A', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('B', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('C', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', controller(blocks(definition.get())))
                    .where('E', blocks(GTOBlocks.MC_NYLON_TENSILE_MECHANICAL_SHELL.get()))
                    .where('F', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('G', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('H', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('I', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('J', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('K', blocks(GTOBlocks.ZIRCONIA_CERAMIC_HIGH_STRENGTH_BENDING_RESISTANCE_MECHANICAL_BLOCK.get()))
                    .where('L', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('M', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('N', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Mithril)))
                    .where('O', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('P', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('Q', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/gcym/large_cutter"))
            .register();

    public static final MultiblockMachineDefinition FIELD_EXTRUDER_FACTORY = multiblock("field_extruder_factory", "力场压模工厂", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getFieldExtruderFactoryTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.EXTRUDER_RECIPES)
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .where('A', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('B', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('D', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('E', blocks(GTOBlocks.LITHIUM_OXIDE_CERAMIC_HEAT_RESISTANT_SHOCK_RESISTANT_MECHANICAL_CUBE.get()))
                    .where('F', blocks(GTOBlocks.BOROSILICATE_GLASS.get()))
                    .where('G', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('H', blocks(GTOBlocks.ACCELERATED_PIPELINE.get()))
                    .where('I', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('J', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('K', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tritanium)))
                    .where('M', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTOCore.id("block/multiblock/general1"))
            .register();

    public static final MultiblockMachineDefinition SWARM_CORE = multiblock("swarm_core", "蜂群之心", CustomParallelMultiblockMachine.createParallel(m -> 8192, true))
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getSwarmCoreTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getSwarmCoreTooltips().getSupplier())
            .perfectOCTooltips()
            .laserTooltips()
            .recipeTypes(GTORecipeTypes.NANO_FORGE_RECIPES)
            .recipeModifiers(RecipeModifierFunction.overclocking(0.5, 1, 0.05))
            .block(GTOBlocks.NAQUADAH_ALLOY_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Amprosium)))
                    .where('B', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('C', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('D', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('E', blocks(GTOBlocks.EXTREME_DENSITY_CASING.get()))
                    .where('F', blocks(GTOBlocks.SPACETIME_ASSEMBLY_LINE_CASING.get()))
                    .where('G', blocks(GTOBlocks.ADVANCED_ASSEMBLY_LINE_UNIT.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('I', blocks(GTOBlocks.HOLLOW_CASING.get()))
                    .where('J', blocks(GTOBlocks.ELECTRON_PERMEABLE_AMPROSIUM_COATED_GLASS.get()))
                    .where('K', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where('M', blocks(GTOBlocks.COSMIC_NEUTRONIUM_BOROSILICATE_GLASS.get()))
                    .where('N', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where('O', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('P', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('Q', blocks(GTOBlocks.DIMENSIONAL_BRIDGE_CASING.get()))
                    .where('R', blocks(GTOBlocks.NAQUADRIATICTARANIUM_COIL_BLOCK.get()))
                    .where('S', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('T', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/hyper_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_assembler"))
            .register();
}
