package com.gtocore.common.data.machines;

import com.gtocore.api.machine.part.GTOPartAbility;
import com.gtocore.api.pattern.GTOPredicates;
import com.gtocore.client.renderer.machine.FluidRenderer;
import com.gtocore.client.renderer.machine.SpaceElevatorRenderer;
import com.gtocore.common.data.GTOBlocks;
import com.gtocore.common.data.GTOMachines;
import com.gtocore.common.data.GTOMaterials;
import com.gtocore.common.data.GTORecipeTypes;
import com.gtocore.common.machine.multiblock.electric.space.SuperSpaceElevatorMachine;
import com.gtocore.common.machine.multiblock.water.*;
import com.gtocore.config.GTOConfig;

import com.gtolib.GTOCore;
import com.gtolib.api.annotation.NewDataAttributes;
import com.gtolib.api.annotation.component_builder.ComponentBuilder;
import com.gtolib.api.annotation.component_builder.StyleBuilder;
import com.gtolib.api.machine.multiblock.CoilCrossRecipeMultiblockMachine;
import com.gtolib.api.machine.multiblock.CoilMultiblockMachine;
import com.gtolib.api.machine.multiblock.CrossRecipeMultiblockMachine;
import com.gtolib.api.machine.multiblock.ElectricMultiblockMachine;
import com.gtolib.utils.MachineUtils;
import com.gtolib.utils.MultiBlockFileReader;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.GCYMBlocks;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.gregtechceu.gtceu.common.data.GTMaterials;
import com.gregtechceu.gtceu.common.data.GTRecipeTypes;

import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LightningBolt;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.Blocks;

import committee.nova.mods.avaritia.init.registry.ModBlocks;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gtocore.common.block.BlockMap.SEPMMAP;
import static com.gtolib.api.GTOValues.POWER_MODULE_TIER;
import static com.gtolib.utils.register.MachineRegisterUtils.multiblock;

public final class MultiBlockB {

    public static void init() {}

    public static final MultiblockMachineDefinition GRAVITATION_SHOCKBURST = multiblock("gravitation_shockburst", "引力震爆器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.GRAVITATION_SHOCKBURST_RECIPES)
            .recipeTypes(GTORecipeTypes.ELECTRIC_IMPLOSION_COMPRESSOR_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.CREATE_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("aaaaaaaaa", "         ", "         ", "         ", "         ", "         ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b ccc b ", " bcccccb ", " bcccccb ", " bcccccb ", " b ccc b ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcccccb ", " bcc ccb ", " bcccccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcc ccb ", " bc   cb ", " bcc ccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcccccb ", " bcc ccb ", " bcccccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b ccc b ", " bcccccb ", " bcccccb ", " bcccccb ", " b ccc b ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", "aaaaaaaaa")
                    .aisle("aaaa~aaaa", "         ", "         ", "         ", "         ", "         ", "aaaaaaaaa")
                    .where('a', blocks(GTOBlocks.CREATE_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(OPTICAL_DATA_RECEPTION).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1)))
                    .where('b', blocks(GTOBlocks.INFINITY_GLASS.get()))
                    .where('c', blocks(ModBlocks.infinity.get()))
                    .where('~', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/create_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition DIGESTION_TANK = multiblock("digestion_tank", "煮解池", CoilMultiblockMachine.createCoilMachine(false, true))
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.DIGESTION_TREATMENT_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("#OOOOO#", "#YMMMY#", "##YYY##", "#######")
                    .aisle("OXXXXXO", "YMAAAMY", "#YAAAY#", "#YYYYY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXXXXXO", "YMAAAMY", "#YAAAY#", "#YYYYY#")
                    .aisle("#OOSOO#", "#YMMMY#", "##YYY##", "#######")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('K', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('Y', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('M', heatingCoils())
                    .where('O', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('A', air())
                    .where('#', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public static final MultiblockMachineDefinition WOOD_DISTILLATION = multiblock("wood_distillation", "木化工厂", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.WOOD_DISTILLATION_RECIPES)
            .laserTooltips()
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('A', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('B', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('C', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('D', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ruridit)))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('G', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('H', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('I', blocks(GTBlocks.HERMETIC_CASING_ZPM.get()))
                    .where('J', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('K', air())
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where('M', blocks(GCYMBlocks.CASING_CORROSION_PROOF.get()))
                    .where('N', blocks(GTOBlocks.HASTELLOY_N_75_PIPE.get()))
                    .where('O', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('P', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('Q', abilities(MUFFLER))
                    .where('R', blocks(GTBlocks.CASING_STEEL_TURBINE.get()))
                    .where('S', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('T', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('U', blocks(GTBlocks.CASING_TITANIUM_TURBINE.get()))
                    .where('V', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('W', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('X', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('Y', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/blast_furnace"))
            .register();

    public static final MultiblockMachineDefinition DESULFURIZER = multiblock("desulfurizer", "脱硫机", CoilCrossRecipeMultiblockMachine::createInfiniteCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.DESULFURIZER_RECIPES)
            .coilParallelTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("CCCCCIIIIIII", "CCCCCILILILI", "CCCCCILILILI", "            ", "            ", "            ")
                    .aisle("CCCCCIIIIIII", "CGCCCXXXXXXI", "CCCCCILILILI", "  CCCILILILI", "  CCCIIIIIII", "            ")
                    .aisle("CCCCCIIIIIII", "CGGGGILILILI", "CCCCCILILILI", "  CXXXXXXXXI", "  CCCIIIIIII", "            ")
                    .aisle("CCCCCIIIIIII", "CGCPCXXXXXXI", "CCCCCILILILI", "  DDDILILILI", "  DDDIIIIIII", "  DDD       ")
                    .aisle("CCCCCIIIIIII", "CCCPCILILILI", "CCCPCILILILI", "  DPD       ", "  DPD       ", "  DDD       ")
                    .aisle("  DDD       ", "  D~D       ", "  DDD       ", "  DDD       ", "  DDD       ", "  DDD       ")
                    .where('~', controller(blocks(definition.get())))
                    .where('I', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('X', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('P', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('G', blocks(GTBlocks.HERMETIC_CASING_MV.get()))
                    .where('D', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(24)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('L', heatingCoils())
                    .where('C', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition LIQUEFACTION_FURNACE = multiblock("liquefaction_furnace", "液化炉", CoilMultiblockMachine.createCoilMachine(false, true))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.LIQUEFACTION_FURNACE_RECIPES)
            .parallelizableOverclock()
            .moduleTooltips()
            .block(GTBlocks.CASING_INVAR_HEATPROOF)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("AAAAA", " BBB ", " AAA ")
                    .aisle("AAAAA", "B B B", "ACCCA")
                    .aisle("AAAAS", "BBEBB", "ACFCA")
                    .aisle("AAAAA", "B B B", "ACCCA")
                    .aisle("AAAAA", " BBB ", " AAA ")
                    .where('B', heatingCoils())
                    .where('C', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('E', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('A', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                            .setMinGlobalLimited(20)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('F', abilities(MUFFLER))
                    .where('S', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAA    ", "AAA    ", "AAA    ")
                    .aisle("BBB    ", "BDB    ", "BBB    ")
                    .aisle("BEBF   ", "E EF   ", "BEBF   ")
                    .aisle("BEBG   ", "E E    ", "BEBG   ")
                    .aisle("BEBF   ", "E EF   ", "BEBF   ")
                    .aisle("BBB   C", "BDB    ", "BBB    ")
                    .aisle("AAA    ", "AAA    ", "AAA    ")
                    .where('A', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(GTOPartAbility.ACCELERATE_HATCH).setMaxGlobalLimited(1)))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.CASING_STAINLESS_STEEL_GEARBOX.get()))
                    .where('E', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('G', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_heatproof"), GTCEu.id("block/multiblock/multi_furnace"))
            .register();

    public static final MultiblockMachineDefinition REACTION_FURNACE = multiblock("reaction_furnace", "反应炉", CoilMultiblockMachine.createCoilMachine(true, true))
            .nonYAxisRotation()
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.2")
            .recipeTypes(GTORecipeTypes.REACTION_FURNACE_RECIPES)
            .parallelizableOverclock()
            .moduleTooltips()
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("A   A", "ABBBA", "BBCBB", "BBBBB", " BBB ")
                    .aisle("     ", "BBBBB", "BDCDB", "BDCDB", "BAAAB")
                    .aisle("     ", "~BBBB", "CCCCC", "BCCCB", "BAFAB")
                    .aisle("     ", "BBBBB", "BDCDB", "BDCDB", "BAAAB")
                    .aisle("A   A", "ABBBA", "BBCBB", "BBBBB", " BBB ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('C', heatingCoils())
                    .where('D', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('B', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .setMinGlobalLimited(20)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('F', abilities(MUFFLER))
                    .where(' ', any())
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("EEEEE AAA ", "       A  ", "          ", "          ", "          ")
                    .aisle("EFFFEDBBBA", "      BBB ", "      BBB ", "      BBB ", "       B  ")
                    .aisle("EFFFEDBBBA", "     DBCBA", "      BCB ", "      BCB ", "     CCCB ")
                    .aisle("EFFFEDBBBA", "      BBB ", "      BBB ", "      BBB ", "       B  ")
                    .aisle("EEEEE AAA ", "  G    A  ", "          ", "          ", "          ")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(GTOPartAbility.ACCELERATE_HATCH).setMaxGlobalLimited(1)))
                    .where('B', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('C', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('F', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/blast_furnace"))
            .register();

    public static final MultiblockMachineDefinition MEGA_BREWER = multiblock("mega_brewer", "巨型酿造厂", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.BREWING_RECIPES)
            .recipeTypes(GTRecipeTypes.FERMENTING_RECIPES)
            .block(GCYMBlocks.CASING_CORROSION_PROOF)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('C', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('E', blocks(GTOBlocks.HERMETIC_CASING_UEV.get()))
                    .where('F', heatingCoils())
                    .where('G', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('H', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('I', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('J', blocks(GCYMBlocks.CASING_CORROSION_PROOF.get())
                            .setMinGlobalLimited(160)
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/corrosion_proof_casing"), GTCEu.id("block/multiblock/gcym/large_brewer"))
            .register();

    public static final MultiblockMachineDefinition FUEL_REFINING_COMPLEX = multiblock("fuel_refining_complex", "燃料精炼复合体", CoilCrossRecipeMultiblockMachine.createCoilParallelEBF())
            .nonYAxisRotation()
            .parallelizableTooltips()
            .laserTooltips()
            .coilParallelTooltips()
            .recipeTypes(GTORecipeTypes.FUEL_REFINING_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition) // , RelativeDirection.RIGHT,
                                                                          // RelativeDirection.UP,
                                                                          // RelativeDirection.BACK
                    .where('A', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('C', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('D', GTOPredicates.light())
                    .where('E', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('G', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('H', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('J', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSLASteel)))
                    .where('L', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('M', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('N', blocks(GTOBlocks.PPS_CORROSION_RESISTANT_MECHANICAL_HOUSING.get()))
                    .where('O', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('P', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('Q', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('R', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_MECHANICAL_CASING.get()))
                    .where('S', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.WatertightSteel)))
                    .where('T', blocks(GTOBlocks.OIL_GAS_TRANSPORTATION_PIPE_CASING.get()))
                    .where('U', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('V', blocks(GTOBlocks.CALCIUM_OXIDE_CERAMIC_ANTI_METAL_CORROSION_MECHANICAL_BLOCK.get()))
                    .where('W', blocks(GTOBlocks.INDUSTRIAL_FRAMELESS_GLASS.get()))
                    .where('X', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('Y', abilities(MUFFLER))
                    .where('Z', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('[', heatingCoils())
                    .where('\\', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where(']', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('^', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('_', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('`', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/gcym/large_brewer"))
            .register();

    public static final MultiblockMachineDefinition MICROORGANISM_MASTER = multiblock("microorganism_master", "微生物之主", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.INCUBATOR_RECIPES)
            .tooltipsText("无视辐射与洁净要求", "Ignores radiation and cleanliness requirements")
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTOBlocks.LAW_FILTER_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('F', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('G', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('H', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('I', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('J', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('K', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('L', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('M', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('N', blocks(GTBlocks.PLASTCRETE.get()))
                    .where('O', blocks(Blocks.SPONGE))
                    .where('P', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('Q', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('R', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('S', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public static final MultiblockMachineDefinition LIGHTNING_ROD = multiblock("lightning_rod", "引雷针", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.ARC_GENERATOR_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_PALLADIUM_SUBSTATION)
            .pattern(definition -> MultiBlockFileReader.start(definition) // , RelativeDirection.BACK,
                                                                          // RelativeDirection.UP,
                                                                          // RelativeDirection.LEFT
                    .where('A', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get())
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('D', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('E', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get()))
                    .where('F', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('H', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('I', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('J', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('K', GTOPredicates.glass())
                    .where('L', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('M', blocks(GTOBlocks.MOLECULAR_COIL.get()))
                    .where('N', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('O', blocks(GTOBlocks.MAGNESIUM_OXIDE_CERAMIC_HIGH_TEMPERATURE_INSULATION_MECHANICAL_BLOCK.get()))
                    .where('P', blocks(Blocks.POLISHED_DEEPSLATE_SLAB))
                    .where('Q', GTOPredicates.light())
                    .where('R', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .onWorking(machine -> {
                if (GTOConfig.INSTANCE.lightningRodEffect && machine.self().getLevel() instanceof ServerLevel serverLevel && machine.self().getOffsetTimer() % serverLevel.random.nextInt(20, 200) == 0) {
                    LightningBolt entityToSpawn = EntityType.LIGHTNING_BOLT.create(serverLevel);
                    if (entityToSpawn != null) {
                        entityToSpawn.setPos(MachineUtils.getOffsetPos(9, 50, machine.self().getFrontFacing(), machine.self().getPos()).getCenter());
                        entityToSpawn.setVisualOnly(true);
                        serverLevel.addFreshEntity(entityToSpawn);
                    }
                }
                return true;
            })
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_palladium_substation"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition MAGNETIC_ENERGY_REACTION_FURNACE = multiblock("magnetic_energy_reaction_furnace", "磁能反应炉", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .tooltipsText("电容器满负荷运作中", "Capacitor at full charge.")
            .recipeTypes(GTRecipeTypes.ARC_FURNACE_RECIPES)
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GCYMBlocks.CASING_NONCONDUCTING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('B', heatingCoils())
                    .where('C', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('D', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get()))
                    .where('E', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('F', blocks(GTOBlocks.MAGTECH_CASING.get()))
                    .where('G', blocks(GTOBlocks.TRANSCENDENTALLY_AMPLIFIED_MAGNETIC_CONFINEMENT_CASING.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.NeodymiumMagnetic)))
                    .where('I', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('K', blocks(GTBlocks.BATTERY_EMPTY_TIER_III.get()))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where('M', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('N', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('O', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('a', blocks(GCYMBlocks.CASING_NONCONDUCTING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/nonconducting_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition HIGH_ENERGY_LASER_LATHE = multiblock("high_energy_laser_lathe", "高能激光车床", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.LATHE_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition) // , RelativeDirection.BACK,
                                                                          // RelativeDirection.UP,
                                                                          // RelativeDirection.LEFT
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('C', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('D', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('E', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('F', blocks(GTOBlocks.LASER_COOLING_CASING.get()))
                    .where('G', blocks(GCYMBlocks.CASING_LASER_SAFE_ENGRAVING.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('I', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('J', blocks(GTOBlocks.LASER_CASING.get()))
                    .where('K', blocks(GTOBlocks.ELECTRON_PERMEABLE_AMPROSIUM_COATED_GLASS.get()))
                    .where('L', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('M', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('N', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('O', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('P', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Ruby)))
                    .where('Q', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/gcym/large_cutter"))
            .register();

    public static final MultiblockMachineDefinition NEUTRONIUM_WIRE_CUTTING = multiblock("neutronium_wire_cutting", "中子丝线切割", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.CUTTER_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition) // , RelativeDirection.BACK,
                                                                          // RelativeDirection.UP,
                                                                          // RelativeDirection.LEFT
                    .where('A', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('B', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('E', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('F', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('I', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('K', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('L', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('M', blocks(GTOBlocks.EXTREME_DENSITY_CASING.get()))
                    .where('N', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Amprosium)))
                    .where('O', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('P', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('Q', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('R', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('S', controller(blocks(definition.get())))
                    .where('T', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/gcym/large_cutter"))
            .register();

    public static final MultiblockMachineDefinition NANO_PHAGOCYTOSIS_PLANT = multiblock("nano_phagocytosis_plant", "纳米吞噬厂", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltipsText("使用纳米蜂群无情的撕碎一切", "Use nanitess to mercilessly tear everything apart.")
            .recipeTypes(GTRecipeTypes.MACERATOR_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('B', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('C', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('E', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('F', blocks(GTOBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('G', blocks(GTBlocks.FUSION_COIL.get()))
                    .where('H', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('I', blocks(GTOBlocks.FUSION_COIL_MK2.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('K', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('L', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('M', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('N', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('O', blocks(GTOBlocks.ECHO_CASING.get()))
                    .where('P', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('Q', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('R', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.NeodymiumMagnetic)))
                    .where('S', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('T', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('U', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('V', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('W', blocks(GTBlocks.CASING_TITANIUM_TURBINE.get()))
                    .where('X', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ultimet)))
                    .where('Y', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('Z', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('a', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/naquadah_reinforced_plant_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition SUPER_SPACE_ELEVATOR = multiblock("super_space_elevator", "超级太空电梯", SuperSpaceElevatorMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .tooltips(NewDataAttributes.CAPACITY.create(c -> c.addLines("64个模块", "64 modules")))
            .tooltips(ComponentBuilder.create().addStoryLine(
                    """
                            GTO寰宇格雷科技有限公司历经数代人的努力，终于建成了超级太空电梯。
                            这座庞然大物不仅是工程奇迹，更是人类征服宇宙的终极象征。
                            董事长站在控制室内，凝视着这个能同时运行64个模块的超级结构。
                            "今天，我们不再仅仅是地球的居民，"他激动地对员工们说道。
                            超级太空电梯的运转声如同宇宙的心跳，承载着公司最伟大的愿景。
                            它几乎戳破了现实与理想的边界，让星辰大海不再是遥不可及的梦。
                            从此，格雷科技的名字将与人类的星际征程永远联系在一起。
                            """,
                    """
                            GTO Corporation, after generations of effort, finally completed the Super Space Elevator.
                            This colossal structure is not just an engineering marvel, but humanity's ultimate symbol of cosmic conquest.
                            The CEO stood in the control room, gazing at this super structure capable of running 64 modules simultaneously.
                            "Today, we are no longer merely inhabitants of Earth," he excitedly told his employees.
                            The hum of the Super Space Elevator resonated like the heartbeat of the universe, carrying the company's greatest vision.
                            It almost pierced the boundary between reality and ideals, making the sea of stars no longer an unreachable dream.
                            Henceforth, GregTech's name would be forever linked with humanity's interstellar journey.
                            """).build())
            .tooltips(NewDataAttributes.MAIN_FUNCTION.create(
                    v -> v.addLines("模块运行优化系统", "Module Operation Optimization System"),
                    p -> p.addCommentLines(
                            """
                                    提升电压等级可大幅减少模块的运行时间
                                    额外提升为模块提供的并行数
                                    运行前需提供128*(机器等级-7)的算力""",
                            """
                                    Increasing voltage tier can greatly reduce the duration for modules
                                    Additional increase in the parallelism provided by the module
                                    Requires 128*(Machine Tier - 7) of computing power before operation""")))
            .block(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('B', blocks(GTOBlocks.SPACE_ELEVATOR_INTERNAL_SUPPORT.get()))
                    .where('C', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('D', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('E', blocks(GTOBlocks.SPACE_ELEVATOR_MODULE_BASE.get()))
                    .where('F', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()).or(blocks(GTOBlocks.MODULE_CONNECTOR.get()).setPreviewCount(1)))
                    .where('G', blocks(GTOBlocks.SPACE_ELEVATOR_SUPPORT.get()))
                    .where('H', blocks(GTOBlocks.HSSS_BOROSILICATE_GLASS.get()))
                    .where('I', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('J', blocks(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where('M', GTOPredicates.tierBlock(SEPMMAP, POWER_MODULE_TIER))
                    .where('N', blocks(GTOBlocks.SPACE_ELEVATOR_POWER_CORE.get()))
                    .where('X', blocks(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING.get())
                            .or(abilities(GTOPartAbility.ITEMS_INPUT).setExactLimit(1))
                            .or(abilities(INPUT_ENERGY).setExactLimit(1))
                            .or(abilities(COMPUTATION_DATA_RECEPTION).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .renderer(SpaceElevatorRenderer::new)
            .hasTESR(true)
            .register();

    public static final MultiblockMachineDefinition MEGA_BATH_TANK = multiblock("mega_bath_tank", "巨型浸洗池", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .recipeTypes(GTRecipeTypes.ORE_WASHER_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('B', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('C', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('D', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSLASteel)))
                    .where('F', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('G', blocks(GTOBlocks.FLOCCULATION_CASING.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where('I', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('K', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('L', blocks(GTOBlocks.LASER_CASING.get()))
                    .where('M', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('N', blocks(GTBlocks.FILTER_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/reinforced_sterile_water_plant_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition MEGA_VACUUM_DRYING_FURNACE = multiblock("mega_vacuum_drying_furnace", "巨型真空干燥炉", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.VACUUM_DRYING_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('E', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('F', blocks(GTOBlocks.RED_STEEL_CASING.get()))
                    .where('G', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('H', heatingCoils())
                    .where('I', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tungsten)))
                    .where('K', blocks(GTBlocks.COMPUTER_CASING.get()))
                    .where('L', blocks(GTBlocks.COMPUTER_HEAT_VENT.get()))
                    .where('M', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('O', blocks(GTBlocks.HERMETIC_CASING_LuV.get()))
                    .where('P', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('Q', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('a', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition MOLECULAR_OSCILLATION_DEHYDRATOR = multiblock("molecular_oscillation_dehydrator", "分子震荡脱水装置", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .tooltips(NewDataAttributes.MAIN_FUNCTION.create(v -> v.addLines("脱水！脱水！脱水！", "Dehydration! Dehydration! Dehydration!")))
            .recipeTypes(GTORecipeTypes.DEHYDRATOR_RECIPES)
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('B', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('C', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('a', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('E', blocks(GTOBlocks.RED_STEEL_CASING.get()))
                    .where('F', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('G', heatingCoils())
                    .where('H', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('I', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('J', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/cleanroom"))
            .register();

    public static final MultiblockMachineDefinition HORIZONTAL_COMPRESSOR = multiblock("horizontal_compressor", "卧式压缩机", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.COMPRESSOR_RECIPES)
            .recipeTypes(GTORecipeTypes.GAS_COMPRESSOR_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('B', blocks(GCYMBlocks.CASING_VIBRATION_SAFE.get()))
                    .where('C', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('D', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Neutronium)))
                    .where('G', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('H', blocks(GCYMBlocks.CASING_REACTION_SAFE.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('J', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('K', blocks(GTBlocks.HERMETIC_CASING_UV.get()))
                    .where('L', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('a', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition WATER_PURIFICATION_PLANT = multiblock("water_purification_plant", "净化处理厂", WaterPurificationPlantMachine::new)
            .nonYAxisRotation()
            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    h -> h.addLines("处理单元链接系统", "Processing Unit Link System", StyleBuilder::setGold),
                    c -> c.addLines(
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("可以在", "Processing unit controllers can be placed freely within a ")
                                            .addLines("32", "32", StyleBuilder::setYellow)
                                            .addLines("个方块半径内自由放置处理单元控制器", " block radius"),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("为链接的处理", "Provide power to the linked processing ")
                                            .addLines("单元控制器", "unit controllers", StyleBuilder::setYellow)
                                            .addLines("提供电力", " power"),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("该多方块结构接受激光仓，默认耗能=输出水量x2^(输出的净化水等级等级-2)", "This multi-block structure accepts laser chambers, default energy consumption = input water count x 2^(output purification water tier - 2)"),
                                    p -> p,
                                    StyleBuilder::setOneTab))))

            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    h -> h.addLines("处理周期系统", "Processing Cycle System", StyleBuilder::setGold),
                    c -> c.addLines(
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("以固定的", "Operates with a fixed processing cycle of ")
                                            .addLines("120", "120", StyleBuilder::setYellow)
                                            .addLines("秒处理周期工作", " seconds"),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("所有链接的处理单元控制器都遵循这个周期，净化水输出量为输入水量x0.9mB", "All linked processing unit controllers follow this cycle; purified water output is the volume of input water x 0.9mB"),
                                    p -> p,
                                    StyleBuilder::setOneTab))))

            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    h -> h.addLines("技术说明", "Technical Description", StyleBuilder::setGreen),
                    c -> c.addLines(
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("水中的污染物和离子颗粒会在硅片和芯片切割和雕刻的精密过程中造成显著的缺陷", "Pollutants and ionic particles in water can cause significant defects during the precise processes of wafer and chip cutting and engraving", StyleBuilder::setGreen),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("通过一系列越来越精确和复杂的净化过程系统地净化水是至关重要的，而这个多方块结构是操作的核心", "It is crucial to systematically purify the water through a series of increasingly precise and complex processes, and this multi-block structure is the core of the operation", StyleBuilder::setGreen),
                                    p -> p,
                                    StyleBuilder::setOneTab))))
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.STERILE_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAA", "CEEEEEC", "CEFFFEC", "CEEEEEC", "CCCCCCC", "       ", "       ", "       ", "       ")
                    .aisle("AAAAAAA", "E     E", "E     E", "E     E", "CEEEEEC", " B   B ", " B   B ", " B   B ", " B   B ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CCC  ", "  CCC  ", "  CCC  ", "  CCC  ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CGC  ", "  CGC  ", "  CGC  ", "  CGC  ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CCC  ", "  CCC  ", "  CCC  ", "  CCC  ")
                    .aisle("AAAAAAA", "E     E", "E     E", "E     E", "CEEEEEC", " BBCBB ", " B   B ", " B   B ", " B   B ")
                    .aisle("AAAAAAA", "CEEEEEC", "CEEEEEC", "CEEEEEC", "CCCCCCC", "  BCB  ", "       ", "       ", "       ")
                    .aisle("AAAAAAA", "  BaB  ", "  B~B  ", "  BaB  ", "  BaB  ", "  BaB  ", "       ", "       ", "       ")
                    .where('~', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tungsten)))
                    .where('C', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('a', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get())
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2)))
                    .where('F', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('G', air())
                    .where('A', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('E', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/sterile_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition CLARIFIER_PURIFICATION_UNIT = multiblock("clarifier_purification_unit", "澄清器净化装置", ClarifierPurificationUnitMachine::new)
            .nonYAxisRotation()
            .tooltipsText("§a净化水等级§r: §f1§r", "§aPurified Water Level§r: §f1§r")
            .tooltipsText("在处理一定量的水后滤膜会堵塞，此时需要更换新过滤膜", "After processing a certain amount of water, the membrane will become clogged. At this point, you need to replace it with a new one.")
            .tooltipsText("----------------------------------------------------------------", "----------------------------------------------------------------")
            .tooltipsText("§a§o水处理的第一步是用RO膜过滤掉蒸馏水中的杂质", "§a§oThe first step is to filter the impurities from the distilled water.")
            .tooltipsText("§a§o移除粗处理未能过滤的微粒杂质", "§a§oRemove particles failed to be removed during rough processing.")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("  AAAAA                        ", "  AAAAA                        ", "  BBCBB                        ", "  BBCBB                        ", "  BBCBB                        ", "  BBCBB                        ", "  BBCBB                        ", "  BBCBB                        ", "  BBBBB                        ", "    B                          ", "                               ", "                               ", "                               ")
                    .aisle(" BBBBBBB                       ", " B     B                       ", " B     B                       ", " B     B                       ", " B     B                       ", " B     B                       ", " B     B                       ", " B     B                       ", " B     B                       ", "  BBBBB                        ", "                               ", "                               ", "                               ")
                    .aisle("ABBBBBBBB    D D    D D    D D ", "A       B    D D    D D    D D ", "B       B    BBB    BBB    BBB ", "B       B    ECE    ECE    ECE ", "B       B    ECE    ECE    ECE ", "B       B    ECE    ECE    ECE ", "B       B    BBB    BBB    BBB ", "B       B                      ", "B       B                      ", " BBB BBB                       ", "    B                          ", "                               ", "                               ")
                    .aisle("ABBBBBBBBB  D   D  D   D  D   D", "A       BB  DBBBD  DBBBD  DBBBD", "B       B   BB BB  BB BB  BB BB", "B       B   E   E  E   E  E   E", "B       B   E   E  E   E  E   E", "B       B   E   E  E   E  E   E", "B       B   BB BB  BB BB  BB BB", "B       B    EEE    EEE    EEE ", "B       B                      ", " BB   BB                       ", "   BBB                         ", "    B                          ", "                               ")
                    .aisle("AGGGGFFFFFFFFFFFFFFFFFFFFFFFF  ", "A        B   BFB    BFB    BFB ", "C        B  B H B  B H B  B H B", "C        B  C H C  C H C  C H C", "C        B  C H C  C H C  C H C", "C        B  C H C  C H C  C H C", "C        B  B H B  B H B  B H B", "C        B   EGE    EGE    EGE ", "B        B    G      G      G  ", "BB     BB     G      G      G  ", "  BBGBB       G      G      G  ", "   BGB        G      G      G  ", "    GGGGGGGGGGGGGGGGGGGGGGGGG  ")
                    .aisle("ABBBFFBBBB  D   D  D   D  D   D", "A       BB  DBBBD  DBBBD  DBBBD", "B       B   BB BB  BB BB  BB BB", "B       B   E   E  E   E  E   E", "B       B   E   E  E   E  E   E", "B       B   E   E  E   E  E   E", "B       B   BB BB  BB BB  BB BB", "B       B    EEE    EEE    EEE ", "B       B                      ", " BB   BB                       ", "   BBB                         ", "    B                          ", "                               ")
                    .aisle("ABBBFBBBB    D D    D D    D D ", "A       B    D D    D D    D D ", "B       B    BBB    BBB    BBB ", "B       B    ECE    ECE    ECE ", "B       B    ECE    ECE    ECE ", "B       B    ECE    ECE    ECE ", "B       B    BBB    BBB    BBB ", "B       B                      ", "B       B                      ", " BBB BBB                       ", "    B                          ", "                               ", "                               ")
                    .aisle(" BBBFBBB                       ", " B     B                       ", " B     B                       ", " B     B                       ", " B     B                       ", " B     B                       ", " B     B                       ", " B     B                       ", " B     B                       ", "  BBBBB                        ", "                               ", "                               ", "                               ")
                    .aisle("  AAAAA                        ", "  AAIAA                        ", "  BBCBB                        ", "  BBCBB                        ", "  BBCBB                        ", "  BBCBB                        ", "  BBCBB                        ", "  BBCBB                        ", "  BBBBB                        ", "    B                          ", "                               ", "                               ", "                               ")
                            .where('A', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(3))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('C', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('E', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('F', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('G', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('H', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('I', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .renderer(FluidRenderer.create(GTOCore.id("block/reinforced_sterile_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor")))
            .hasTESR(true)
            .register();


    public static final MultiblockMachineDefinition OZONATION_PURIFICATION_UNIT = multiblock("ozonation_purification_unit", "臭氧净化装置", OzonationPurificationUnitMachine::new)
            .nonYAxisRotation()
            .tooltipsText("§a净化水等级§r: §f2§r", "§aPurified Water Level§r: §f2§r")
            .tooltipsText("每个周期的初始pH值在§66.0§r至§68.0§r之间变化", "The initial pH value of each cycle varies between §64.5§r to §69.5§r.")
            .tooltipsText("如果周期结束时pH值在§67.0 pH§r的§6±0.05 pH§r范围内，则配方总是成功", "If the pH value is within the §67.0 pH§r's §6±0.05 pH§r range at the end of the cycle, the recipe will always succeed.")
            .tooltipsText("否则，配方总是失败", "Otherwise, the recipe will always fail.")
            .tooltipsText("机器工作时可使用pH传感器读取当前pH值并输出红石信号", "The machine can read the current pH value and output a redstone signal using a pH sensor.")
            .tooltipsText("每秒消耗所有输入的§b氢氧化钠§r和§b盐酸§r", "Consumes all input of §bSodium Hydroxide§r and §bHydrochloric Acid§r every second.")
            .tooltipsText("每消耗1个§b氢氧化钠粉§r，pH值提高§60.01§r", "Each consumed §bSodium Hydroxide Powder§r raises the pH value by §60.01§r.")
            .tooltipsText("每消耗§610§rmB§b盐酸§r，pH值降低§60.01§r", "Each consumed §610§rmB§bHydrochloric Acid§r lowers the pH value by §60.01§r.")
            .tooltipsText("----------------------------------------------------------------", "----------------------------------------------------------------")
            .tooltipsText("§a水处理的第二步是进行连续电去离子处理，§o", "The second step is EDI processing")
            .tooltipsText("§a§o利用电流推动水中离子在离子交换膜之间定向移动，并由离子交换树脂进行深度净化", "Pushing the ions in water with current and purify the water deeply with ion exchange resins.")
            .tooltipsText("§a§o长时间使用后需要使用酸与碱清洗交换膜表面杂质", "Requires acid and base to clean the impurities on the mambrane")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.OZONE_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                       ABBBA ", "                        CDC  ", "                        CDC  ", "                        CDC  ", "                        CDC  ", "                        CCC  ", "                             ")
                    .aisle("     AA     A     AA  AACECAA", "     CCCCCCCCCCCCCCC   F   F ", "     CFFFDDDDDDDFFFC   F   F ", "     CCCCCCCCCCCCCCC   F   F ", "     AA     A     AA   F   F ", "                       F   F ", "                       ACCCA ")
                    .aisle("BBB  CCCCCCCCCCCCCCC  CCCECCB", "BBB  C G   H   G   C  C     C", "CCC  C  G   H   G  C  C     C", "CCC  C   G   H   G C  C     C", "     CCCCCCCCCCCCCCC  C     C", "                      C     C", "                       CCCCC ")
                    .aisle("BCC  CFFFFFFFFFFFFFC  CCCEEEB", "B C  CG   H   G   HC  C     D", "CEEEEEEFFFFFFFFFFFEEEEEE    D", "CCC  CH   G   H   GC  CE    D", "     CFFFFFFFFFFFFFC  CE    D", "                      CEEE  C", "                       CCCCC ")
                    .aisle("BBB  CCCCCCCCCCCCCCC  CCCECCB", "BIB  C   H   G   H C  C     C", "CCC  C  H   G   H  C  C     C", "CCC  C H   G   H   C  C     C", "     CCCCCCCCCCCCCCC  C     C", "                      C     C", "                       CCCCC ")
                    .aisle("     AA     A     AA  AACECAA", "     CCCCCCCCCCCCCCC   F   F ", "     CFFFDDDDDDDFFFC   F   F ", "     CCCCCCCCCCCCCCC   F   F ", "     AA     A     AA   F   F ", "                       F   F ", "                       ACCCA ")
                    .aisle("                       ABBBA ", "                        CDC  ", "                        CDC  ", "                        CDC  ", "                        CDC  ", "                        CCC  ", "                             ")
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSSE)))
                    .where('B', blocks(GTOBlocks.OZONE_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('C', blocks(GTOBlocks.OZONE_CASING.get()))
                    .where('D', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('E', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('F', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('G', blocks(GTOBlocks.CATHODE_ADSORPTION_RESIN.get()))
                    .where('H', blocks(GTOBlocks.ANODE_ADSORPTION_RESIN.get()))
                    .where('I', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/ozone_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition FLOCCULATION_PURIFICATION_UNIT = multiblock("flocculation_purification_unit", "絮凝净化装置", FlocculationPurificationUnitMachine::new)
            .nonYAxisRotation()
            .tooltipsText("§a净化水等级§r: §f3§r", "§aPurified Water Level§r: §f3§r")
            .tooltipsText("提供§b冷却液§r与§b双波段紫外灯§r以进行操作", "Provide §bCoolant liquid§r and §bDual uv light§r for operation.")
            .tooltipsText("最少log10(处理水量，单位为B)的灯管需要被放置在灯仓内(灯管数量向上取整)", "the lights placed in the chamber should be at least log10(x) rounded up, where x is the amount of water( in buckets) to be processed.")
            .tooltipsText("每10t，将消耗输入仓中的所有§b冷却液§r,每1B冷却液降温1度", "every 10 tick, all §bCoolant liquid§r in the input chamber will be consumed, each Bucket of §bCoolant liquid§r will decrease the temperature by 1.")
            .tooltipsText("在配方运行时，机器将不断升温，具体为紫外灯数量+(当前温度-273)/50 每10tick", "When the recipe is running, the temperature of machine will keep rising, and is defined as (No. of light + (current temperature-273)/50) per 10 tick.")
            .tooltipsText("如果温度不处于629-933内，则配方运行失败", "If the temperature is not between 629-933, then the operation will fail")
            .tooltipsText("----------------------------------------------------------------", "----------------------------------------------------------------")
            .tooltipsText("§a水处理的第三步是进行双波段UV照射，处理水中有机物与微生物§o", "The third step is to expose the water in dual band UV light to clean the microbe and organic matter.")
            .tooltipsText("§a高功率灯箱与水流隔绝，因此需要额外冷却系统进行冷却§o", "High power light box is isolated from water flow, thus require external cooling system")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.FLOCCULATION_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                            AAAAA  ", "                            BBCBB  ", "                            BBCBB  ", "                            BBCBB  ", "                            BBCBB  ", "                            BBCBB  ", "                            BBCBB  ", "                            BBBBB  ", "                                   ", "                                   ", "                                   ", "                                   ")
                    .aisle("  AAAAA   BBBBB   BBBBB    BBBDBBB ", "                           BE   EB ", "                           B     B ", "                           B     B ", "                           B     B ", "                           B     B ", "                           B     B ", "                           BB   BB ", "                            BBBBB  ", "                                   ", "                                   ", "                                   ")
                    .aisle(" ABBBBBB BBBBBBB BBBBBBB  BBBBDBBBA", "  AAAAA   BBBBB   BBBBB   BE     EB", "                          B       B", "                          B       B", "                          B       B", "                          B       B", "                          B       B", "                          BB     BB", "                           BBB BBB ", "                              B    ", "                                   ", "                                   ")
                    .aisle("ABBBBBBBBBBBBBBBBBBBBBBBBBBBBBDBBBA", " AFFFFFB BFFFFFB BFFFFFB  B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB     BB   BB ", "   FFF     FFF     FFF       BEB   ", "                              B    ", "                                   ")
                    .aisle("ABBBDDDDDDDDDDDDDDDDDBBBBBBBBBDDDDA", " AFFDFFB BFFDFFB BFFDFFB  B       C", "  GE EG   GE EG   GE EG   B       C", "  BE EB   BE EB   BE EB   B       C", "  BE EB   BE EB   BE EB   B       C", "  BE EB   BE EB   BE EB   B       C", "  BE EB   BE EB   BE EB   B       C", "  BE EB   BE EB   BE EB   B       B", "  GE EG   GE EG   GE EG    B     B ", "  FFDFF   FFDFF   FFDFF     BEDEB  ", "    D       D       D        BDB   ", "    DDDDDDDDDDDDDDDDDDDDDDDDDDD    ")
                    .aisle("ABBBDBBBBBBBBBBBBBBBBBBBBBBBBBDBBBA", " AFFFFFB BFFFFFB BFFFFFB  B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB    B       B", "   BCB     BCB     BCB     BB   BB ", "   FFF     FFF     FFF       BEB   ", "                              B    ", "                                   ")
                    .aisle(" ABBDBBB BBBBBBB BBBBBBB  BBBBDBBBA", "  AAHAA   BBBBB   BBBBB   BE     EB", "                          B       B", "                          B       B", "                          B       B", "                          B       B", "                          B       B", "                          BB     BB", "                           BBB BBB ", "                              B    ", "                                   ", "                                   ")
                    .aisle("  AAAAA   BBBBB   BBBBB    BBBDBBB ", "                           BE   EB ", "                           B     B ", "                           B     B ", "                           B     B ", "                           B     B ", "                           B     B ", "                           BB   BB ", "                            BBBBB  ", "                                   ", "                                   ", "                                   ")
                    .aisle("                            AAAAA  ", "                            BBCBB  ", "                            BBCBB  ", "                            BBCBB  ", "                            BBCBB  ", "                            BBCBB  ", "                            BBCBB  ", "                            BBBBB  ", "                                   ", "                                   ", "                                   ", "                                   ")
                    .where('A', blocks(GTOBlocks.FLOCCULATION_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('B', blocks(GTOBlocks.FLOCCULATION_CASING.get()))
                    .where('C', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('D', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('E', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('F', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('G', blocks(GTBlocks.LAMPS.get(DyeColor.PURPLE).get()))
                    .where('H', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/flocculation_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition PH_NEUTRALIZATION_PURIFICATION_UNIT = multiblock("ph_neutralization_purification_unit", "pH中和净化装置", PHNeutralizationPurificationUnitMachine::new)
            .allRotation()
            .tooltipsText("§a净化水等级§r: §f4§r", "§aPurified Water Level§r: §f4§r")
            .tooltipsText("交替输入§b氢氧化钠溶液§r，§b盐酸§r和§bRO水§r来进行工作", "insert §bSodium hydroxide solution§r, §bHydrochloric acid§r and §bRO water§r alternately to work.")
            .tooltipsText("先输入30B §bRO水§r，然后输入10B§b氢氧化钠溶液§r，再输入30B §bRO水§r，最后输入15B §b盐酸§r", "initially insert 30B of §bRO water§r, then 10B of §bSodium hydroxide solution§r, then 30B of §bRO water§r, then 15B of §bHydrochloric acid§r.")
            .tooltipsText("流体判断每五秒进行一次，请在五秒内输入新流体", "liquids check commence every 5 seconds, insert new type of liquid within 5 seconds.")
            .tooltipsText("否则，配方总是失败", "Otherwise, the recipe will always fail.")
            .tooltipsText("----------------------------------------------------------------", "----------------------------------------------------------------")
            .tooltipsText("§a§o水处理的第四步是进一步去除水中的离子", "§a§oThe fourth step of water purification is to further remove the ions in the water.")
            .tooltipsText("§a§o混床处理通过固定树脂吸附水中离子来进行深度除盐", "The mixed bed processing deeply remove ions and salts from water by absorbing it with fixed resins.")
            .tooltipsText("§a§o因此需要酸洗与碱洗恢复树脂活性", "§a§oThus acid and base washing is required to maintain the activity of resins.")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.STABILIZED_NAQUADAH_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("          AAAAA           ", "          AABAA           ", "          AABAA           ", "          AABAA           ", "          CCBCC           ", "          AABAA           ", "          AABAA           ", "          AABAA           ", "          CCBCC           ", "          AABAA           ", "          AAAAA           ", "                          ", "                          ")
                    .aisle("D D  F   AAAAAAA    DEEED ", "GGG  F   A F F A     ABA  ", "GBG  F   AHHHHHA     ABA  ", "GBG  F   AIIIIIA     ABA  ", "GBG  F   C     C     ABA  ", "CCC  F   AFF F A     AAA  ", "GBG  F   AHHHHHA          ", "GBG  F   AJJJJJA          ", "GBG  F   C     C          ", "GGG      A     A          ", "         A     A          ", "          AAAAA           ", "                          ")
                    .aisle("        AAAAAAAAA  DDAKADD", "GGG     A  F F  A   C   C ", "B B     AHHHHHHHA   C   C ", "B B  F  AIIIIIIIA   C   C ", "B KKKKKKKKK     C   C   C ", "C C     AFFF F  A   C   C ", "B B     AHHHHHHHA   DCCCD ", "B B  F  AJJJJJJJA         ", "B KKKKKKKKK     C         ", "GGG     A       A         ", "        A       A         ", "         AAA AAA          ", "            A             ")
                    .aisle("D D     AAAAAAAAA  AAAKAAE", "GGG     AFFFFFFFA  A     A", "GKG     AHHHHHHHA  A     A", "GGG  F  AIIIIIIIA  A     A", "GGG     C       C  A     A", "CCC     AFFFFFFFA  A     A", "GKG     AHHHHHHHA   CAAAC ", "GGG  F  AJJJJJJJA         ", "GGG     C       C         ", "GGG     A       A         ", "        A       A         ", "         AA   AA          ", "           AAA            ")
                    .aisle("     F  AAAAAAAAA  AAAKKKE", "     F  B  FKKKKKKKK     B", " K   F  BHHHHHHHB  B     B", "     F  BIIIIIIIB  B     B", "     F  B       B  B     B", "     F  BFFF F  B  A     A", " K   F  BHHHHHHHB   CAAAC ", "     F  BJJJJJJJB         ", "        B       B         ", "        B       B         ", "        A       A         ", "         A     A          ", "          AAAAA           ")
                    .aisle("EAE     AAAAAAAAA  AAAKAAE", "EAE     AFFFFFFFA  A     A", "EKE     AHHHHHHHA  A     A", "AAA  F  AIIIIIIIA  A     A", "        C       C  A     A", "        AFFFFFFFA  A     A", " K      AHHHHHHHA   CAAAC ", "     F  AJJJJJJJA         ", "        C       C         ", "        A       A         ", "        A       A         ", "         AA   AA          ", "           AAA            ")
                    .aisle("EAE     AAAAAAAAA  DDAKADD", "E E     A  F F  A   C   C ", "E KKK   AHHHHHHHA   C   C ", "AKA KF  AIIIIIIIA   C   C ", " K  KKKKKKK     C   C   C ", " K  K   AFFF F  A   C   C ", " K  K   AHHHHHHHA   DCCCD ", "    KF  AJJJJJJJA         ", "    KKKKKKK     C         ", "        A       A         ", "        A       A         ", "         AAA AAA          ", "            A             ")
                    .aisle("EEE  F   AAAAAAA    DEEED ", "ELE  F   A F F A     ABA  ", "EEE  F   AHHHHHA     ABA  ", "AAA  F   AIIIIIA     ABA  ", "     F   C     C     ABA  ", "     F   AFF F A     AAA  ", "     F   AHHHHHA          ", "     F   AJJJJJA          ", "     F   C     C          ", "         A     A          ", "         A     A          ", "          AAAAA           ", "                          ")
                    .aisle("          AAAAA           ", "          AABAA           ", "          AABAA           ", "          AABAA           ", "          CCBCC           ", "          AABAA           ", "          AABAA           ", "          AABAA           ", "          CCBCC           ", "          AABAA           ", "          AAAAA           ", "                          ", "                          ")
                    .where('A', blocks(GTOBlocks.INERT_NEUTRALIZATION_WATER_PLANT_CASING.get()))
                    .where('B', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('C', blocks(GTOBlocks.STABILIZED_NAQUADAH_WATER_PLANT_CASING.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadah)))
                    .where('E', blocks(GTOBlocks.INERT_NEUTRALIZATION_WATER_PLANT_CASING.get())
                            .or(blocks(GTOMachines.PH_SENSOR.getBlock()).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('G', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('H', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('I', blocks(GTOBlocks.ANODE_ADSORPTION_RESIN.get()))
                    .where('J', blocks(GTOBlocks.CATHODE_ADSORPTION_RESIN.get()))
                    .where('K', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('L', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/stabilized_naquadah_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition EXTREME_TEMPERATURE_FLUCTUATION_PURIFICATION_UNIT = multiblock("extreme_temperature_fluctuation_purification_unit", "极端温度波动净化装置", ExtremeTemperatureFluctuationPurificationUnitMachine::new)
            .allRotation()
            .tooltipsText("§a净化水等级§r: §f5§r", "§aPurified Water Level§r: §f5§r")
            .tooltipsText("完成加热周期，先将§b水§r加热到§610000K§r以上，然后再冷却至低于§610K§r", "Complete the heating cycle by first heating the §bWater§r to above §610000K§r and then cooling it to below §610K§r.")
            .tooltipsText("配方开始时初始温度重置为§6298K§r", "Initial temperature reset to §6298K§r at the start of the recipe.")
            .tooltipsText("每完成一个加热周期，成功率增加§433%§r", "For each completed heating cycle, success rate increases by §433%§r.")
            .tooltipsText("如果温度达到§612500K§r，配方将失败并输出§b超临界蒸汽§r", "If the temperature reaches §612500K§r, the recipe will fail and output §bSupercritical Steam§r.")
            .tooltipsText("每秒最多消耗§610mB§r§b氦等离子体§r和§6100mB§r§b液氦§r", "Consumes up to §610mB§r of §bHelium Plasma§r and §6100mB§r of §bLiquid Helium§r per second.")
            .tooltipsText("每消耗一mB§b氦等离子体§r，温度mB高§680-120K§r", "Each consumption of 1mB §bHelium Plasma§r raises the temperature by §680-120K§r.")
            .tooltipsText("每消耗一mB§b液氦§r，温度降低§64-6K§r", "Each consumption of 1mB §bLiquid Helium§r lowers the temperature by §64-6K§r.")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o水净化的第五步是蒸发复杂有机聚合物和可能对简单酸、澄清剂和过滤器有抵抗力的极端微生物", "§a§oThe fifth step of water purification evaporates complex organic polymers and extreme microorganisms that may resist simple acids, clarifiers, and filters.")
            .tooltipsText("§a§o使用超高压腔室结合极端温度波动，可以使水保持超临界状态，同时蒸发任何残留的污染物，准备进行过滤", "§a§oUsing ultra-high pressure chambers combined with extreme temperature fluctuations allows the water to remain in a supercritical state while evaporating any remaining contaminants in preparation for filtering.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.PLASMA_HEATER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "            AAAAAAA    ")
                    .aisle("           AAAAAAAAA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "             AAAAA     ", "            AAAAAAA    ", "          AA       AA  ")
                    .aisle("          AAAAAAAAAAA  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "            A     A    ", "          AA       AA  ", "         A           A ")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           A       A   ", "          A         A  ", "         A           A ")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "          A         A  ", "         A           A ", "        A             A")
                    .aisle("CDEDC   AAAAAAAAAAAAAAA", "C   C   A             A", "C   C   A             A", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C     A         A  ", "C   C     A         A  ", "CBDBC     A         A  ", "          A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("EFFFD   AAAAAAAAAAAAAAA", " GGGDDDDA             A", " GGG    A             A", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG      A         A  ", " GGG      A         A  ", "DDDDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("IFFFDDDDAAAAAAAAAAAAAAA", " GHG    A             A", " GHGDDDDA             A", " GHG     A           A ", " GHG     A           A ", " GHG     A           A ", " GHG     A           A ", " GHG      A         A  ", " GHG      A         A  ", "JDBDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("EFFFD   AAAAAAAAAAAAAAA", " GGGDDDDA             A", " GGG    A             A", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG      A         A  ", " GGG      A         A  ", "DDDDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("CD~DC   AAAAAAAAAAAAAAA", "C   C   A             A", "C   C   A             A", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C     A         A  ", "C   C     A         A  ", "CBDBC     A         A  ", "          A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "          A         A  ", "         A           A ", "        A             A")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           A       A   ", "          A         A  ", "         A           A ")
                    .aisle("          AAAAAAAAAAA  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "            A     A    ", "          AA       AA  ", "         A           A ")
                    .aisle("           AAAAAAAAA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "             AAAAA     ", "            AAAAAAA    ", "          AA       AA  ")
                    .aisle("             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "            AAAAAAA    ")
                    .where('~', controller(blocks(definition.get())))
                    .where('H', blocks(GTOBlocks.SPEEDING_PIPE.get()))
                    .where('I', blocks(GTOMachines.HEAT_SENSOR.getBlock()))
                    .where('J', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()).or(blocks(GTOMachines.HEAT_SENSOR.getBlock())))
                    .where('B', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()).or(abilities(IMPORT_FLUIDS).setPreviewCount(2)))
                    .where('E', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()).or(abilities(EXPORT_FLUIDS).setPreviewCount(2)))
                    .where('F', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('G', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('D', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('A', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('C', frames(GTMaterials.Naquadria))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/plasma_heater_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition HIGH_ENERGY_LASER_PURIFICATION_UNIT = multiblock("high_energy_laser_purification_unit", "高能激光净化装置", HighEnergyLaserPurificationUnitMachine::new)
            .allRotation()
            .tooltipsText("§a净化水等级§r: §f6§r", "§aPurified Water Level§r: §f6§r")
            .tooltipsText("在操作过程中，更换透镜仓内的§b透镜§r", "During operation, replace the §bLens§r in the lens chamber.")
            .tooltipsText("当当前§b透镜§r需要更换时，多方块结构将通过§b透镜§r指示仓输出信号", "When the current §bLens§r needs to be replaced, the multi-block structure will output a signal through the §bLens§r indicator chamber.")
            .tooltipsText("§b透镜§r更换请求将在§66§r到12秒的随机间隔内出现", "§bLens§r replacement requests will occur at random intervals between §66§r and 12 seconds.")
            .tooltipsText("需要在信号输出后的4秒内更换透镜", "The lens must be replaced within 4 seconds of the signal output.")
            .tooltipsText("每次成功更换后运行4秒将成功率提高§410%§r", "Each successful replacement followed by 4 seconds of operation increases the success rate by §410%§r.")
            .tooltipsText("§b透镜§r需求可在GUI内查看，顺序固定", "The requirements for §bLens§r can be viewed in the GUI, in a fixed order.")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o水净化的第六步是识别水中任何残留的负离子，这些离子可能会在未来的晶圆制造中引起电气故障", "§a§oThe sixth step of water purification is identifying any residual anions in the water, which may cause electrical failures in future wafer manufacturing.")
            .tooltipsText("§a§o用不同波长的光子束轰击水，将能量传递给外层电子，使它们从原子中脱离并通过水箱壁，确保水完全电极化", "§a§oBombarding the water with photons of different wavelengths transfers energy to the outer-layer electrons, causing them to detach from the atoms and through the water tank walls, ensuring the water is fully polarized.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("     BBB     ", "     CCC     ", "             ", "             ", "             ", "             ", "             ", "     CCC     ", "     BBB     ")
                    .aisle("   AAAAAAA   ", "   CCDDDCC   ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "   CCAAACC   ", "   AAAAAAA   ")
                    .aisle(" AAAAAAAAAAA ", " CCDD   DDCC ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", " CCAAEEEAACC ", " AAAAAAAAAAA ")
                    .aisle("BAAAAAAAAAAAB", "CDD       DDC", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", "CAAEEEEEEEAAC", "BAAAAAAAAAAAB")
                    .aisle("BAAAAAAAAAAAB", "CD         DC", " D         D ", " D         D ", " D         D ", " D         D ", " D         D ", "CAEEEEEEEEEAC", "BAAAAAFAAAAAB")
                    .aisle("BAAAAAAAAAAAB", "CDD       DDC", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", "CAAEEEEEEEAAC", "BAAAAAAAAAAAB")
                    .aisle(" AAAAAAAAAAA ", " CCDD   DDCC ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", " CCAAEEEAACC ", " AAAAAAAAAAA ")
                    .aisle("   AAAAAAA   ", "   CCDDDCC   ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "   CCAAACC   ", "   AAAAAAA   ")
                    .aisle("     B~B     ", "     CCC     ", "             ", "             ", "             ", "             ", "             ", "     CCC     ", "     BBB     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('E', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('F', blocks(GTOMachines.LENS_HOUSING.getBlock()))
                    .where('D', blocks(GTOBlocks.ELECTRON_PERMEABLE_AMPROSIUM_COATED_GLASS.get()))
                    .where('A', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('B', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get())
                            .or(blocks(GTOMachines.LENS_INDICATOR_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('C', frames(GTMaterials.Neutronium))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/naquadah_reinforced_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition RESIDUAL_DECONTAMINANT_DEGASSER_PURIFICATION_UNIT = multiblock("residual_decontaminant_degasser_purification_unit", "残余污染物脱气净化装置", ResidualDecontaminantDegasserPurificationUnitMachine::new)
            .allRotation()
            .tooltipsText("§a净化水等级§r: §f7§r", "§aPurified Water Level§r: §f7§r")
            .tooltipsText("要成功完成配方，需要根据要求输入材料", "To successfully complete the recipe, materials must be inputted as required.")
            .tooltipsText("操作开始时，脱气控制仓将输出红石信号，机器每秒将消耗全部输入的材料", "At the operation start, the degassing control chamber will output a redstone signal, and the machine will consume all input materials every second.")
            .tooltipsText("红石信号与需求相对应", "The redstone signal corresponds to the demand.")
            .tooltipsText("1, 3, 5, 7, 9：通过§b惰性气体§r进行臭氧曝气", "1, 3, 5, 7, 9: Ozone aeration via §bInert Gases§r")
            .tooltipsText("§610000mB§r§b氦气§r / §68000mB§r§b氖气§r / §66000mB§r§b氩气§r / §64000mB§r§b氪气§r / §62000mB§r§b氙气§r", "§610000mB§r§bHelium§r / §68000mB§r§bNeon§r / §66000mB§r§bArgon§r / §64000mB§r§bKrypton§r / §62000mB§r§bXenon§r")
            .tooltipsText("2, 4, 6, 8, 10：超导去离子", "2, 4, 6, 8, 10: Superconductive deionization")
            .tooltipsText("需要输入1000mB对应IV，LuV，ZPM，UV，UHV的液态超导", "Needs input of 1000mB of liquid superconductors corresponding to IV, LuV, ZPM, UV, UHV.")
            .tooltipsText("11, 13, 15：引力生成差异真空提取", "11, 13, 15: Gravitational Differential Vacuum Extraction")
            .tooltipsText("需要输入§62000mB§r§b液态安普洛§r", "Requires input of §62000mB§r§bLiquid Amprosiums§r.")
            .tooltipsText("12, 14：塞尔多尼安沉淀过程", "12, 14: Seldenian precipitation process")
            .tooltipsText("不输入任何东西", "Do not input anything.")
            .tooltipsText("0：机器过载", "0: Machine overload")
            .tooltipsText("在罕见情况下，机器可能会过载并且不会输出任何控制信号", "In rare situations, the machine may overload and not output any control signals.")
            .tooltipsText("为防止机器损坏，输入§610000mB§r§b液氦§r", "To prevent machine damage, input §610000mB§r§bLiquid Helium§r.")
            .tooltipsText("输入信号未请求的任何流体将始终导致配方失败", "Any liquid not requested by the input signal will always cause the recipe to fail.")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o水净化的倒数第二步，第七步，是一系列不规则的复杂过程，", "§a§oThe penultimate step of water purification, step seven, consists of a series of irregular complex processes,")
            .tooltipsText("§a§o旨在去除前几个步骤的除污剂可能残留的任何残留物，", "§a§oaimed at removing any residues of decontaminants that may linger from the previous steps,")
            .tooltipsText("§a§o根据脱气器检测到的水中物质，它会请求各种材料以完成上述过程", "§a§obased on the materials detected in the water by the degasser, it will request various materials to complete the above processes.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.PLASMA_HEATER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle
                    .aisle("    AAAAAAAAA    ", "      AAAAABB    ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "                 ", "                 ", "           B     ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "                 ", "                 ", "           B     ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "      AAAAAA     ", "    AAAAAAAAA    ")
                    .aisle("  AAAAAAAAAAAAA  ", "    AAAAAAAAA    ", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "       DDD       ", "    B   D        ", "                 ", "            B    ", "                 ", "                 ", "                 ", "                 ", "                 ", "    B            ", "                 ", "            B    ", "                 ", "        D        ", "       DDD       ", "      DDDDD      ", "      DDDDD      ", "   BB DDDDD      ", "    AAAAAAAAAB   ", "  AAAAAAAAAAAAA  ")
                    .aisle("  AAAAAAAAAAAAA  ", "   AAAAAAAAAAA   ", "    DD     DD    ", "    DD     DD    ", "    DD     DD    ", "     DD   DD     ", "     DDD DDD     ", "   B  DDDDD  B   ", "       DDD       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "   B         B   ", "       DDD       ", "      DDDDD      ", "     DDD DDD     ", "     DD   DD     ", "    DD     DD    ", "    DD     DD    ", "    DD     DD B  ", "  BAAAAAAAAAAA   ", "  AAAAAAAAAAAAA  ")
                    .aisle(" AAAAAAAAAAAAAAA ", " BAAAAAAAAAAAAA  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D B  ", "    DD     DD    ", "  B  DD   DD     ", "      DDDDD      ", "       DDD       ", "                 ", "                 ", "                 ", "       DDD    B  ", "      DDDDD      ", "  B  DD   DD     ", "    DD     DD    ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "   D         DB  ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle(" AAAAAAAAAAAAAAA ", " BAAAAAAAAAAAAA  ", "   D         D   ", "   D         D   ", "   D         D   ", "   D         D B ", "   D         D   ", "    D       D    ", "    D       D    ", " B   D     D     ", "      D   D      ", "       DDD       ", "                 ", "       DDD     B ", "      D   D      ", "     D     D     ", "    D       D    ", " B  D       D    ", "   D         D   ", "   D         D   ", "   D         D   ", "   D         D B ", "   D         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", " BD           D  ", "  D           D  ", "  D           DB ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", " B   D     D     ", "      DDDDD      ", "       DDD     B ", "      DDDDD      ", "     D     D     ", "    D       D    ", "    D       D    ", "   D         D   ", " B D         D   ", "   D         D   ", "  D           DB ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", " BD           D  ", "  D           D  ", "  D           DB ", "  D           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", " B  D       D    ", "     DD   DD     ", "      DDDDD    B ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", " B D         D   ", "  D           D  ", "  D           DB ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           D  ", " BD           DB ", "  D           D  ", "  D           D  ", "  D           D  ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", " B   DD   DD   B ", "      DD DD      ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "  D           D  ", " BD           DB ", "  D           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           DB ", "  D           D  ", " BD           D  ", "  D           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D  B ", "     DD   DD     ", " B    DDDDD      ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "   D         D B ", "  D           D  ", " BD           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           DB ", "  D           D  ", " BD           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", "     D     D   B ", "      DDDDD      ", " B     DDD       ", "      DDDDD      ", "     D     D     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D B ", "   D         D   ", " BD           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle(" AAAAAAAAAAAAAAA ", "  AAAAAAAAAAAAAB ", "   D         D   ", "   D         D   ", "   D         D   ", " B D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", "     D     D   B ", "      D   D      ", "       DDD       ", "                 ", " B     DDD       ", "      D   D      ", "     D     D     ", "    D       D    ", "    D       D  B ", "   D         D   ", "   D         D   ", "   D         D   ", " B D         D   ", "   D         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle(" AAAAAAAAAAAAAAA ", "  AAAAAAAAAAAAAB ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "  B D       D    ", "    DD     DD    ", "     DD   DD  B  ", "      DDDDD      ", "       DDD       ", "                 ", "                 ", "                 ", "  B    DDD       ", "      DDDDD      ", "     DD   DD  B  ", "    DD     DD    ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "  BD         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle("  AAAAAAAAAAAAA  ", "   AAAAAAAAAAA   ", "    DD     DD    ", "    DD     DD    ", "    DD     DD    ", "     DD   DD     ", "     DDD DDD     ", "   B  DDDDD  B   ", "       DDD       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "   B         B   ", "       DDD       ", "      DDDDD      ", "     DDD DDD     ", "     DD   DD     ", "    DD     DD    ", "    DD     DD    ", "  B DD     DD    ", "   AAAAAAAAAAAB  ", "  AAAAAAAAAAAAA  ")
                    .aisle("  AAAAAAAAAAAAA  ", "    AAAAAAAAA    ", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "       DDD       ", "        D   B    ", "                 ", "    B            ", "                 ", "                 ", "                 ", "                 ", "                 ", "            B    ", "                 ", "    B            ", "                 ", "        D        ", "       DDD       ", "      DDDDD      ", "      DDDDD      ", "      DDDDD BB   ", "   BAAAAAAAAA    ", "  AAAAAAAAAAAAA  ")
                    .aisle("    AAAAAAAAA    ", "    BBAA~AA      ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "                 ", "                 ", "     B           ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "                 ", "                 ", "     B           ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "      AAAAA      ", "    AAAAAAAAA    ")
                    .aisle
                    .where('~', controller(blocks(definition.get())))
                    .where('D', blocks(GTOBlocks.OMNI_PURPOSE_INFINITY_FUSED_GLASS.get()))
                    .where('A', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('C', blocks(GTOBlocks.PLASMA_HEATER_CASING.get())
                            .or(blocks(GTOMachines.DEGASSING_CONTROL_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', frames(GTMaterials.Naquadria))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/plasma_heater_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition ABSOLUTE_BARYONIC_PERFECTION_PURIFICATION_UNIT = multiblock("absolute_baryonic_perfection_purification_unit", "绝对重子完美净化装置", AbsoluteBaryonicPerfectionPurificationUnitMachine::new)
            .allRotation()
            .tooltipsText("§a净化水等级§r: §f8§r", "§aPurified Water Level§r: §f8§r")
            .tooltipsText("将§b夸克释放催化剂§r放入输入总线中运行", "Put §bQuark Releasing Catalyst§r into the input bus to operate.")
            .tooltipsText("每个配方循环中，不同的两种§b夸克释放催化剂§r的组合将正确识别出§b孤立的夸克§r并完成配方", "Each recipe cycle, different combinations of two §bQuark Releasing Catalysts§r will correctly identify the §bIsolated Quarks§r and complete the recipe.")
            .tooltipsText("每秒消耗输入槽中的所有§b催化剂§r，每消耗一个夸克催化剂还需额外消耗144mB夸克胶子等离子体", "Consumes all §bCatalysts§r in the input slot every second, and for each quark catalyst consumed, an additional 144mB of quark gluon plasma is required.")
            .tooltipsText("如果最近插入的两种§b催化剂§r是正确的组合，则立即输出§b稳定重子物质§r", "If the last two inserted §bCatalysts§r are the correct combination, §bStable Baryonic Matter§r will be output immediately.")
            .tooltipsText("在配方结束时，所有错误插入的§b催化剂§r将返回输出槽", "At the end of the recipe, all incorrectly inserted §bCatalysts§r will return to the output slot.")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o净化水的最后阶段超越了亚原子粒子，识别出重子内最小的可能缺陷", "§a§oThe final stage of purification transcends subatomic particles, identifying the smallest possible defects within baryons.")
            .tooltipsText("§a§o通过正确识别需要的夸克释放催化剂，装置将激活催化剂，稳定偏离的粒子", "§a§oBy correctly identifying the required Quark Releasing Catalysts, the device will activate the catalysts and stabilize off-kilter particles.")
            .tooltipsText("§a§o这最终不仅会创造出稳定的重子物质，而且最重要的是，创造出绝对完美净化的水", "§a§oThis ultimately creates not just stable baryonic matter, but most importantly, absolutely purified water.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.QUARK_EXCLUSION_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("                 ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "      AAAAA      ", "      AAAAA      ", " CCCCCAAAAACCCCC ", "      AAAAA      ", "      AAAAA      ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "      DEEED      ", " C    DEFED    C ", "      DEEED      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DDDDD      ", "                 ", "                 ", "                 ", "AAD   AAAAA   DAA", "AAD    EEE    DAA", "AAD    EFE    DAA", "AAD    EEE    DAA", "AAD   AAAAA   DAA", "                 ", "                 ", "                 ", "      DDDDD      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DEEED      ", "       EEE       ", "       EEE       ", "       EEE       ", "AAD   AEEEA   DAA", "AAEEEEE   EEEEEAA", "AAEEEEE F EEEEEAA", "AAEEEEE   EEEEEAA", "AAD   AEEEA   DAA", "       EEE       ", "       EEE       ", "       EEE       ", "      DEEED      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", " CCCCCAAAAACCCCC ", " C    DEFED    C ", " C     EFE     C ", " C     EFE     C ", " C     EFE     C ", "AAD   AEFEA   DAA", "AAEEEEE F EEEEEAA", "AAFFFFFFFFFFFFFAA", "AAEEEEE F EEEEEAA", "AAD   AEFEA   DAA", " C     EFE     C ", " C     EFE     C ", " C     EFE     C ", " C    DEFED    C ", " CCCCCAAAAACCCCC ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DEEED      ", "       EEE       ", "       EEE       ", "       EEE       ", "AAD   AEEEA   DAA", "AAEEEEE   EEEEEAA", "AAEEEEE F EEEEEAA", "AAEEEEE   EEEEEAA", "AAD   AEEEA   DAA", "       EEE       ", "       EEE       ", "       EEE       ", "      DEEED      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DDDDD      ", "                 ", "                 ", "                 ", "AAD   AAAAA   DAA", "AAD    EEE    DAA", "AAD    EFE    DAA", "AAD    EEE    DAA", "AAD   AAAAA   DAA", "                 ", "                 ", "                 ", "      DDDDD      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "      DEEED      ", " C    DEFED    C ", "      DEEED      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "      AAAAA      ", "      AAAAA      ", " CCCCCAAAAACCCCC ", "      AAAAA      ", "      AAAAA      ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "                 ")
                    .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "      BBBBB      ", "      BBBBB      ", "      BB~BB      ", "      BBBBB      ", "      BBBBB      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .where('~', controller(blocks(definition.get())))
                    .where('C', frames(GTMaterials.NaquadahAlloy))
                    .where('D', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('E', blocks(GTOBlocks.NON_PHOTONIC_MATTER_EXCLUSION_GLASS.get()))
                    .where('F', blocks(GTOBlocks.QUARK_PIPE.get()))
                    .where('A', blocks(GTOBlocks.QUARK_EXCLUSION_CASING.get()))
                    .where('B', blocks(GTOBlocks.QUARK_EXCLUSION_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/quark_exclusion_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();
}
