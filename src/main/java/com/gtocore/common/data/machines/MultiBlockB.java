package com.gtocore.common.data.machines;

import com.gtocore.api.machine.part.GTOPartAbility;
import com.gtocore.api.pattern.GTOPredicates;
import com.gtocore.client.renderer.machine.FluidRenderer;
import com.gtocore.client.renderer.machine.SpaceElevatorRenderer;
import com.gtocore.common.data.GTOBlocks;
import com.gtocore.common.data.GTOMachines;
import com.gtocore.common.data.GTOMaterials;
import com.gtocore.common.data.GTORecipeTypes;
import com.gtocore.common.data.translation.GTOMachineStories;
import com.gtocore.common.data.translation.GTOMachineTooltips;
import com.gtocore.common.machine.multiblock.electric.nano.NanoPhagocytosisPlantMachine;
import com.gtocore.common.machine.multiblock.electric.space.SuperSpaceElevatorMachine;
import com.gtocore.common.machine.multiblock.water.*;
import com.gtocore.config.GTOConfig;

import com.gtolib.GTOCore;
import com.gtolib.api.annotation.NewDataAttributes;
import com.gtolib.api.annotation.component_builder.StyleBuilder;
import com.gtolib.api.machine.multiblock.*;
import com.gtolib.utils.MachineUtils;
import com.gtolib.utils.MultiBlockFileReader;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.GCYMBlocks;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.gregtechceu.gtceu.common.data.GTMaterials;
import com.gregtechceu.gtceu.common.data.GTRecipeTypes;

import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LightningBolt;
import net.minecraft.world.level.block.Blocks;

import committee.nova.mods.avaritia.init.registry.ModBlocks;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gtocore.common.block.BlockMap.SEPMMAP;
import static com.gtocore.utils.register.MachineRegisterUtils.multiblock;
import static com.gtolib.api.GTOValues.GLASS_TIER;
import static com.gtolib.api.GTOValues.POWER_MODULE_TIER;

public final class MultiBlockB {

    public static void init() {}

    public static final MultiblockMachineDefinition GRAVITATION_SHOCKBURST = multiblock("gravitation_shockburst", "引力震爆器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.GRAVITATION_SHOCKBURST_RECIPES)
            .recipeTypes(GTORecipeTypes.ELECTRIC_IMPLOSION_COMPRESSOR_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.CREATE_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("aaaaaaaaa", "         ", "         ", "         ", "         ", "         ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b ccc b ", " bcccccb ", " bcccccb ", " bcccccb ", " b ccc b ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcccccb ", " bcc ccb ", " bcccccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcc ccb ", " bc   cb ", " bcc ccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcccccb ", " bcc ccb ", " bcccccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b ccc b ", " bcccccb ", " bcccccb ", " bcccccb ", " b ccc b ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", "aaaaaaaaa")
                    .aisle("aaaa~aaaa", "         ", "         ", "         ", "         ", "         ", "aaaaaaaaa")
                    .where('a', blocks(GTOBlocks.CREATE_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(OPTICAL_DATA_RECEPTION).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1)))
                    .where('b', blocks(GTOBlocks.INFINITY_GLASS.get()))
                    .where('c', blocks(ModBlocks.infinity.get()))
                    .where('~', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/create_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition DIGESTION_TANK = multiblock("digestion_tank", "煮解池", CoilMultiblockMachine.createCoilMachine(false, true))
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.DIGESTION_TREATMENT_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("#OOOOO#", "#YMMMY#", "##YYY##", "#######")
                    .aisle("OXXXXXO", "YMAAAMY", "#YAAAY#", "#YYYYY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXXXXXO", "YMAAAMY", "#YAAAY#", "#YYYYY#")
                    .aisle("#OOSOO#", "#YMMMY#", "##YYY##", "#######")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('K', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('Y', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('M', heatingCoils())
                    .where('O', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('A', air())
                    .where('#', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public static final MultiblockMachineDefinition WOOD_DISTILLATION = multiblock("wood_distillation", "木化工厂", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.WOOD_DISTILLATION_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getWoodDistillationTooltips().getSupplier())
            .laserTooltips()
            .coilParallelTooltips()
            .parallelizableOverclock()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('B', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('C', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('D', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ruridit)))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('G', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('H', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('I', blocks(GTBlocks.HERMETIC_CASING_ZPM.get()))
                    .where('J', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('K', heatingCoils())
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where('M', blocks(GCYMBlocks.CASING_CORROSION_PROOF.get()))
                    .where('N', blocks(GTOBlocks.HASTELLOY_N_75_PIPE.get()))
                    .where('O', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('P', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('Q', abilities(MUFFLER))
                    .where('R', blocks(GTBlocks.CASING_STEEL_TURBINE.get()))
                    .where('S', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('T', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('U', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('V', blocks(GTOBlocks.OIL_GAS_TRANSPORTATION_PIPE_CASING.get()))
                    .where('W', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('X', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('Y', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/blast_furnace"))
            .register();

    public static final MultiblockMachineDefinition DESULFURIZER = multiblock("desulfurizer", "脱硫机", CoilCrossRecipeMultiblockMachine::createInfiniteCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.DESULFURIZER_RECIPES)
            .coilParallelTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("CCCCCIIIIIII", "CCCCCILILILI", "CCCCCILILILI", "            ", "            ", "            ")
                    .aisle("CCCCCIIIIIII", "CGCCCXXXXXXI", "CCCCCILILILI", "  CCCILILILI", "  CCCIIIIIII", "            ")
                    .aisle("CCCCCIIIIIII", "CGGGGILILILI", "CCCCCILILILI", "  CXXXXXXXXI", "  CCCIIIIIII", "            ")
                    .aisle("CCCCCIIIIIII", "CGCPCXXXXXXI", "CCCCCILILILI", "  DDDILILILI", "  DDDIIIIIII", "  DDD       ")
                    .aisle("CCCCCIIIIIII", "CCCPCILILILI", "CCCPCILILILI", "  DPD       ", "  DPD       ", "  DDD       ")
                    .aisle("  DDD       ", "  D~D       ", "  DDD       ", "  DDD       ", "  DDD       ", "  DDD       ")
                    .where('~', controller(blocks(definition.get())))
                    .where('I', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('X', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('P', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('G', blocks(GTBlocks.HERMETIC_CASING_MV.get()))
                    .where('D', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(24)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('L', heatingCoils())
                    .where('C', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition LIQUEFACTION_FURNACE = multiblock("liquefaction_furnace", "液化炉", CoilMultiblockMachine.createCoilMachine(false, true))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.LIQUEFACTION_FURNACE_RECIPES)
            .parallelizableOverclock()
            .moduleTooltips()
            .block(GTBlocks.CASING_INVAR_HEATPROOF)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("AAAAA", " BBB ", " AAA ")
                    .aisle("AAAAA", "B B B", "ACCCA")
                    .aisle("AAAAS", "BBEBB", "ACFCA")
                    .aisle("AAAAA", "B B B", "ACCCA")
                    .aisle("AAAAA", " BBB ", " AAA ")
                    .where('B', heatingCoils())
                    .where('C', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('E', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('A', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                            .setMinGlobalLimited(20)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('F', abilities(MUFFLER))
                    .where('S', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAA    ", "AAA    ", "AAA    ")
                    .aisle("BBB    ", "BDB    ", "BBB    ")
                    .aisle("BEBF   ", "E EF   ", "BEBF   ")
                    .aisle("BEBG   ", "E E    ", "BEBG   ")
                    .aisle("BEBF   ", "E EF   ", "BEBF   ")
                    .aisle("BBB   C", "BDB    ", "BBB    ")
                    .aisle("AAA    ", "AAA    ", "AAA    ")
                    .where('A', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(GTOPartAbility.ACCELERATE_HATCH).setMaxGlobalLimited(1)))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.CASING_STAINLESS_STEEL_GEARBOX.get()))
                    .where('E', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('G', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_heatproof"), GTCEu.id("block/multiblock/multi_furnace"))
            .register();

    public static final MultiblockMachineDefinition REACTION_FURNACE = multiblock("reaction_furnace", "反应炉", CoilMultiblockMachine.createCoilMachine(true, true))
            .nonYAxisRotation()
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.2")
            .recipeTypes(GTORecipeTypes.REACTION_FURNACE_RECIPES)
            .parallelizableOverclock()
            .moduleTooltips()
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("A   A", "ABBBA", "BBCBB", "BBBBB", " BBB ")
                    .aisle("     ", "BBBBB", "BDCDB", "BDCDB", "BAAAB")
                    .aisle("     ", "~BBBB", "CCCCC", "BCCCB", "BAFAB")
                    .aisle("     ", "BBBBB", "BDCDB", "BDCDB", "BAAAB")
                    .aisle("A   A", "ABBBA", "BBCBB", "BBBBB", " BBB ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('C', heatingCoils())
                    .where('D', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('B', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .setMinGlobalLimited(20)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('F', abilities(MUFFLER))
                    .where(' ', any())
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("EEEEE AAA ", "       A  ", "          ", "          ", "          ")
                    .aisle("EFFFEDBBBA", "      BBB ", "      BBB ", "      BBB ", "       B  ")
                    .aisle("EFFFEDBBBA", "     DBCBA", "      BCB ", "      BCB ", "     CCCB ")
                    .aisle("EFFFEDBBBA", "      BBB ", "      BBB ", "      BBB ", "       B  ")
                    .aisle("EEEEE AAA ", "  G    A  ", "          ", "          ", "          ")
                    .where('A', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(GTOPartAbility.ACCELERATE_HATCH).setMaxGlobalLimited(1)))
                    .where('B', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('C', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('D', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('F', blocks(GTBlocks.STEEL_HULL.get()))
                    .where('G', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/blast_furnace"))
            .register();

    public static final MultiblockMachineDefinition MEGA_BREWER = multiblock("mega_brewer", "巨型酿造厂", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getMegaBrewerTooltips().getSupplier())
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.BREWING_RECIPES)
            .recipeTypes(GTRecipeTypes.FERMENTING_RECIPES)
            .block(GCYMBlocks.CASING_CORROSION_PROOF)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('B', blocks(GCYMBlocks.CASING_CORROSION_PROOF.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', blocks(GCYMBlocks.CASING_CORROSION_PROOF.get()))
                    .where('D', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('E', blocks(GTOBlocks.HERMETIC_CASING_UEV.get()))
                    .where('F', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('G', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where('I', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('J', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('L', heatingCoils())
                    .where('M', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/corrosion_proof_casing"), GTCEu.id("block/multiblock/gcym/large_brewer"))
            .register();

    public static final MultiblockMachineDefinition FUEL_REFINING_COMPLEX = multiblock("fuel_refining_complex", "燃料精炼复合体", CoilCrossRecipeMultiblockMachine.createCoilParallelEBF())
            .nonYAxisRotation()
            .parallelizableTooltips()
            .laserTooltips()
            .coilParallelTooltips()
            .recipeTypes(GTORecipeTypes.FUEL_REFINING_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('C', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('D', GTOPredicates.light())
                    .where('E', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('G', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('H', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('J', blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSLASteel)))
                    .where('L', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('M', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('N', blocks(GTOBlocks.PPS_CORROSION_RESISTANT_MECHANICAL_HOUSING.get()))
                    .where('O', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('P', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('Q', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('R', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_MECHANICAL_CASING.get()))
                    .where('S', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.WatertightSteel)))
                    .where('T', blocks(GTOBlocks.OIL_GAS_TRANSPORTATION_PIPE_CASING.get()))
                    .where('U', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('V', blocks(GTOBlocks.CALCIUM_OXIDE_CERAMIC_ANTI_METAL_CORROSION_MECHANICAL_BLOCK.get()))
                    .where('W', blocks(GTOBlocks.INDUSTRIAL_FRAMELESS_GLASS.get()))
                    .where('X', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('Y', abilities(MUFFLER))
                    .where('Z', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('[', heatingCoils())
                    .where('\\', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where(']', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('^', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('_', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('`', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/gcym/large_brewer"))
            .register();

    public static final MultiblockMachineDefinition MICROORGANISM_MASTER = multiblock("microorganism_master", "微生物之主", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.INCUBATOR_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getMicroorganismMasterTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', controller(blocks(definition.get())))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTOBlocks.LAW_FILTER_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('F', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('G', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('H', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('I', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('J', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('K', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('L', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('M', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('N', blocks(GTOBlocks.BIOACTIVE_MECHANICAL_CASING.get()))
                    .where('O', blocks(Blocks.SPONGE))
                    .where('P', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('Q', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('R', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('S', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public static final MultiblockMachineDefinition LIGHTNING_ROD = multiblock("lightning_rod", "引雷针", TierCasingCrossRecipeMultiblockMachine.createParallel(m -> 1L << (2 * m.getCasingTier(GLASS_TIER)), GLASS_TIER))
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.ARC_GENERATOR_RECIPES)
            .specialParallelizableTooltips()
            .tooltips(GTOMachineStories.INSTANCE.getLightningRodTooltips().getSupplier())
            .tooltips(NewDataAttributes.ALLOW_PARALLEL_NUMBER.create(
                    h -> h.addLines("由玻璃等级决定", "Determined by glass tier"),
                    c -> c.addCommentLines("公式 : 4^玻璃等级", "Formula: 4^(Glass Tier)")))
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_PALLADIUM_SUBSTATION)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('B', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('D', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('E', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get()))
                    .where('F', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('H', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('I', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('J', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('K', GTOPredicates.glass())
                    .where('L', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('M', blocks(GTOBlocks.MOLECULAR_COIL.get()))
                    .where('N', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('O', blocks(GTOBlocks.MAGNESIUM_OXIDE_CERAMIC_HIGH_TEMPERATURE_INSULATION_MECHANICAL_BLOCK.get()))
                    .where('P', blocks(Blocks.POLISHED_DEEPSLATE_SLAB))
                    .where('Q', GTOPredicates.light())
                    .where('R', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .onWorking(machine -> {
                if (GTOConfig.INSTANCE.lightningRodEffect && machine.self().getLevel() instanceof ServerLevel serverLevel && machine.self().getOffsetTimer() % serverLevel.random.nextInt(20, 200) == 0) {
                    LightningBolt entityToSpawn = EntityType.LIGHTNING_BOLT.create(serverLevel);
                    if (entityToSpawn != null) {
                        entityToSpawn.setPos(MachineUtils.getOffsetPos(9, 50, machine.self().getFrontFacing(), machine.self().getPos()).getCenter());
                        entityToSpawn.setVisualOnly(true);
                        serverLevel.addFreshEntity(entityToSpawn);
                    }
                }
                return true;
            })
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_palladium_substation"), GTOCore.id("block/multiblock/general0"))
            .register();

    public static final MultiblockMachineDefinition MAGNETIC_ENERGY_REACTION_FURNACE = multiblock("magnetic_energy_reaction_furnace", "磁能反应炉", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getMagneticEnergyReactionFurnaceTooltips().getSupplier())
            .recipeTypes(GTRecipeTypes.ARC_FURNACE_RECIPES)
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GCYMBlocks.CASING_NONCONDUCTING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('B', heatingCoils())
                    .where('C', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('D', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get()))
                    .where('E', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('F', blocks(GTOBlocks.MAGTECH_CASING.get()))
                    .where('G', blocks(GTOBlocks.TRANSCENDENTALLY_AMPLIFIED_MAGNETIC_CONFINEMENT_CASING.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.NeodymiumMagnetic)))
                    .where('I', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('K', blocks(GTBlocks.BATTERY_EMPTY_TIER_III.get()))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where('M', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('N', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('O', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('a', blocks(GCYMBlocks.CASING_NONCONDUCTING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/nonconducting_casing"), GTOCore.id("block/multiblock/general1"))
            .register();

    public static final MultiblockMachineDefinition HIGH_ENERGY_LASER_LATHE = multiblock("high_energy_laser_lathe", "高能激光车床", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.LATHE_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getHighEnergyLaserLatheTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('C', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('D', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('E', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('F', blocks(GTOBlocks.LASER_COOLING_CASING.get()))
                    .where('G', blocks(GCYMBlocks.CASING_LASER_SAFE_ENGRAVING.get()))
                    .where('H', blocks(GTOBlocks.OPTICAL_RESONANCE_CHAMBER.get()))
                    .where('I', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('J', blocks(GTOBlocks.LASER_CASING.get()))
                    .where('K', blocks(GTOBlocks.ELECTRON_PERMEABLE_AMPROSIUM_COATED_GLASS.get()))
                    .where('L', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('M', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('N', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('O', blocks(GTOBlocks.PRECISION_PROCESSING_MECHANICAL_CASING.get()))
                    .where('P', blocks(GTOBlocks.HIGH_ENERGY_LASER_EMITTER.get()))
                    .where('Q', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/gcym/large_cutter"))
            .register();

    public static final MultiblockMachineDefinition NEUTRONIUM_WIRE_CUTTING = multiblock("neutronium_wire_cutting", "中子丝线切割", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.CUTTER_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getNeutroniumWireCuttingTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('B', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('E', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('F', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('I', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('K', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('L', blocks(GTOBlocks.PRECISION_PROCESSING_MECHANICAL_CASING.get()))
                    .where('M', blocks(GTOBlocks.EXTREME_DENSITY_CASING.get()))
                    .where('N', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Amprosium)))
                    .where('O', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('P', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('Q', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('R', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('S', controller(blocks(definition.get())))
                    .where('T', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/gcym/large_cutter"))
            .register();

    public static final MultiblockMachineDefinition NANO_PHAGOCYTOSIS_PLANT = multiblock("nano_phagocytosis_plant", "纳米吞噬厂", NanoPhagocytosisPlantMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getNanoPhagocytosisPlantTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.MACERATOR_RECIPES)
            .recipeTypes(GTORecipeTypes.ISA_MILL_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('B', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('C', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('E', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('F', blocks(GTOBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('G', blocks(GTBlocks.FUSION_COIL.get()))
                    .where('H', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('I', blocks(GTOBlocks.FUSION_COIL_MK2.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('K', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('L', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('M', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('N', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('O', blocks(GTOBlocks.ECHO_CASING.get()))
                    .where('P', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('Q', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('R', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.NeodymiumMagnetic)))
                    .where('S', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('T', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('U', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('V', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('W', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('X', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ultimet)))
                    .where('Y', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('Z', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('a', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .addSubPattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("BBBBBBBBBBBBBBB BBBBBBBBBBBBBBB", "B      B      B B      B      B", "BG GG GBG GG GB BG GG GBG GG GB", "BG GG GBG GG GB BG GG GBG GG GB", "B      B      B B      B      B", "BBBBBBBBBBBBBBB BBBBBBBBBBBBBBB", "B      B      B B      B      B", "BG GG GBG GG GB BG GG GBG GG GB", "BG GG GBG GG GB BG GG GBG GG GB", "B      B      B B      B      B", "BBBBBBBBBBBBBBB BBBBBBBBBBBBBBB")
                    .aisle("BBBBBBBBBBBBBBB BBBBBBBBBBBBBBB", " G GG G G GG G   G GG G G GG G ", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", " G GG G G GG G   G GG G G GG G ", "BHHHHHHHHHHHHHB BHHHHHHHHHHHHHB", " G GG G G GG G   G GG G G GG G ", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", " G GG G G GG G   G GG G G GG G ", "B      B      B B      B      B")
                    .aisle("BBBBBBBBBBBBBBB BBBBBBBBBBBBBBB", " G GG G G GG G   G GG G G GG G ", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", " G GG G G GG G   G GG G G GG G ", "B             B B             B", " G GG G G GG G   G GG G G GG G ", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", " G GG G G GG G   G GG G G GG G ", "B      B      B B      B      B")
                    .aisle("BBBBBBBBBBBBBBB BBBBBBBBBBBBBBB", " G GG G G GG G   G GG G G GG G ", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", " G GG G G GG G   G GG G G GG G ", "B             B B             B", " G GG G G GG G   G GG G G GG G ", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", " G GG G G GG G   G GG G G GG G ", "B      B      B B      B      B")
                    .aisle("BBBBBBBBBBBBBBB BBBBBBBBBBBBBBB", " G GG G G GG G   G GG G G GG G ", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", " G GG G G GG G   G GG G G GG G ", "BHHHHHHHHHHHHHB BHHHHHHHHHHHHHB", " G GG G G GG G   G GG G G GG G ", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", "EEEEEEEEEEEEEEE EEEEEEEEEEEEEEE", " G GG G G GG G   G GG G G GG G ", "B      B      B B      B      B")
                    .aisle("BBBBBBBBBBBBBBB BBBBBBBBBBBBBBB", "B      B      B B      B      B", "BGIGG GBG GG GB BG GG GBG GGIGB", "BG GG GBG GG GB BG GG GBG GG GB", "B      B      B B      B      B", "BBBBBBBBBBBBBBB BBBBBBBBBBBBBBB", "B      B      B B      B      B", "BG GG GBG GG GB BG GG GBG GG GB", "BG GG GBG GG GB BG GG GBG GG GB", "B      B      B B      B      B", "BBBBBBBBBBBBBBB BBBBBBBBBBBBBBB")
                    .aisle("                               ", "                               ", "  I                         I  ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("                               ", "                               ", "  I                         I  ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("BBIBB                     BBIBB", "  I                         I  ", "  I                         I  ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("BBIBB                     BBIBB", " BBB                       BBB ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "                               ")
                    .aisle("BBBBB                     BBBBB", "BDDDB                     BDDDB", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " BBB                       BBB ", "                               ")
                    .aisle("BBBBB                     BBBBB", "DDDDD                     DDDDD", "D   D                     D   D", "D   D                     D   D", "D   D                     D   D", "D   D                     D   D", "D   D                     D   D", "D   D                     D   D", "DD DD                     DD DD", "BDDDB                     BDDDB", "  B                         B  ")
                    .aisle("BBBBB                     BBBBB", "DDDDD                     DDDDD", "D L D                     D L D", "D L D                     D L D", "D L D                     D L D", "D L D                     D L D", "D L D                     D L D", "D L D                     D L D", "D L D                     D L D", "BDDDB                     BDDDB", " BBB                       BBB ")
                    .aisle("BBBBB                     BBBBB", "DDDDD                     DDDDD", "D   D                     D   D", "D   D                     D   D", "D   MM                   MM   D", "D   D                     D   D", "D   D                     D   D", "D   D                     D   D", "DD DD                     DD DD", "BDDDB                     BDDDB", "  B                         B  ")
                    .aisle("BBBBB                     BBBBB", "BDDD                       DDDB", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", "B B B                     B B B", "                               ")
                    .aisle("BBBBB                     BBBBB", "BBB B                       BB ", "B B B                       B  ", "B B B                       B  ", "B B B                       B  ", "B B B                       B  ", "B B B                       B  ", "B B B                       B  ", "B B B                       B  ", "B B B                     B B B", "                               ")
                    .aisle("BBBBB                     BBBBB", "BDDD                       DDDB", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", "B B B                     B B B", "                               ")
                    .aisle("BBBBB                     BBBBB", "DDDDD                     DDDDD", "D   D                     D   D", "D   D                     D   D", "D   MM                   MM   D", "D   D                     D   D", "D   D                     D   D", "D   D                     D   D", "DD DD                     DD DD", "BDDDB                     BDDDB", "  B                         B  ")
                    .aisle("BBBBB                     BBBBB", "DDDDD                     DDDDD", "D L D                     D L D", "D L D                     D L D", "D L D                     D L D", "D L D                     D L D", "D L D                     D L D", "D L D                     D L D", "D L D                     D L D", "BDDDB                     BDDDB", " BBB                       BBB ")
                    .aisle("BBBBB                     BBBBB", "DDDDD                     DDDDD", "D   D                     D   D", "D   D                     D   D", "D   D                     D   D", "D   D                     D   D", "D   D                     D   D", "D   D                     D   D", "DD DD                     DD DD", "BDDDB                     BDDDB", "  B                         B  ")
                    .aisle("BBBBB                     BBBBB", "BDDDB                     BDDDB", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " DDD                       DDD ", " BBB                       BBB ", "                               ")
                    .aisle("BBIBB                     BBIBB", " BBB                       BBB ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "  B                         B  ", "                               ")
                    .aisle("BBIBB                     BBIBB", "  I                         I  ", "  I                         I  ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("                               ", "                               ", "  I                         I  ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("                               ", "                               ", "  I                         I  ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("                               ", "                               ", "  I                         I  ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAAAAA               AAAAAAAA", "A   A                     A   A", "A I A                     A I A", "A   A                     A   A", "A   A                     A   A", "AAAAA                     AAAAA", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", " EEE                       EEE ", " EIE                       EIE ", " EEE                       EEE ", " EEE                       EEE ", "A   A                     A   A", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", " EEE                       EEE ", " EJE                       EJE ", " EJE                       EJE ", " EEE                       EEE ", "A   A                     A   A", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", " EEE                       EEE ", " EJE                       EJE ", " EJE                       EJE ", " EEE                       EEE ", "A   A                     A   A", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", "CEEEC                     CEEEC", "CEJEC                     CEJEC", "CEJEC                     CEJEC", "CEEEC                     CEEEC", "ACCCA                     ACCCA", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", "CEEEC                     CEEEC", "CEJEC                     CEJEC", "CEJEC                     CEJEC", "CEEEC                     CEEEC", "ACCCA                     ACCCA", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", "CEEEC                     CEEEC", "CEJEC                     CEJEC", "CEJEC                     CEJEC", "CEEEC                     CEEEC", "ACCCA                     ACCCA", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", " EEE                       EEE ", " EJE                       EJE ", " EJE                       EJE ", " EEE                       EEE ", "A   A                     A   A", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", " EEE                       EEE ", " EJE                       EJE ", " EJE                       EJE ", " EEE                       EEE ", "A   A                     A   A", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", " EEE                       EEE ", " EKKKK                   KKKKE ", " EJE                       EJE ", " EEE                       EEE ", "A   A                     A   A", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", "CEEEC                     CEEEC", "CEJEC                     CEJEC", "CEJEC                     CEJEC", "CEEEC                     CEEEC", "ACCCA                     ACCCA", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", "CEEEC                     CEEEC", "CEJEC                     CEJEC", "CEJEC                     CEJEC", "CEEEC                     CEEEC", "ACCCA                     ACCCA", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", "CEEEC                     CEEEC", "CEJEC                     CEJEC", "CEJEC                     CEJEC", "CEEEC                     CEEEC", "ACCCA                     ACCCA", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", " EEE                       EEE ", " EJE                       EJE ", " EJE                       EJE ", " EEE                       EEE ", "A   A                     A   A", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", " EEE                       EEE ", " EJE                       EJE ", " EJE                       EJE ", " EEE                       EEE ", "A   A                     A   A", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAA                     AAAAA", " EEE                       EEE ", " EEE                       EEE ", " EEE                       EEE ", " EEE                       EEE ", "A   A                     A   A", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("AAAAAAA                 AAAAAAA", "AFFFA                     AFFFA", "AFFFA                     AFFFA", "AFFFA                     AFFFA", "AFFFA                     AFFFA", "AAAAA                     AAAAA", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("                               ", "               N               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .where('A', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('B', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('C', blocks(GCYMBlocks.CASING_VIBRATION_SAFE.get()))
                    .where('D', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('E', blocks(GTOBlocks.INCONEL_625_CASING.get()))
                    .where('F', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get())
                            .or(GTOPredicates.autoIOAbilities(definition.getRecipeTypes())))
                    .where('G', blocks(GTOBlocks.ECHO_CASING.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ultimet)))
                    .where('I', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('J', blocks(GTOBlocks.INCONEL_625_GEARBOX.get()))
                    .where('K', blocks(GTOBlocks.IRIDIUM_PIPE_CASING.get()))
                    .where('L', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('M', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('N', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/naquadah_reinforced_plant_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition ROAD_OF_HEAVEN = multiblock("road_of_heaven", "通天之路", SuperSpaceElevatorMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getRoadOfHeavenTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getRoadOfHeavenTooltips().getSupplier())
            .block(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTOBlocks.STRENGTHEN_THE_BASE_BLOCK.get()))
                    .where('C', blocks(GTOBlocks.SPACE_ELEVATOR_SUPPORT.get()))
                    .where('D', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('E', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('F', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_SPINDLE.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.Amprosium)))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTOMaterials.Amprosium)))
                    .where('I', blocks(GTOBlocks.HIGH_STRENGTH_SPACE_ELEVATOR_CABLE.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('K', blocks(GTOBlocks.SPACE_ELEVATOR_INTERNAL_SUPPORT.get()))
                    .where('L', blocks(GTOBlocks.SPS_CASING.get()))
                    .where('M', GTOPredicates.light())
                    .where('N', blocks(GTOBlocks.LAW_FILTER_CASING.get()))
                    .where('O', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('P', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('Q', blocks(GTOBlocks.MODULE_CONNECTOR.get()))
                    .where('R', blocks(GTOBlocks.SPACE_ELEVATOR_MODULE_BASE.get()))
                    .where('S', blocks(GTOBlocks.ZIRCONIA_CERAMIC_HIGH_STRENGTH_BENDING_RESISTANCE_MECHANICAL_BLOCK.get()))
                    .where('T', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('U', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('V', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.BlackSteel)))
                    .where('W', blocks(GTOBlocks.RHENIUM_REINFORCED_ENERGY_GLASS.get()))
                    .where('X', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('Y', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('Z', blocks(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING.get()))
                    .where('[', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_MECHANICAL_CASING.get()))
                    .where('*', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where(']', blocks(GTOBlocks.TITANIUM_NITRIDE_CERAMIC_IMPACT_RESISTANT_MECHANICAL_BLOCK.get()))
                    .where('^', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('_', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('`', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tungsten)))
                    .where('a', blocks(GTBlocks.ADVANCED_COMPUTER_CASING.get()))
                    .where('b', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('c', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenSteel)))
                    .where('d', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('e', blocks(GTOBlocks.DYSON_CONTROL_CASING.get()))
                    .where('f', blocks(GTOBlocks.COBALT_OXIDE_CERAMIC_STRONG_THERMALLY_CONDUCTIVE_MECHANICAL_BLOCK.get()))
                    .where('g', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HastelloyX)))
                    .where('h', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('i', blocks(GTOBlocks.SPEEDING_PIPE.get()))
                    .where('j', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('l', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('m', blocks(GTOBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('n', blocks(GTOBlocks.BORON_CARBIDE_CERAMIC_RADIATION_RESISTANT_MECHANICAL_CUBE.get()))
                    .where('o', GTOPredicates.tierBlock(SEPMMAP, POWER_MODULE_TIER))
                    .where('p', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadah)))
                    .where('q', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('r', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('s', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('t', blocks(GTOBlocks.ENHANCE_HYPER_MECHANICAL_CASING.get()))
                    .where('u', blocks(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING.get())
                            .or(abilities(GTOPartAbility.ITEMS_INPUT).setExactLimit(1))
                            .or(abilities(INPUT_ENERGY).setExactLimit(1))
                            .or(abilities(COMPUTATION_DATA_RECEPTION).setExactLimit(1)))
                    .where('v', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .renderer(SpaceElevatorRenderer::new)
            .hasTESR(true)
            .register();

    public static final MultiblockMachineDefinition MEGA_BATH_TANK = multiblock("mega_bath_tank", "巨型浸洗池", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .recipeTypes(GTRecipeTypes.ORE_WASHER_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getMegaBathTankTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('B', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('C', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('D', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSLASteel)))
                    .where('F', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('G', blocks(GTOBlocks.FLOCCULATION_CASING.get()))
                    .where('H', controller(blocks(definition.get())))
                    .where('I', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('K', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('L', blocks(GTOBlocks.LASER_CASING.get()))
                    .where('M', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('N', blocks(GTBlocks.FILTER_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/reinforced_sterile_water_plant_casing"), GTOCore.id("block/multiblock/general2"))
            .register();

    public static final MultiblockMachineDefinition MEGA_VACUUM_DRYING_FURNACE = multiblock("mega_vacuum_drying_furnace", "巨型真空干燥炉", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.VACUUM_DRYING_RECIPES)
            .tooltips(GTOMachineStories.INSTANCE.getMegaVacuumDryingFurnaceTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('E', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('F', blocks(GTOBlocks.RED_STEEL_CASING.get()))
                    .where('G', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('H', heatingCoils())
                    .where('I', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tungsten)))
                    .where('K', blocks(GTBlocks.COMPUTER_CASING.get()))
                    .where('L', blocks(GTBlocks.COMPUTER_HEAT_VENT.get()))
                    .where('M', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('O', blocks(GTBlocks.HERMETIC_CASING_LuV.get()))
                    .where('P', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('Q', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('a', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition MOLECULAR_OSCILLATION_DEHYDRATOR = multiblock("molecular_oscillation_dehydrator", "分子震荡脱水装置", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getMolecularOscillationDehydratorTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.DEHYDRATOR_RECIPES)
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('B', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('C', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('a', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('E', blocks(GTOBlocks.RED_STEEL_CASING.get()))
                    .where('F', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('G', heatingCoils())
                    .where('H', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('I', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('J', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/cleanroom"))
            .register();

    public static final MultiblockMachineDefinition HORIZONTAL_COMPRESSOR = multiblock("extreme_compressor", "极限压缩装置", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.EXTREME_COMPRESSOR)
            .tooltips(GTOMachineStories.INSTANCE.getHorizontalCompressorTooltips().getSupplier())
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .combinedRecipeTooltips()
            .block(GTOBlocks.IRIDIUM_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('A', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('B', blocks(GTOBlocks.NAQUADAH_ALLOY_CASING.get()))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.IncoloyMA956)))
                    .where('F', blocks(GTOBlocks.IRIDIUM_PIPE_CASING.get()))
                    .where('G', abilities(MUFFLER))
                    .where('H', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.DepletedUraniumAlloy)))
                    .where('J', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('K', blocks(GTOBlocks.IRIDIUM_GEARBOX.get()))
                    .where('L', blocks(GTOBlocks.INCONEL_625_PIPE.get()))
                    .where('M', blocks(GTOBlocks.HIGH_PRESSURE_PIPE_CASING.get()))
                    .where('N', blocks(GTBlocks.HERMETIC_CASING_UV.get()))
                    .where('O', blocks(GTOBlocks.CHEMICAL_CORROSION_RESISTANT_PIPE_CASING.get()))
                    .where('P', blocks(GTOBlocks.HIGH_STRENGTH_SUPPORT_SPINDLE.get()))
                    .where('Q', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('R', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTOCore.id("block/multiblock/general1"))
            .register();

    public static final MultiblockMachineDefinition WATER_PURIFICATION_PLANT = multiblock("water_purification_plant", "净化处理厂", WaterPurificationPlantMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getWaterPurificationPlantTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getWaterPurificationPlantTooltips().getSupplier())
            .laserTooltips()
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.STERILE_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAA", "CEEEEEC", "CEFFFEC", "CEEEEEC", "CCCCCCC", "       ", "       ", "       ", "       ")
                    .aisle("AAAAAAA", "E     E", "E     E", "E     E", "CEEEEEC", " B   B ", " B   B ", " B   B ", " B   B ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CCC  ", "  CCC  ", "  CCC  ", "  CCC  ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CGC  ", "  CGC  ", "  CGC  ", "  CGC  ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CCC  ", "  CCC  ", "  CCC  ", "  CCC  ")
                    .aisle("AAAAAAA", "E     E", "E     E", "E     E", "CEEEEEC", " BBCBB ", " B   B ", " B   B ", " B   B ")
                    .aisle("AAAAAAA", "CEEEEEC", "CEEEEEC", "CEEEEEC", "CCCCCCC", "  BCB  ", "       ", "       ", "       ")
                    .aisle("AAAAAAA", "  BaB  ", "  B~B  ", "  BaB  ", "  BaB  ", "  BaB  ", "       ", "       ", "       ")
                    .where('~', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tungsten)))
                    .where('C', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('a', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get())
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2)))
                    .where('F', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('G', air())
                    .where('A', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('E', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/sterile_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition CLARIFIER_PURIFICATION_UNIT = multiblock("clarifier_purification_unit", "澄清器净化装置", ClarifierPurificationUnitMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getClarifierPurificationUnitTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getClarifierPurificationUnitTooltips().getSupplier())
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAAAAAA", "AFFFAAAFFFA", "AFFFAAAFFFA", "AFFFAAAFFFA", "AAAAAAAAAAA")
                    .aisle("AFFFAAAFFFA", "FGGGFEFGGGF", "FHHHFEFHHHF", "FEEEF FEEEF", "A         A")
                    .aisle("AFFFAAAFFFA", "FGGGFEFGGGF", "FHHHFEFHHHF", "FEEEF FEEEF", "A         A")
                    .aisle("AFFFAAAFFFA", "FGGGFEFGGGF", "FHHHFEFHHHF", "FEEEF FEEEF", "A         A")
                    .aisle("AFDFAAAFDFA", "FGDGFEFGDGF", "FHHHFEFHHHF", "FEEEF FEEEF", "A         A")
                    .aisle("AADDDDDDDAA", "AFFFAEAFFFA", "AFFFAEAFFFA", "AFFFA AFFFA", "A         A")
                    .aisle("AAAADADAAAA", "AEEEEEEEEEA", "AEEEEEEEEEA", "A         A", "A         A")
                    .aisle("BBBBBBBBBBB", "ABBBBCBBBBA", "ABBBBBBBBBA", "AAAAAAAAAAA", "AAAAAAAAAAA")
                    .where('A', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('B', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(3))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('E', air())
                    .where('F', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('H', blocks(GTBlocks.FILTER_CASING.get()))
                    .where(' ', any())
                    .build())
            .renderer(FluidRenderer.create(GTOCore.id("block/reinforced_sterile_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor")))
            .hasTESR(true)
            .register();

    public static final MultiblockMachineDefinition OZONATION_PURIFICATION_UNIT = multiblock("ozonation_purification_unit", "臭氧净化装置", OzonationPurificationUnitMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getOzonationPurificationUnitTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getOzonationPurificationUnitTooltips().getSupplier())
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.OZONE_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("     AAA ", "     AAA ", "     AAA ", "     AAA ", "     AAA ", "     AAA ", "      A  ", "      A  ", "         ", "         ")
                    .aisle("C   AAAAA", "C   A   A", "C   A   A", "EEEEA   A", "EDDEA   A", "EEEEA   A", "     A A ", "     A A ", "      A  ", "      A  ")
                    .aisle("    AAAAA", "  FFA   A", "  F A   A", "EEEEA   A", "E  EA   A", "EDDEA   A", "    A   A", "    A   A", "     A A ", "     AAA ")
                    .aisle("C   AAAAA", "C   A D A", "C   A D A", "EEEEA D A", "EDDEA   A", "EEEEA   A", "     A A ", "     A A ", "      A  ", "      A  ")
                    .aisle("     A~A ", "     A A ", "     A A ", "     A A ", "     AAA ", "     AAA ", "      A  ", "      A  ", "         ", "         ")
                    .where('~', controller(blocks(definition.get())))
                    .where('E', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('A', blocks(GTOBlocks.OZONE_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSSE)))
                    .where('D', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('F', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/ozone_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition FLOCCULATION_PURIFICATION_UNIT = multiblock("flocculation_purification_unit", "絮凝净化装置", FlocculationPurificationUnitMachine::new)
            .nonYAxisRotation()
            .tooltips(GTOMachineStories.INSTANCE.getFlocculationPurificationUnitTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getFlocculationPurificationUnitTooltips().getSupplier())
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.FLOCCULATION_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("HH     HH", "HH     HH", "HH     HH", "HH     HH")
                    .aisle("HAAAAAAAH", "HAAAAAAAH", "HAAAAAAAH", "HGG   GGH")
                    .aisle(" ACCCCCA ", " AGDDDGA ", " AG###GA ", " GG   GG ")
                    .aisle(" ACEEECA ", " FDDDDDF ", " A#####A ", "         ")
                    .aisle(" ACEEECA ", " FDDDDDF ", " A#####A ", "         ")
                    .aisle(" ACEEECA ", " FDDDDDF ", " A#####A ", "         ")
                    .aisle(" ACCCCCA ", " ADDDDDA ", " A#####A ", "         ")
                    .aisle(" AAAAAAA ", " AAA~AAA ", " AAAAAAA ", "         ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.FLOCCULATION_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('H', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('F', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('D', air())
                    .where('E', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('G', frames(GTMaterials.StainlessSteel))
                    .where('C', blocks(GTOBlocks.FLOCCULATION_CASING.get()))
                    .where(' ', any())
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/flocculation_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition PH_NEUTRALIZATION_PURIFICATION_UNIT = multiblock("ph_neutralization_purification_unit", "pH中和净化装置", PHNeutralizationPurificationUnitMachine::new)
            .allRotation()
            .tooltips(GTOMachineStories.INSTANCE.getPHNeutralizationPurificationUnitTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getPHNeutralizationPurificationUnitTooltips().getSupplier())
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.STABILIZED_NAQUADAH_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("ABBBA     ABBBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABBBA     ABBBA", "A   A     A   A")
                    .aisle("BBBBB     BBBBB", "B   BGDDDDB   B", "B   B     B   B", "B   B     B   B", "B   B     B   B", " BBB       BBB ")
                    .aisle("BBBBBDDDDDBBBBB", "C             C", "C   BDDDDDB   C", "C   B     B   C", "B   B     B   B", " BFB       BGB ")
                    .aisle("BBBBB     BBBBB", "B   BDD~DDB   B", "B   B     B   B", "B   B     B   B", "B   B     B   B", " BBB       BBB ")
                    .aisle("ABBBA     ABBBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABBBA     ABBBA", "A   A     A   A")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', frames(GTMaterials.Naquadah))
                    .where('F', abilities(IMPORT_ITEMS))
                    .where('G', abilities(IMPORT_FLUIDS))
                    .where('B', blocks(GTOBlocks.INERT_NEUTRALIZATION_WATER_PLANT_CASING.get()))
                    .where('C', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('D', blocks(GTOBlocks.STABILIZED_NAQUADAH_WATER_PLANT_CASING.get())
                            .or(blocks(GTOMachines.PH_SENSOR.getBlock()).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/stabilized_naquadah_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition EXTREME_TEMPERATURE_FLUCTUATION_PURIFICATION_UNIT = multiblock("extreme_temperature_fluctuation_purification_unit", "极端温度波动净化装置", ExtremeTemperatureFluctuationPurificationUnitMachine::new)
            .allRotation()
            .tooltips(GTOMachineStories.INSTANCE.getExtremeTemperatureFluctuationPurificationUnitTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getExtremeTemperatureFluctuationPurificationUnitTooltips().getSupplier())
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.PLASMA_HEATER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "            AAAAAAA    ")
                    .aisle("           AAAAAAAAA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "             AAAAA     ", "            AAAAAAA    ", "          AA       AA  ")
                    .aisle("          AAAAAAAAAAA  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "            A     A    ", "          AA       AA  ", "         A           A ")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           A       A   ", "          A         A  ", "         A           A ")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "          A         A  ", "         A           A ", "        A             A")
                    .aisle("CDEDC   AAAAAAAAAAAAAAA", "C   C   A             A", "C   C   A             A", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C     A         A  ", "C   C     A         A  ", "CBDBC     A         A  ", "          A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("EFFFD   AAAAAAAAAAAAAAA", " GGGDDDDA             A", " GGG    A             A", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG      A         A  ", " GGG      A         A  ", "DDDDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("IFFFDDDDAAAAAAAAAAAAAAA", " GHG    A             A", " GHGDDDDA             A", " GHG     A           A ", " GHG     A           A ", " GHG     A           A ", " GHG     A           A ", " GHG      A         A  ", " GHG      A         A  ", "JDBDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("EFFFD   AAAAAAAAAAAAAAA", " GGGDDDDA             A", " GGG    A             A", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG      A         A  ", " GGG      A         A  ", "DDDDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("CD~DC   AAAAAAAAAAAAAAA", "C   C   A             A", "C   C   A             A", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C     A         A  ", "C   C     A         A  ", "CBDBC     A         A  ", "          A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "          A         A  ", "         A           A ", "        A             A")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           A       A   ", "          A         A  ", "         A           A ")
                    .aisle("          AAAAAAAAAAA  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "            A     A    ", "          AA       AA  ", "         A           A ")
                    .aisle("           AAAAAAAAA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "             AAAAA     ", "            AAAAAAA    ", "          AA       AA  ")
                    .aisle("             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "            AAAAAAA    ")
                    .where('~', controller(blocks(definition.get())))
                    .where('H', blocks(GTOBlocks.SPEEDING_PIPE.get()))
                    .where('I', blocks(GTOMachines.HEAT_SENSOR.getBlock()))
                    .where('J', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()).or(blocks(GTOMachines.HEAT_SENSOR.getBlock())))
                    .where('B', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()).or(abilities(IMPORT_FLUIDS).setPreviewCount(2)))
                    .where('E', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()).or(abilities(EXPORT_FLUIDS).setPreviewCount(2)))
                    .where('F', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('G', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('D', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('A', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('C', frames(GTMaterials.Naquadria))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/plasma_heater_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition HIGH_ENERGY_LASER_PURIFICATION_UNIT = multiblock("high_energy_laser_purification_unit", "高能激光净化装置", HighEnergyLaserPurificationUnitMachine::new)
            .allRotation()
            .tooltips(GTOMachineStories.INSTANCE.getHighEnergyLaserPurificationUnitTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getHighEnergyLaserPurificationUnitTooltips().getSupplier())
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("     BBB     ", "     CCC     ", "             ", "             ", "             ", "             ", "             ", "     CCC     ", "     BBB     ")
                    .aisle("   AAAAAAA   ", "   CCDDDCC   ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "   CCAAACC   ", "   AAAAAAA   ")
                    .aisle(" AAAAAAAAAAA ", " CCDD   DDCC ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", " CCAAEEEAACC ", " AAAAAAAAAAA ")
                    .aisle("BAAAAAAAAAAAB", "CDD       DDC", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", "CAAEEEEEEEAAC", "BAAAAAAAAAAAB")
                    .aisle("BAAAAAAAAAAAB", "CD         DC", " D         D ", " D         D ", " D         D ", " D         D ", " D         D ", "CAEEEEEEEEEAC", "BAAAAAFAAAAAB")
                    .aisle("BAAAAAAAAAAAB", "CDD       DDC", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", "CAAEEEEEEEAAC", "BAAAAAAAAAAAB")
                    .aisle(" AAAAAAAAAAA ", " CCDD   DDCC ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", " CCAAEEEAACC ", " AAAAAAAAAAA ")
                    .aisle("   AAAAAAA   ", "   CCDDDCC   ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "   CCAAACC   ", "   AAAAAAA   ")
                    .aisle("     B~B     ", "     CCC     ", "             ", "             ", "             ", "             ", "             ", "     CCC     ", "     BBB     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('E', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('F', blocks(GTOMachines.LENS_HOUSING.getBlock()))
                    .where('D', blocks(GTOBlocks.ELECTRON_PERMEABLE_AMPROSIUM_COATED_GLASS.get()))
                    .where('A', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('B', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get())
                            .or(blocks(GTOMachines.LENS_INDICATOR_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('C', frames(GTMaterials.Neutronium))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/naquadah_reinforced_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition RESIDUAL_DECONTAMINANT_DEGASSER_PURIFICATION_UNIT = multiblock("residual_decontaminant_degasser_purification_unit", "残余污染物脱气净化装置", ResidualDecontaminantDegasserPurificationUnitMachine::new)
            .allRotation()
            .tooltips(GTOMachineStories.INSTANCE.getResidualDecontaminantDegasserPurificationUnitTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getResidualDecontaminantDegasserPurificationUnitTooltips().getSupplier())
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.PLASMA_HEATER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("      CCCCC      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "      AAAAA      ")
                    .aisle("    AAAAAAAAA    ", "      AAAAABB    ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "                 ", "                 ", "           B     ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "                 ", "                 ", "           B     ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "      AAAAAA     ", "    AAAAAAAAA    ")
                    .aisle("  AAAAAAAAAAAAA  ", "    AAAAAAAAA    ", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "       DDD       ", "    B   D        ", "                 ", "            B    ", "                 ", "                 ", "                 ", "                 ", "                 ", "    B            ", "                 ", "            B    ", "                 ", "        D        ", "       DDD       ", "      DDDDD      ", "      DDDDD      ", "   BB DDDDD      ", "    AAAAAAAAAB   ", "  AAAAAAAAAAAAA  ")
                    .aisle("  AAAAAAAAAAAAA  ", "   AAAAAAAAAAA   ", "    DD     DD    ", "    DD     DD    ", "    DD     DD    ", "     DD   DD     ", "     DDD DDD     ", "   B  DDDDD  B   ", "       DDD       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "   B         B   ", "       DDD       ", "      DDDDD      ", "     DDD DDD     ", "     DD   DD     ", "    DD     DD    ", "    DD     DD    ", "    DD     DD B  ", "  BAAAAAAAAAAA   ", "  AAAAAAAAAAAAA  ")
                    .aisle(" AAAAAAAAAAAAAAA ", " BAAAAAAAAAAAAA  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D B  ", "    DD     DD    ", "  B  DD   DD     ", "      DDDDD      ", "       DDD       ", "                 ", "                 ", "                 ", "       DDD    B  ", "      DDDDD      ", "  B  DD   DD     ", "    DD     DD    ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "   D         DB  ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle(" AAAAAAAAAAAAAAA ", " BAAAAAAAAAAAAA  ", "   D         D   ", "   D         D   ", "   D         D   ", "   D         D B ", "   D         D   ", "    D       D    ", "    D       D    ", " B   D     D     ", "      D   D      ", "       DDD       ", "                 ", "       DDD     B ", "      D   D      ", "     D     D     ", "    D       D    ", " B  D       D    ", "   D         D   ", "   D         D   ", "   D         D   ", "   D         D B ", "   D         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", " BD           D  ", "  D           D  ", "  D           DB ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", " B   D     D     ", "      DDDDD      ", "       DDD     B ", "      DDDDD      ", "     D     D     ", "    D       D    ", "    D       D    ", "   D         D   ", " B D         D   ", "   D         D   ", "  D           DB ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", " BD           D  ", "  D           D  ", "  D           DB ", "  D           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", " B  D       D    ", "     DD   DD     ", "      DDDDD    B ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", " B D         D   ", "  D           D  ", "  D           DB ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           D  ", " BD           DB ", "  D           D  ", "  D           D  ", "  D           D  ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", " B   DD   DD   B ", "      DD DD      ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "  D           D  ", " BD           DB ", "  D           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           DB ", "  D           D  ", " BD           D  ", "  D           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D  B ", "     DD   DD     ", " B    DDDDD      ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "   D         D B ", "  D           D  ", " BD           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           DB ", "  D           D  ", " BD           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", "     D     D   B ", "      DDDDD      ", " B     DDD       ", "      DDDDD      ", "     D     D     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D B ", "   D         D   ", " BD           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle(" AAAAAAAAAAAAAAA ", "  AAAAAAAAAAAAAB ", "   D         D   ", "   D         D   ", "   D         D   ", " B D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", "     D     D   B ", "      D   D      ", "       DDD       ", "                 ", " B     DDD       ", "      D   D      ", "     D     D     ", "    D       D    ", "    D       D  B ", "   D         D   ", "   D         D   ", "   D         D   ", " B D         D   ", "   D         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle(" AAAAAAAAAAAAAAA ", "  AAAAAAAAAAAAAB ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "  B D       D    ", "    DD     DD    ", "     DD   DD  B  ", "      DDDDD      ", "       DDD       ", "                 ", "                 ", "                 ", "  B    DDD       ", "      DDDDD      ", "     DD   DD  B  ", "    DD     DD    ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "  BD         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle("  AAAAAAAAAAAAA  ", "   AAAAAAAAAAA   ", "    DD     DD    ", "    DD     DD    ", "    DD     DD    ", "     DD   DD     ", "     DDD DDD     ", "   B  DDDDD  B   ", "       DDD       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "   B         B   ", "       DDD       ", "      DDDDD      ", "     DDD DDD     ", "     DD   DD     ", "    DD     DD    ", "    DD     DD    ", "  B DD     DD    ", "   AAAAAAAAAAAB  ", "  AAAAAAAAAAAAA  ")
                    .aisle("  AAAAAAAAAAAAA  ", "    AAAAAAAAA    ", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "       DDD       ", "        D   B    ", "                 ", "    B            ", "                 ", "                 ", "                 ", "                 ", "                 ", "            B    ", "                 ", "    B            ", "                 ", "        D        ", "       DDD       ", "      DDDDD      ", "      DDDDD      ", "      DDDDD BB   ", "   BAAAAAAAAA    ", "  AAAAAAAAAAAAA  ")
                    .aisle("    AAAAAAAAA    ", "    BBAA~AA      ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "                 ", "                 ", "     B           ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "                 ", "                 ", "     B           ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "      AAAAA      ", "    AAAAAAAAA    ")
                    .aisle
                    .where('~', controller(blocks(definition.get())))
                    .where('D', blocks(GTOBlocks.OMNI_PURPOSE_INFINITY_FUSED_GLASS.get()))
                    .where('A', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('C', blocks(GTOBlocks.PLASMA_HEATER_CASING.get())
                            .or(blocks(GTOMachines.DEGASSING_CONTROL_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', frames(GTMaterials.Naquadria))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/plasma_heater_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition ABSOLUTE_BARYONIC_PERFECTION_PURIFICATION_UNIT = multiblock("absolute_baryonic_perfection_purification_unit", "绝对重子完美净化装置", AbsoluteBaryonicPerfectionPurificationUnitMachine::new)
            .allRotation()
            .tooltips(GTOMachineStories.INSTANCE.getAbsoluteBaryonicPerfectionPurificationUnitTooltips().getSupplier())
            .tooltips(GTOMachineTooltips.INSTANCE.getAbsoluteBaryonicPerfectionPurificationUnitTooltips().getSupplier())
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.QUARK_EXCLUSION_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("                 ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "      AAAAA      ", "      AAAAA      ", " CCCCCAAAAACCCCC ", "      AAAAA      ", "      AAAAA      ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "      DEEED      ", " C    DEFED    C ", "      DEEED      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DDDDD      ", "                 ", "                 ", "                 ", "AAD   AAAAA   DAA", "AAD    EEE    DAA", "AAD    EFE    DAA", "AAD    EEE    DAA", "AAD   AAAAA   DAA", "                 ", "                 ", "                 ", "      DDDDD      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DEEED      ", "       EEE       ", "       EEE       ", "       EEE       ", "AAD   AEEEA   DAA", "AAEEEEE   EEEEEAA", "AAEEEEE F EEEEEAA", "AAEEEEE   EEEEEAA", "AAD   AEEEA   DAA", "       EEE       ", "       EEE       ", "       EEE       ", "      DEEED      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", " CCCCCAAAAACCCCC ", " C    DEFED    C ", " C     EFE     C ", " C     EFE     C ", " C     EFE     C ", "AAD   AEFEA   DAA", "AAEEEEE F EEEEEAA", "AAFFFFFFFFFFFFFAA", "AAEEEEE F EEEEEAA", "AAD   AEFEA   DAA", " C     EFE     C ", " C     EFE     C ", " C     EFE     C ", " C    DEFED    C ", " CCCCCAAAAACCCCC ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DEEED      ", "       EEE       ", "       EEE       ", "       EEE       ", "AAD   AEEEA   DAA", "AAEEEEE   EEEEEAA", "AAEEEEE F EEEEEAA", "AAEEEEE   EEEEEAA", "AAD   AEEEA   DAA", "       EEE       ", "       EEE       ", "       EEE       ", "      DEEED      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DDDDD      ", "                 ", "                 ", "                 ", "AAD   AAAAA   DAA", "AAD    EEE    DAA", "AAD    EFE    DAA", "AAD    EEE    DAA", "AAD   AAAAA   DAA", "                 ", "                 ", "                 ", "      DDDDD      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "      DEEED      ", " C    DEFED    C ", "      DEEED      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "      AAAAA      ", "      AAAAA      ", " CCCCCAAAAACCCCC ", "      AAAAA      ", "      AAAAA      ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "                 ")
                    .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "      BBBBB      ", "      BBBBB      ", "      BB~BB      ", "      BBBBB      ", "      BBBBB      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .where('~', controller(blocks(definition.get())))
                    .where('C', frames(GTMaterials.NaquadahAlloy))
                    .where('D', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('E', blocks(GTOBlocks.NON_PHOTONIC_MATTER_EXCLUSION_GLASS.get()))
                    .where('F', blocks(GTOBlocks.QUARK_PIPE.get()))
                    .where('A', blocks(GTOBlocks.QUARK_EXCLUSION_CASING.get()))
                    .where('B', blocks(GTOBlocks.QUARK_EXCLUSION_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/quark_exclusion_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();
}
