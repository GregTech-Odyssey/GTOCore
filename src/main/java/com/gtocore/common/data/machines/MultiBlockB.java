package com.gtocore.common.data.machines;

import com.gtocore.api.machine.part.GTOPartAbility;
import com.gtocore.api.pattern.GTOPredicates;
import com.gtocore.client.renderer.machine.FluidRenderer;
import com.gtocore.client.renderer.machine.SpaceElevatorRenderer;
import com.gtocore.common.data.GTOBlocks;
import com.gtocore.common.data.GTOMachines;
import com.gtocore.common.data.GTOMaterials;
import com.gtocore.common.data.GTORecipeTypes;
import com.gtocore.common.machine.multiblock.electric.space.SuperSpaceElevatorMachine;
import com.gtocore.common.machine.multiblock.water.*;

import com.gtolib.GTOCore;
import com.gtolib.api.annotation.NewDataAttributes;
import com.gtolib.api.annotation.component_builder.ComponentBuilder;
import com.gtolib.api.annotation.component_builder.StyleBuilder;
import com.gtolib.api.machine.multiblock.CoilCrossRecipeMultiblockMachine;
import com.gtolib.api.machine.multiblock.CoilMultiblockMachine;
import com.gtolib.api.machine.multiblock.CrossRecipeMultiblockMachine;
import com.gtolib.api.machine.multiblock.ElectricMultiblockMachine;
import com.gtolib.utils.MachineUtils;
import com.gtolib.utils.MultiBlockFileReader;

import com.gregtechceu.gtceu.GTCEu;
import com.gregtechceu.gtceu.api.data.chemical.ChemicalHelper;
import com.gregtechceu.gtceu.api.data.tag.TagPrefix;
import com.gregtechceu.gtceu.api.machine.MultiblockMachineDefinition;
import com.gregtechceu.gtceu.api.pattern.FactoryBlockPattern;
import com.gregtechceu.gtceu.api.pattern.util.RelativeDirection;
import com.gregtechceu.gtceu.common.data.GCYMBlocks;
import com.gregtechceu.gtceu.common.data.GTBlocks;
import com.gregtechceu.gtceu.common.data.GTMaterials;
import com.gregtechceu.gtceu.common.data.GTRecipeTypes;

import net.minecraft.server.level.ServerLevel;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.LightningBolt;
import net.minecraft.world.level.block.Blocks;

import committee.nova.mods.avaritia.init.registry.ModBlocks;

import static com.gregtechceu.gtceu.api.machine.multiblock.PartAbility.*;
import static com.gregtechceu.gtceu.api.pattern.Predicates.*;
import static com.gtocore.common.block.BlockMap.SEPMMAP;
import static com.gtolib.api.GTOValues.POWER_MODULE_TIER;
import static com.gtolib.utils.register.MachineRegisterUtils.multiblock;

public final class MultiBlockB {

    public static void init() {}

    public static final MultiblockMachineDefinition GRAVITATION_SHOCKBURST = multiblock("gravitation_shockburst", "引力震爆器", ElectricMultiblockMachine::new)
            .allRotation()
            .recipeTypes(GTORecipeTypes.GRAVITATION_SHOCKBURST_RECIPES)
            .recipeTypes(GTORecipeTypes.ELECTRIC_IMPLOSION_COMPRESSOR_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .parallelizableOverclock()
            .block(GTOBlocks.CREATE_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("aaaaaaaaa", "         ", "         ", "         ", "         ", "         ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b ccc b ", " bcccccb ", " bcccccb ", " bcccccb ", " b ccc b ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcccccb ", " bcc ccb ", " bcccccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcc ccb ", " bc   cb ", " bcc ccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " bcccccb ", " bcccccb ", " bcc ccb ", " bcccccb ", " bcccccb ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " b ccc b ", " bcccccb ", " bcccccb ", " bcccccb ", " b ccc b ", "aaaaaaaaa")
                    .aisle("aaaaaaaaa", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", " abbbbba ", "aaaaaaaaa")
                    .aisle("aaaa~aaaa", "         ", "         ", "         ", "         ", "         ", "aaaaaaaaa")
                    .where('a', blocks(GTOBlocks.CREATE_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(OPTICAL_DATA_RECEPTION).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1)))
                    .where('b', blocks(GTOBlocks.INFINITY_GLASS.get()))
                    .where('c', blocks(ModBlocks.infinity.get()))
                    .where('~', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/create_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition DIGESTION_TANK = multiblock("digestion_tank", "煮解池", CoilMultiblockMachine.createCoilMachine(false, true))
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.DIGESTION_TREATMENT_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("#OOOOO#", "#YMMMY#", "##YYY##", "#######")
                    .aisle("OXXXXXO", "YMAAAMY", "#YAAAY#", "#YYYYY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXKKKXO", "MAAAAAM", "YAAAAAY", "#YAAAY#")
                    .aisle("OXXXXXO", "YMAAAMY", "#YAAAY#", "#YYYYY#")
                    .aisle("#OOSOO#", "#YMMMY#", "##YYY##", "#######")
                    .where('S', controller(blocks(definition.get())))
                    .where('X', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('K', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('Y', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('M', heatingCoils())
                    .where('O', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('A', air())
                    .where('#', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public static final MultiblockMachineDefinition WOOD_DISTILLATION = multiblock("wood_distillation", "木化工厂", ElectricMultiblockMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.WOOD_DISTILLATION_RECIPES)
            .laserTooltips()
            .parallelizableTooltips()
            .parallelizableOverclock()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .where('A', blocks(GCYMBlocks.CASING_STRESS_PROOF.get()))
                    .where('B', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('C', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('D', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('E', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ruridit)))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('G', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('H', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('I', blocks(GTBlocks.HERMETIC_CASING_ZPM.get()))
                    .where('J', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('K', air())
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.NaquadahAlloy)))
                    .where('M', blocks(GCYMBlocks.CASING_CORROSION_PROOF.get()))
                    .where('N', blocks(GTOBlocks.HASTELLOY_N_75_PIPE.get()))
                    .where('O', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('P', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('Q', abilities(MUFFLER))
                    .where('R', blocks(GTBlocks.CASING_STEEL_TURBINE.get()))
                    .where('S', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('T', blocks(GTOBlocks.PROCESS_MACHINE_CASING.get()))
                    .where('U', blocks(GTBlocks.CASING_TITANIUM_TURBINE.get()))
                    .where('V', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('W', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('X', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('Y', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/blast_furnace"))
            .register();

    public static final MultiblockMachineDefinition DESULFURIZER = multiblock("desulfurizer", "脱硫机", CoilCrossRecipeMultiblockMachine::createInfiniteCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.DESULFURIZER_RECIPES)
            .coilParallelTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_STAINLESS_CLEAN)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("CCCCCIIIIIII", "CCCCCILILILI", "CCCCCILILILI", "            ", "            ", "            ")
                    .aisle("CCCCCIIIIIII", "CGCCCXXXXXXI", "CCCCCILILILI", "  CCCILILILI", "  CCCIIIIIII", "            ")
                    .aisle("CCCCCIIIIIII", "CGGGGILILILI", "CCCCCILILILI", "  CXXXXXXXXI", "  CCCIIIIIII", "            ")
                    .aisle("CCCCCIIIIIII", "CGCPCXXXXXXI", "CCCCCILILILI", "  DDDILILILI", "  DDDIIIIIII", "  DDD       ")
                    .aisle("CCCCCIIIIIII", "CCCPCILILILI", "CCCPCILILILI", "  DPD       ", "  DPD       ", "  DDD       ")
                    .aisle("  DDD       ", "  D~D       ", "  DDD       ", "  DDD       ", "  DDD       ", "  DDD       ")
                    .where('~', controller(blocks(definition.get())))
                    .where('I', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get()))
                    .where('X', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('P', blocks(GTBlocks.CASING_BRONZE_PIPE.get()))
                    .where('G', blocks(GTBlocks.HERMETIC_CASING_MV.get()))
                    .where('D', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                            .setMinGlobalLimited(24)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('L', heatingCoils())
                    .where('C', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_clean_stainless_steel"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition LIQUEFACTION_FURNACE = multiblock("liquefaction_furnace", "液化炉", CoilMultiblockMachine.createCoilMachine(false, true))
            .nonYAxisRotation()
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.LIQUEFACTION_FURNACE_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_INVAR_HEATPROOF)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("AAAAA", " BBB ", " AAA ")
                    .aisle("AAAAA", "B B B", "ACCCA")
                    .aisle("AAAAS", "BBEBB", "ACFCA")
                    .aisle("AAAAA", "B B B", "ACCCA")
                    .aisle("AAAAA", " BBB ", " AAA ")
                    .where('B', heatingCoils())
                    .where('C', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('E', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('A', blocks(GTBlocks.CASING_INVAR_HEATPROOF.get())
                            .setMinGlobalLimited(20)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('F', abilities(MUFFLER))
                    .where('S', controller(blocks(definition.get())))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_heatproof"), GTCEu.id("block/multiblock/multi_furnace"))
            .register();

    public static final MultiblockMachineDefinition REACTION_FURNACE = multiblock("reaction_furnace", "反应炉", CoilMultiblockMachine.createCoilMachine(true, true))
            .nonYAxisRotation()
            .tooltipsKey("gtceu.machine.electric_blast_furnace.tooltip.2")
            .parallelizableTooltips()
            .recipeTypes(GTORecipeTypes.REACTION_FURNACE_RECIPES)
            .parallelizableOverclock()
            .block(GTBlocks.CASING_STEEL_SOLID)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("A   A", "ABBBA", "BBCBB", "BBBBB", " BBB ")
                    .aisle("     ", "BBBBB", "BDCDB", "BDCDB", "BAAAB")
                    .aisle("     ", "~BBBB", "CCCCC", "BCCCB", "BAFAB")
                    .aisle("     ", "BBBBB", "BDCDB", "BDCDB", "BAAAB")
                    .aisle("A   A", "ABBBA", "BBCBB", "BBBBB", " BBB ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Steel)))
                    .where('C', heatingCoils())
                    .where('D', blocks(GTBlocks.CASING_STEEL_PIPE.get()))
                    .where('B', blocks(GTBlocks.CASING_STEEL_SOLID.get())
                            .setMinGlobalLimited(20)
                            .or(autoAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('F', abilities(MUFFLER))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_solid_steel"), GTCEu.id("block/multiblock/blast_furnace"))
            .register();

    public static final MultiblockMachineDefinition MEGA_BREWER = multiblock("mega_brewer", "巨型酿造厂", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .recipeTypes(GTRecipeTypes.BREWING_RECIPES)
            .recipeTypes(GTRecipeTypes.FERMENTING_RECIPES)
            .block(GCYMBlocks.CASING_CORROSION_PROOF)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.FRONT, RelativeDirection.UP, RelativeDirection.RIGHT)
                    .aisle("     I   I     ", "     I   I     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("     IIIII     ", "     JJJJJ     ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("    IIIIIII    ", "    JJ   JJ    ", "    JJ G JJ    ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("   IIIIIIIII   ", "   JJECCCEJJ   ", "   JJECGCEJJ   ", "    JJCCCJJ    ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("  IIIIIIIIIII  ", "  JJE     EJJ  ", "  JJE  G  EJJ  ", "   JJ     JJ   ", "    JJJJJJJ    ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("IIIIIIIIIIIIIII", "IJJE       EJJI", "IJJE   G   EJJI", " IJJ       JJI ", "  IJJJJJJJJJI  ", "   IIBBBBBII   ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle(" IIIIIIIIIIIII ", " J C       C J ", " J C   G   C J ", "  JC  CCC  CJ  ", "   JJJBBBJJJ   ", "     BBBBB     ", "      BBB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle(" IIIIIIIIIIIII ", " J C       C ~ ", " JGGGGGGGGGGGJ ", "  JC  CGC  CJ  ", "   JJJBGBJJJ   ", "     BBGBB     ", "      BBB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle(" IIIIIIIIIIIII ", " J C       C J ", " J C   G   C J ", "  JC  CCC  CJ  ", "   JJJBBBJJJ   ", "     BB BB     ", "      BBB      ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("IIIIIIIIIIIIIII", "IJJE       EJJI", "IJJE   G   EJJI", " IJJ       JJI ", "  IJJJJJJJJJI  ", "   IIBB BBII   ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("  IIIIIIIIIII  ", "  JJE     EJJ  ", "  JJE  G  EJJ  ", "   JJ     JJ   ", "    JJJJJJJ    ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("   IIIIIIIII   ", "   JJECCCEJJ   ", "   JJECGCEJJ   ", "    JJCCCJJ    ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("    IIIIIII    ", "    JJ   JJ    ", "    JJ G JJ    ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("     IIIII     ", "     JJJJJ     ", "     JJJJJ     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("     I   I     ", "     I   I     ", "     I   I     ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ", "               ")
                    .aisle("     AAAAA     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     CCCCC     ", "     A   A     ", "               ", "               ")
                    .aisle("   DAAAAAAAD   ", "   DBBBBBBBD   ", "   DBBEEEBBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBBFFFBBD   ", "   DBBFGFBBD   ", "   DBBFFFBBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBBFFFBBD   ", "   DBBFGFBBD   ", "   DBBFFFBBD   ", "   DBB   BBD   ", "   DCCCCCCCD   ", "     BBBBB     ", "     A   A     ", "               ")
                    .aisle("  DAAAAAAAAAD  ", "  DBBBBBBBBBD  ", "  DBBEFCFEBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF G FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF G FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DCCCCCCCCCD  ", "    BB   BB    ", "     BBBBB     ", "     A   A     ")
                    .aisle("  AAAAAAAAAAA  ", "  BBBBBBBBBBB  ", "  BBECFCFCEBB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB   G   BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB   G   BB  ", "  BB       BB  ", "  BB       BB  ", "  CCCCCCCCCCC  ", "   BBB   BBB   ", "    BBBBBBB    ", "     A   A     ")
                    .aisle(" AAAAAAAAAAAAA ", " BBBBBBBBBBBBB ", " BBECCFCFCCEBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H G H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H G H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " CCCCCCCCCCCCC ", " ABBBEEEEEBBBA ", "  ABBBBBBBBBA  ", "   AAABBBAAA   ")
                    .aisle(" AAAAAAAAAAAAA ", " BBBBBBBBBBBBB ", " BEFFFFFFFFFEB ", " B           B ", " B           B ", " B           B ", " B           B ", " B           B ", " BF         FB ", " BF    G    FB ", " BF         FB ", " B           B ", " B           B ", " B           B ", " BF         FB ", " BF    G    FB ", " BF         FB ", " B           B ", " CCCCC   CCCCC ", "  B  EEEEE  B  ", "   BBB   BBB   ", "     BBBBB     ")
                    .aisle(" AAAAAAAAAAAAA ", " BBBBBBBBBBBBB ", " BECCCFGFCCCEB ", " B     G     B ", " B     G     B ", " B     G     B ", " B     G     B ", " B     G     B ", " BF    G    FB ", " BGGGGGGGGGGGB ", " BF    G    FB ", " B     G     B ", " B     G     B ", " B     G     B ", " BF    G    FB ", " BGGGGGGGGGGGB ", " BF    G    FB ", " B     G     B ", " CCCCC G CCCCC ", "  B  EEGEE  B  ", "   BBB G BBB   ", "     BBBBB     ")
                    .aisle(" AAAAAAAAAAAAA ", " BBBBBBBBBBBBB ", " BEFFFFFFFFFEB ", " B           B ", " B           B ", " B           B ", " B           B ", " B           B ", " BF         FB ", " BF    G    FB ", " BF         FB ", " B           B ", " B           B ", " B           B ", " BF         FB ", " BF    G    FB ", " BF         FB ", " B           B ", " CCCCC   CCCCC ", "  B  EEEEE  B  ", "   BBB   BBB   ", "     BBBBB     ")
                    .aisle(" AAAAAAAAAAAAA ", " BBBBBBBBBBBBB ", " BBECCFCFCCEBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H G H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " BBF H G H FBB ", " BBF H   H FBB ", " BBF H   H FBB ", " CCCCCCCCCCCCC ", " ABBBEEEEEBBBA ", "  ABBBBBBBBBA  ", "   AAABBBAAA   ")
                    .aisle("  AAAAAAAAAAA  ", "  BBBBBBBBBBB  ", "  BBECFCFCEBB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB   G   BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB       BB  ", "  BB   G   BB  ", "  BB       BB  ", "  BB       BB  ", "  CCCCCCCCCCC  ", "   BBB   BBB   ", "    BBBBBBB    ", "     A   A     ")
                    .aisle("  DAAAAAAAAAD  ", "  DBBBBBBBBBD  ", "  DBBEFCFEBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF G FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DBBF G FBBD  ", "  DBBF   FBBD  ", "  DBBF   FBBD  ", "  DCCCCCCCCCD  ", "    BB   BB    ", "     BBBBB     ", "     A   A     ")
                    .aisle("   DAAAAAAAD   ", "   DBBBBBBBD   ", "   DBBEEEBBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBBFFFBBD   ", "   DBBFGFBBD   ", "   DBBFFFBBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBB   BBD   ", "   DBBFFFBBD   ", "   DBBFGFBBD   ", "   DBBFFFBBD   ", "   DBB   BBD   ", "   DCCCCCCCD   ", "     BBBBB     ", "     A   A     ", "               ")
                    .aisle("     AAAAA     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     CCCCC     ", "     A   A     ", "               ", "               ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTOBlocks.ANTIFREEZE_HEATPROOF_MACHINE_CASING.get()))
                    .where('C', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('E', blocks(GTOBlocks.HERMETIC_CASING_UEV.get()))
                    .where('F', heatingCoils())
                    .where('G', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('H', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('I', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('J', blocks(GCYMBlocks.CASING_CORROSION_PROOF.get())
                            .setMinGlobalLimited(160)
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/corrosion_proof_casing"), GTCEu.id("block/multiblock/gcym/large_brewer"))
            .register();

    public static final MultiblockMachineDefinition FUEL_REFINING_COMPLEX = multiblock("fuel_refining_complex", "燃料精炼复合体", CoilMultiblockMachine.createCoilMachine(false, true))
            .nonYAxisRotation()
            .parallelizableTooltips()
            .laserTooltips()
            .recipeTypes(GTORecipeTypes.FUEL_REFINING_RECIPES)
            .parallelizableOverclock()
            .block(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("      aaaaa      ", "       a~a       ", "       aaa       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("     AAAAAAA     ", "     ADDDDDA     ", "     ADDDDDA     ", "     ADDDDDA     ", "      DDDDD      ", "       DDD       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle(" AAAAAAAAAAAAAAA ", " KKK DDDDDDD KKK ", " KKK D     D KKK ", " KKK D     D KKK ", " KKK DD   DD KKK ", " KKK  DDDDD  KKK ", "       DDD       ", "       DDD       ", "        D        ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", "KKKKKDDDDDDDKKKKK", "K   KD     DK   K", "K   KD     DK   K", "K   KD     DK   K", "KKKKKDDD DDDKKKKK", " FFF  DD DD  FFF ", "      DD DD      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", "KKKKKDDDDDDDKKKKK", "K   KD     DK   K", "K   KD     DK   K", "K   KD     DK   K", "KK KKDD   DDKK KK", " LJL  D   D  LJL ", "  J   D   D   J  ", "  J   LJDJL   J  ", "  J    J J    J  ", "  JJJJJJ JJJJJJ  ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", "KKKKKDDDDDDDKKKKK", "K   KD     DK   K", "K   KD     DK   K", "K   KD     DK   K", "KKKKKDDD DDDKKKKK", " FFF  DD DD  FFF ", "      DD DD      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", " KKK DDDDDDD KKK ", " KKK D     D KKK ", " KKK D     D KKK ", " KKK DD   DD KKK ", " KKK  DDDDD  KKK ", "       DDD       ", "       DJD       ", "        D        ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "       DDD       ", "                 ", "        J        ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", " DD  BBBBBBB  DD ", " DD  BBBBBBB  DD ", " DD  BBBBBBB  DD ", " DD  BBBBBBB  DD ", " DD  BBBBBBB  DD ", " DD  BBBBBBB  DD ", " DD  BBBJBBB  DD ", " DD   BCCCB   DD ", " DD   BBBBB   DD ", " DD   BBBBB   DD ", " DD    BBB    DD ", "       BBB       ", "                 ")
                    .aisle("AAAAAAAAAAAAAAAAA", "DDDDBBBBBBBBBDDDD", "DDDDBB CEC BBDDDD", "DDDDBB C C BBDDDD", "DDDDBB C C BBDDDD", "DDDDBB C C BBDDDD", "DDDDBB C C BBDDDD", "DDDDBBBCECBBBDDDD", "DDDD FBCECBF DDDD", "DDDD FBBEBBF DDDD", "DDDD FBBEBBF DDDD", "DDDD FBBEBBF DDDD", "FFFFFFBBEBBFFFFFF", "       BBB       ")
                    .aisle("AAAAAAAAAAAAAAAAA", "DDDDBBBBBBBBBDDDD", "I  DB  CEC  BD  I", "D  DB   E   BD  D", "I  DB   E   BD  I", "D  DB   E   BD  D", "I  DBG  E  GBD  I", "D  DBHB E BHBD  D", "I  D  BC CB  D  I", "D  D  B   B  D  D", "I  D  B   B  D  I", "DDDD  B   B  DDDD", "     FB E BF     ", "      BB BB      ")
                    .aisle("AAAAAAAAAAAAAAAAA", "DDDDBBBBBBBBBDDDD", "D  DB  CEC  BD  D", "D  DB       BD  D", "D  DB       BD  D", "D  DB       BD  D", "D  DBG     GBD  D", "D  DBHB E BHBD  D", "D  D  BC CB  D  D", "D  D  B   B  D  D", "D  D  B   B  D  D", "DDDD  B   B  DDDD", "     FB E BF     ", "      BB BB      ")
                    .aisle("AAAAAAAAAAAAAAAAA", "DDDDBBBBBBBBBDDDD", "D  DB  CEC  BD  D", "D  DB       BD  D", "D  DB       BD  D", "D  DB       BD  D", "D  DBG     GBD  D", "D  DBHB E BHBD  D", "D  D  BC CB  D  D", "D  D  B   B  D  D", "D  D  B   B  D  D", "DDDD  B   B  DDDD", "     FB E BF     ", "      BB BB      ")
                    .aisle("AAAAAAAAAAAAAAAAA", "DDDDBBBBBBBBBDDDD", "DDDDB  CEC  BDDDD", "DDDDB   E   BDDDD", "DDDDB   E   BDDDD", "DDDDB   E   BDDDD", "DDDDBG  E  GBDDDD", "DDDDBHB E BHBDDDD", "DDDD  BC CB  DDDD", "DDDD  B   B  DDDD", "DDDD  B   B  DDDD", "DDDD  B   B  DDDD", "FFFFFFB E BFFFFFF", "      BB BB      ")
                    .aisle(" AAAAAAAAAAAAAAA ", " DDABBBBBBBBBADD ", " DDABB CEC BBADD ", " DDABB C C BBADD ", " DD BB C C BB DD ", " DD BB C C BB DD ", " DD BB C C BB DD ", " DD BBBCECBBB DD ", " DD  FBCECBF  DD ", " DD  FBBEBBF  DD ", " DD  FBBEBBF  DD ", " DD  FBBEBBF  DD ", "     FBBEBBF     ", "       BBB       ")
                    .aisle("  AAAAAAAAAAAAA  ", "  AAABBBBBBBAAA  ", "     BBBBBBB     ", "     BBBBBBB     ", "     BBBBBBB     ", "     BBBBBBB     ", "     BBBBBBB     ", "     BBBBBBB     ", "      BCCCB      ", "      BBBBB      ", "      BBBBB      ", "       BBB       ", "       BBB       ", "                 ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('B', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('C', heatingCoils())
                    .where('D', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('E', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.TungstenSteel)))
                    .where('G', blocks(GTBlocks.HERMETIC_CASING_LuV.get()))
                    .where('H', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('I', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('J', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('K', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('L', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('a', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get())
                            .or(GTOPredicates.autoLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/oxidation_resistant_hastelloy_n_mechanical_casing"), GTCEu.id("block/multiblock/gcym/large_brewer"))
            .register();

    public static final MultiblockMachineDefinition MICROORGANISM_MASTER = multiblock("microorganism_master", "微生物之主", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.INCUBATOR_RECIPES)
            .tooltipsText("无视辐射与洁净要求", "Ignores radiation and cleanliness requirements")
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_PTFE_INERT)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("    ABBBBBA   CCC   ABBBBBA    ", "    AAAAAAA   CCC   AAAAAAA    ", "    A     A   CDC   A     A    ", "              CDC              ", "              CDC              ", "              CCC              ", "              CCC              ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("  EEEEEEEEEEEEEEEEEEEEEEEEEEE  ", "   AAAAAAAAAEECCCE AAAAAAAAA   ", "    A     A EEC CE  A     A    ", "    AAAAAAA   C C   AAAAAAA    ", "    A     A   C C   A     A    ", "              C C              ", "              CFC              ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("  EEEEEEEEEEEE E EEEEEEEEEEEE  ", "  AAAAAAAAAAAECCCEAAAAAAAAAAA  ", "   GABBBBBAG EC CE GABBBBBAG   ", "   GAHHHHHAG EC CE GAHHHHHAG   ", "   GA     AG EC CE GA     AG   ", "   GAAAAAAAG  C C  GAAAAAAAG   ", "   G       G  CFC  G       G   ", "   I       I   J   I       I   ", "      HHH      J      HHH      ", "     HHHHH     J     HHHHH     ", "     HHHHH     J     HHHHH     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "     KKKKK           KKKKK     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle(" AEEEEEEEEEEEE E EEEEEEEEEEEEA ", " AAAAAAAAAAAAECCCEAAAAAAAAAAAA ", " AAAA     AAAEC CEAAA     AAAA ", "  AAAAAAAAAAAEC CEAAAAAAAAAAA  ", "  AAABBBBBAAAEC CEAAABBBBBAAA  ", "   AAA   AAA EC CE AAA   AAA   ", "             ECFCE             ", "      HHH             HHH      ", "     HHHHH           HHHHH     ", "    HH   HH         HH   HH    ", "    HH   HH    J    HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    KK   KK         KK   KK    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HHHHHHH         HHHHHHH    ", "     HHHHH           HHHHH     ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle(" BEEEEEEEEEEEE E EEEEEEEEEEEEB ", " AAAAAAAAAAAAECCCEAAAAAAAAAAAA ", "   B       B EC CE B       B   ", "  AHA     AHAEC CEAHA     AHA  ", "    B     B  EC CE  B     B    ", "   AA     AA EC CE AA     AA   ", "      HHH    ECCCE    HHH      ", "     HHHHH   ECCCE   HHHHH     ", "    H     H  ECCCE  H     H    ", "   HH     HH  CCC  HH     HH   ", "   HH     HH   J   HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   KK     KK       KK     KK   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HHH   HHH       HHH   HHH   ", "    HHHHHHH         HHHHHHH    ", "     HHHHH           HHHHH     ", "                               ", "                               ", "                               ", "                               ")
                    .aisle(" BEEEEEEEEEEEE E EEEEEEEEEEEEB ", " AAAAAAAAAAAAECCCEAAAAAAAAAAAA ", "   B  L L  B EC CE B  L L  B   ", "  AHA L L AHAEC CEAHA L L AHA  ", "    B L L B  EC CE  B L L B    ", "   A  HHH  A EC CE A  HHH  A   ", "     HHHHH   EC CE   HHHHH     ", "    HHMMMHH  EC CE  HHMMMHH    ", "   HH     HH EC CE HH     HH   ", "   H       H  CCC  H       H   ", "   H       H   J   H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   K       K       K       K   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   HH     HH       HH     HH   ", "    HH   HH         HH   HH    ", "     HBBBH           HBBBH     ", "                               ", "                               ", "                               ", "                               ")
                    .aisle(" BEEEEEEEEEEEEEEEEEEEEEEEEEEEB ", " AAAAAAAAAAAAECCCEAAAAAAAAAAAA ", "   B   N   B ECFCE B   N   B   ", "  AHA  N  AHAECFCEAHA  N  AHA  ", "    B  N  B  ECFCE  B  N  B    ", "   A  HHH  A ECFCE A  HHH  A   ", "     HHHHH   ECFCE   HHHHH     ", "    HHMMMHH  ECFCE  HHMMMHH    ", "   HH     HH ECFCE HH     HH   ", "   H       H  CFC  H       H   ", "   H       H   J   H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   K       K       K       K   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   HH     HH       HH     HH   ", "    HH   HH         HH   HH    ", "     HBFBH           HBFBH     ", "       O               O       ", "       OOOOOOOOOOOOOOOOO       ", "                               ", "                               ")
                    .aisle(" BEEEEEEEEEEEE E EEEEEEEEEEEEB ", " AAAAAAAAAAAAECCCEAAAAAAAAAAAA ", "   B  L L  B ECCCE B  L L  B   ", "  AHA L L AHAECCCEAHA L L AHA  ", "    B L L B  ECCCE  B L L B    ", "   A  HHH  A ECCCE A  HHH  A   ", "     HHHHH   ECCCE   HHHHH     ", "    HHMMMHH  ECCCE  HHMMMHH    ", "   HH     HH ECCCE HH     HH   ", "   H       H  CCC  H       H   ", "   H       H   J   H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   K       K       K       K   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   HH     HH       HH     HH   ", "    HH   HH         HH   HH    ", "     HBBBH           HBBBH     ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle(" BEEEEEEEEEEEE E EEEEEEEEEEEEB ", " AAAAAAAAAAAAEEEEEAAAAAAAAAAAA ", "   B       B EEEEE B       B   ", "  AHA     AHAEEEEEAHA     AHA  ", "    B     B  EEEEE  B     B    ", "   AA     AA EEEEE AA     AA   ", "      HHH    EEEEE    HHH      ", "     HHHHH   EEEEE   HHHHH     ", "    H     H  EEEEE  H     H    ", "   HH     HH       HH     HH   ", "   HH     HH   J   HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   KK     KK       KK     KK   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HHH   HHH       HHH   HHH   ", "    HHHHHHH         HHHHHHH    ", "     HHHHH           HHHHH     ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle(" AEEEEEEEEEEE  E  EEEEEEEEEEEA ", " AAAAAAAAAAAA     AAAAAAAAAAAA ", " AAAA     AAA     AAA     AAAA ", "  AAAAAAAAAAA     AAAAAAAAAAA  ", "  AAABBBBBAAA     AAABBBBBAAA  ", "   AAA   AAA       AAA   AAA   ", "                               ", "      HHH             HHH      ", "     HHHHH           HHHHH     ", "    HH   HH         HH   HH    ", "    HH   HH    J    HH   HH    ", "    HH   HH    J    HH   HH    ", "    HH   HH    J    HH   HH    ", "    HH   HH         HH   HH    ", "    KK   KK         KK   KK    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HHHHHHH         HHHHHHH    ", "     HHHHH           HHHHH     ", "                               ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle("  EEEEEEEEEEEEEEEEEEEEEEEEEEE  ", "  AAAAAAAAAAA LLL AAAAAAAAAAA  ", "   GABBBBBAG  LLL  GABBBBBAG   ", "   GAHHHHHAG  LLL  GAHHHHHAG   ", "   GA     AG  LLL  GA     AG   ", "   GAAAAAAAG  LLL  GAAAAAAAG   ", "   G       G  LLL  G       G   ", "   I       I  LLL  I       I   ", "      HHH     LLL     HHH      ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     KKKKK    LLL    KKKKK     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH           HHHHH     ", "                               ", "                               ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle("  EEEEEEEEEE   E   EEEEEEEEEE  ", "   AAAAAAAAA LLBLL AAAAAAAAAE  ", "    A     A  LLFLL  A     A E  ", "    AAAAAAA  LLFLL  AAAAAAA    ", "    A     A  LLFLL  A     A    ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "              LLL              ", "                               ", "                               ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle("  EEEEEEEE E   E   E EEEEEEEE  ", "  EEEEEEEE  LLBBBLL  EEEEEEEE  ", "  EEEEEEEE  LL   LL  EEEEEEEE  ", "   EEEEEEE  LL   LL  EEEEEEE   ", "   EEEEEEE  LL   LL  EEEEEEE   ", "    EEEEEE  LL   LL  EEEEEE    ", "    EEEEEE  LL   LL  EEEEEE    ", "     EEEEE  LL   LL  EEEEE     ", "     EEEEE  LL   LL  EEEEE     ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL F LL            ", "             LLLLL             ", "              KKK              ", "                               ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle("bbE    E   E   E   E   E    EC ", "bbCCCCCCCE LLBBBBBLL ECCCCCCCC ", " bCCCCCCCE LL  N  LL ECCCCCCCC ", " bCCCCCCCE LL  N  LL ECCCCCCCC ", " bCCCCCCCE LL  N  LL ECCCCCCCC ", " CCCCCCCCE LL  N  LL ECCCCCCCC ", " bCCCCCCCE LL  I  LL ECCCCCCCC ", "     CCCCE LL  I  LL ECCCC     ", "     CCCCE LL  I  LL ECCCC     ", "     CCCC  LL     LL  CCCC     ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL  F  LL           ", "            LLKFKLL            ", "             KPOPK             ", "              POP              ", "              POP              ", "              POP              ", "              KKK              ", "                               ")
                    .aisle("bCEEEEEEEEEEEEEEEEEEEEEEEEEEEC ", "~CCCCCCCCE LBBBBBBBL ECCCCCCCC ", " D     FCE LF NRN FL ECF     D ", " D     FCE LF NRN FL ECF     D ", " D     FCE LF NRN FL ECF     D ", " C     FCE LF NRN FL ECF     C ", " bFFFC FCE LF IRI FL ECF CFFFC ", "   J C FCE LF IRI FL ECF C J   ", "   J C FCE LF IRI FL ECF C J   ", "   J CCFC  LF  F  FL  CFCC J   ", "   JJJJJJJJLF  F  FLJJJJJJJJ   ", "          JLF  F  FLJ          ", "          JLF  F  FJJ          ", "           LF  F  FL           ", "           LF  F  FL           ", "           LF  F  FL           ", "           LF  F  FL           ", "           LF  F  FL           ", "           LFFFFFFFL           ", "            LLKFKLL            ", "             KPPPK             ", "               P               ", "               P               ", "               P               ", "              KKK              ", "                               ")
                    .aisle("bbE    E   E   E   E   E    EC ", "bbCCCCCCCE LLBBBBBLL ECCCCCCCC ", " bCCCCCCCE LL  N  LL ECCCCCCCC ", " bCCCCCCCE LL  N  LL ECCCCCCCC ", " bCCCCCCCE LL  N  LL ECCCCCCCC ", " CCCCCCCCE LL  N  LL ECCCCCCCC ", " bCCCCCCCE LL  I  LL ECCCCCCCC ", "     CCCCE LL  I  LL ECCCC     ", "     CCCCE LL  I  LL ECCCC     ", "     CCCC  LL     LL  CCCC     ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL     LL           ", "           LL  F  LL           ", "            LLKFKLL            ", "             KPOPK             ", "              POP              ", "              POP              ", "              POP              ", "              KKK              ", "                               ")
                    .aisle("  EEEEEEEE E   E   E EEEEEEEE  ", "  EEEEEEEE  LLBBBLL  EEEEEEEE  ", "  EEEEEEEE  LL   LL  EEEEEEEE  ", "   EEEEEEE  LL   LL  EEEEEEE   ", "   EEEEEEE  LL   LL  EEEEEEE   ", "    EEEEEE  LL   LL  EEEEEE    ", "    EEEEEE  LL   LL  EEEEEE    ", "     EEEEE  LL   LL  EEEEE     ", "     EEEEE  LL   LL  EEEEE     ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL   LL            ", "            LL F LL            ", "             LLLLL             ", "              KKK              ", "                               ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle("  EEEEEEEEEE   E   EEEEEEEEEE  ", "  EAAAAAAAAA LLBLL AAAAAAAAA   ", "  E A     A  LLFLL  A     A    ", "    AAAAAAA  LLFLL  AAAAAAA    ", "    A     A  LLFLL  A     A    ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "             LLFLL             ", "              LLL              ", "                               ", "                               ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle("  EEEEEEEEEEEEEEEEEEEEEEEEEEE  ", "  AAAAAAAAAAA LLL AAAAAAAAAAA  ", "   GABBBBBAG  LLL  GABBBBBAG   ", "   GAHHHHHAG  LLL  GAHHHHHAG   ", "   GA     AG  LLL  GA     AG   ", "   GAAAAAAAG  LLL  GAAAAAAAG   ", "   G       G  LLL  G       G   ", "   I       I  LLL  I       I   ", "      HHH     LLL     HHH      ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     KKKKK    LLL    KKKKK     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH    LLL    HHHHH     ", "     HHHHH           HHHHH     ", "                               ", "                               ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle(" AEEEEEEEEEEE  E  EEEEEEEEEEEA ", " AAAAAAAAAAAA     AAAAAAAAAAAA ", " AAAA     AAA     AAA     AAAA ", "  AAAAAAAAAAA     AAAAAAAAAAA  ", "  AAABBBBBAAA     AAABBBBBAAA  ", "   AAA   AAA       AAA   AAA   ", "                               ", "      HHH             HHH      ", "     HHHHH           HHHHH     ", "    HH   HH         HH   HH    ", "    HH   HH    J    HH   HH    ", "    HH   HH    J    HH   HH    ", "    HH   HH    J    HH   HH    ", "    HH   HH         HH   HH    ", "    KK   KK         KK   KK    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HHHHHHH         HHHHHHH    ", "     HHHHH           HHHHH     ", "                               ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle(" BEEEEEEEEEEEE E EEEEEEEEEEEEB ", " AAAAAAAAAAAAEEEEEAAAAAAAAAAAA ", "   B       B EEEEE B       B   ", "  AHA     AHAEEEEEAHA     AHA  ", "    B     B  EEEEE  B     B    ", "   AA     AA EEEEE AA     AA   ", "      HHH    EEEEE    HHH      ", "     HHHHH   EEEEE   HHHHH     ", "    H     H  EEEEE  H     H    ", "   HH     HH       HH     HH   ", "   HH     HH   J   HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   KK     KK       KK     KK   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HHH   HHH       HHH   HHH   ", "    HHHHHHH         HHHHHHH    ", "     HHHHH           HHHHH     ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle(" BEEEEEEEEEEEE E EEEEEEEEEEEEB ", " AAAAAAAAAAAAECCCEAAAAAAAAAAAA ", "   B  L L  B ECCCE B  L L  B   ", "  AHA L L AHAECCCEAHA L L AHA  ", "    B L L B  ECCCE  B L L B    ", "   A  HHH  A ECCCE A  HHH  A   ", "     HHHHH   ECCCE   HHHHH     ", "    HHMMMHH  ECCCE  HHMMMHH    ", "   HH     HH ECCCE HH     HH   ", "   H       H  CCC  H       H   ", "   H       H   J   H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   K       K       K       K   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   HH     HH       HH     HH   ", "    HH   HH         HH   HH    ", "     HBBBH           HBBBH     ", "                               ", "               O               ", "                               ", "                               ")
                    .aisle(" BEEEEEEEEEEEEEEEEEEEEEEEEEEEB ", " AAAAAAAAAAAAECCCEAAAAAAAAAAAA ", "   B   N   B ECFCE B   N   B   ", "  AHA  N  AHAECFCEAHA  N  AHA  ", "    B  N  B  ECFCE  B  N  B    ", "   A  HHH  A ECFCE A  HHH  A   ", "     HHHHH   ECFCE   HHHHH     ", "    HHMMMHH  ECFCE  HHMMMHH    ", "   HH     HH ECFCE HH     HH   ", "   H       H  CFC  H       H   ", "   H       H   J   H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   K       K       K       K   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   HH     HH       HH     HH   ", "    HH   HH         HH   HH    ", "     HBFBH           HBFBH     ", "       O               O       ", "       OOOOOOOOOOOOOOOOO       ", "                               ", "                               ")
                    .aisle(" BEEEEEEEEEEEE E EEEEEEEEEEEEB ", " AAAAAAAAAAAAECCCEAAAAAAAAAAAA ", "   B  L L  B EC CE B  L L  B   ", "  AHA L L AHAEC CEAHA L L AHA  ", "    B L L B  EC CE  B L L B    ", "   A  HHH  A EC CE A  HHH  A   ", "     HHHHH   EC CE   HHHHH     ", "    HHMMMHH  EC CE  HHMMMHH    ", "   HH     HH EC CE HH     HH   ", "   H       H  CCC  H       H   ", "   H       H   J   H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   K       K       K       K   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   H       H       H       H   ", "   HH     HH       HH     HH   ", "    HH   HH         HH   HH    ", "     HBBBH           HBBBH     ", "                               ", "                               ", "                               ", "                               ")
                    .aisle(" BEEEEEEEEEEEE E EEEEEEEEEEEEB ", " AAAAAAAAAAAAECCCEAAAAAAAAAAAA ", "   B       B EC CE B       B   ", "  AHA     AHAEC CEAHA     AHA  ", "    B     B  EC CE  B     B    ", "   AA     AA EC CE AA     AA   ", "      HHH    ECCCE    HHH      ", "     HHHHH   ECCCE   HHHHH     ", "    H     H  ECCCE  H     H    ", "   HH     HH  CCC  HH     HH   ", "   HH     HH   J   HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   KK     KK       KK     KK   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HH     HH       HH     HH   ", "   HHH   HHH       HHH   HHH   ", "    HHHHHHH         HHHHHHH    ", "     HHHHH           HHHHH     ", "                               ", "                               ", "                               ", "                               ")
                    .aisle(" AEEEEEEEEEEEE E EEEEEEEEEEEEA ", " AAAAAAAAAAAAECCCEAAAAAAAAAAAA ", " AAAA     AAAEC CEAAA     AAAA ", "  AAAAAAAAAAAEC CEAAAAAAAAAAA  ", "  AAABBBBBAAAEC CEAAABBBBBAAA  ", "   AAA   AAA EC CE AAA   AAA   ", "             ECFCE             ", "      HHH             HHH      ", "     HHHHH           HHHHH     ", "    HH   HH         HH   HH    ", "    HH   HH    J    HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    KK   KK         KK   KK    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HH   HH         HH   HH    ", "    HHHHHHH         HHHHHHH    ", "     HHHHH           HHHHH     ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("  EEEEEEEEEEEE E EEEEEEEEEEEE  ", "  AAAAAAAAAAAECCCEAAAAAAAAAAA  ", "   GABBBBBAG EC CE GABBBBBAG   ", "   GAHHHHHAG EC CE GAHHHHHAG   ", "   GA     AG EC CE GA     AG   ", "   GAAAAAAAG  C C  GAAAAAAAG   ", "   G       G  CFC  G       G   ", "   I       I   J   I       I   ", "      HHH      J      HHH      ", "     HHHHH     J     HHHHH     ", "     HHHHH     J     HHHHH     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "     KKKKK           KKKKK     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "     HHHHH           HHHHH     ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("  EEEEEEEEEEEEEEEEEEEEEEEEEEE  ", "   AAAAAAAAA ECCCEEAAAAAAAAA   ", "    A     A  EC CEE A     A    ", "    AAAAAAA   C C   AAAAAAA    ", "    A     A   C C   A     A    ", "              C C              ", "              CFC              ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .aisle("    ABBBBBA   CCC   ABBBBBA    ", "    AAAAAAA   CCC   AAAAAAA    ", "    A     A   CDC   A     A    ", "              CDC              ", "              CDC              ", "              CCC              ", "              CCC              ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ", "                               ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTOBlocks.LAW_FILTER_CASING.get()))
                    .where('C', blocks(GTBlocks.CASING_PTFE_INERT.get()))
                    .where('D', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_HSSE_STURDY.get()))
                    .where('F', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('G', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('H', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('I', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('J', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('K', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('L', blocks(GTBlocks.PLASTCRETE.get()))
                    .where('M', blocks(Blocks.SPONGE))
                    .where('N', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('O', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('P', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('R', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('b', blocks(GTBlocks.CASING_PTFE_INERT.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_inert_ptfe"), GTCEu.id("block/multiblock/gcym/large_maceration_tower"))
            .register();

    public static final MultiblockMachineDefinition LIGHTNING_ROD = multiblock("lightning_rod", "引雷针", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.ARC_GENERATOR_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GCYMBlocks.CASING_NONCONDUCTING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle
                    .aisle
                    .aisle("       AAAAA                 ", "        ABA                  ", "         B                   ", "         B                   ", "         B                   ", "      CCCCCCC                ", "                             ", "      CCCCCCC                ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("   BBAAAAAAAAABB             ", "   BB   ABA   BB             ", "         B                   ", "         B                   ", "         B                   ", "    CCC  B  CCC              ", "         B                   ", "    CCC  C  CCC              ", "     B       B               ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("   BAAAAAAAAAAAB  DDDDDDDDDDD", "   BB         BB  DDDDDDDDDDD", "    B         B   DDDDDDDDDDD", "    B         B   DDDEEEEEDDD", "    B         B   DDDEEEEEDDD", "   CC   DDD   CC  DDDDDDDDDDD", "       DDDDD      DDDDDDDDDDD", "   CC  DDCDD  CC             ", "     B DDDDD B               ", "        DDD                  ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("   AAAAAAAAAAAAA  DDDDDDDDDDD", "     B       B    DAAAAAAAAAD", "     B       B    DF       FD", "     B       B    DF       FD", "     B DDDDD B    DF       FD", "   C BDD D DDB C  DAAAAAAAAAD", "     BDD   DDB    DDDDDDDDDDD", "   C BDD C DDB C             ", "   BBBDD   DDBBB             ", "      DD   DD                ", "       DDDDD                 ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("   AAAAAAAAAAAAA  DDDDDDDDDDD", "      GG   GG     DAAAAAAAAAD", "           GG     DF       FD", "       DDDDD      DF       FD", "      DD D DD     DF       FD", "  CC D       D CC DAAAAAAAAAD", "     D       D    DDDDDDDDDDD", "  CC D   C   D CC            ", "     D       D               ", "     D       D               ", "      DD   DD                ", "       DDDDD                 ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("  aAAAAAAAAAAAAAA DDDDDDDDDDD", "      GGHHHGG   CCCCCCCCCCCCD", "        DDDGG   C D        CD", "      DDGDGDD   C D        CD", "     DD     DD  C D        CD", "  C  D       D  C DCCCCCCCCCD", "    DD       DD   DCDDDDDDDDD", "  C DD   C   DD CCCCFFFFFFFFF", "    DD       DD              ", "     D       D               ", "     DD     DD               ", "      DDD DDD                ", "        DDD                  ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("aaAAAAAAAAAAAAAAAADDDDDDDDDDD", "aaaa   HHHHH   AAADIIIIIIIIID", "       DDDDD      D         D", "      DGGGGGD     D         E", "     D       D    D         E", "  C D         D C DIIIIIIIIID", "    D         D   DDDIDIDIDID", "  C D    C    D C   F       F", "    D         D              ", "    D         D              ", "     D       D               ", "      DD   DD                ", "       DDDDD                 ", "        JJJ                  ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "         J                   ", "         F                   ", "         F                   ", "         F                   ", "         F                   ", "         J                   ", "                             ", "                             ", "                             ", "                             ", "         J                   ", "         F                   ", "         F                   ", "         F                   ", "         F                   ", "         J                   ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("aBAAAAAAAAAAAAAAABDDDDDDDDDDD", "~BBB   HHHHH   BBBDIIIIIIIIID", "  BB   DDDDD   BB D         D", "  BB  DDGGGDD  BB D         E", "  BB DD  J  DD BB D         E", "  CBDD   J   DDBC DIIIIIIIIID", "   BD    J    DB  DDDIDIDIDID", "  CCCCCCCJCCCCCCC   F       F", "    D    J    D              ", "    D    J    D              ", "     D   J   D               ", "      D  J  D                ", "       DDJDD                 ", "        JJJ                  ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "        JJJ                  ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "        JJJ                  ", "        FJF                  ", "        FJF                  ", "        FJF                  ", "        FJF                  ", "        JJJ                  ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "        JJJ                  ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         J                   ", "         F                   ", "         F                   ", "         F                   ")
                    .aisle("aaAAAAAAAAAAAAAAAADDDDDDDDDDD", "aaaa   HHHHH   AAADIIIIIIIIID", "       DDDDD      D         D", "      DGGGGGD     D         E", "     D       D    D         E", "  C D         D C DIIIIIIIIID", "    D         D   DDDIDIDIDID", "  C D    C    D C   F       F", "    D         D              ", "    D         D              ", "     D       D               ", "      DD   DD                ", "       DDDDD                 ", "        JJJ                  ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "         J                   ", "         F                   ", "         F                   ", "         F                   ", "         F                   ", "         J                   ", "                             ", "                             ", "                             ", "                             ", "         J                   ", "         F                   ", "         F                   ", "         F                   ", "         F                   ", "         J                   ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("  aAAAAAAAAAAAAAA DDDDDDDDDDD", "      GGHHHGG   CCCCCCCCCCCCD", "      GGDDDGG   C D        CD", "      DDGDGDD   C D        CD", "     DD     DD  C D        CD", "  C  D       D  C DCCCCCCCCCD", "    DD       DD   DCDDDDDDDDD", "  C DD   C   DD CCCCFFFFFFFFF", "    DD       DD              ", "     D       D               ", "     DD     DD               ", "      DDD DDD                ", "        DDD                  ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("   AAAAAAAAAAAAA  DDDDDDDDDDD", "      GG   GG     DAAAAAAAAAD", "      GG   GG     DF       FD", "       DDDDD      DF       FD", "      DD D DD     DF       FD", "  CC D       D CC DAAAAAAAAAD", "     D       D    DDDDDDDDDDD", "  CC D   C   D CC            ", "     D       D               ", "     D       D               ", "      DD   DD                ", "       DDDDD                 ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("   AAAAAAAAAAAAA  DDDDDDDDDDD", "     B       B    DAAAAAAAAAD", "     B       B    DF       FD", "     B       B    DF       FD", "     B DDDDD B    DF       FD", "   C BDD D DDB C  DAAAAAAAAAD", "     BDD   DDB    DDDDDDDDDDD", "   C BDD C DDB C             ", "   BBBDD   DDBBB             ", "      DD   DD                ", "       DDDDD                 ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("   BAAAAAAAAAAAB  DDDDDDDDDDD", "   BB         BB  DDDDDDDDDDD", "    B         B   DDDDDDDDDDD", "    B         B   DDDEEEEEDDD", "    B         B   DDDEEEEEDDD", "   CC   DDD   CC  DDDDDDDDDDD", "       DDDDD      DDDDDDDDDDD", "   CC  DDCDD  CC             ", "     B DDDDD B               ", "        DDD                  ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("   BBAAAAAAAAABB             ", "   BB   ABA   BB             ", "         B                   ", "         B                   ", "         B                   ", "    CCC  B  CCC              ", "         B                   ", "    CCC  C  CCC              ", "     B       B               ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle("       AAAAA                 ", "        ABA                  ", "         B                   ", "         B                   ", "         B                   ", "      CCCCCCC                ", "                             ", "      CCCCCCC                ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ", "                             ")
                    .aisle
                    .aisle
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('B', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('C', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('D', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get()))
                    .where('E', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Duranium)))
                    .where('G', blocks(GTBlocks.BATTERY_EMPTY_TIER_III.get()))
                    .where('H', blocks(GTOBlocks.TRANSCENDENTALLY_AMPLIFIED_MAGNETIC_CONFINEMENT_CASING.get()))
                    .where('I', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('J', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('a', blocks(GCYMBlocks.CASING_NONCONDUCTING.get())
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .onWorking(machine -> {
                if (machine.self().getOffsetTimer() % 20 == 0 && machine.self().getLevel() instanceof ServerLevel serverLevel) {
                    LightningBolt entityToSpawn = EntityType.LIGHTNING_BOLT.create(serverLevel);
                    if (entityToSpawn != null) {
                        entityToSpawn.setPos(MachineUtils.getOffsetPos(9, 50, machine.self().getFrontFacing(), machine.self().getPos()).getCenter());
                        entityToSpawn.setVisualOnly(true);
                        serverLevel.addFreshEntity(entityToSpawn);
                    }
                }
                return true;
            })
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/nonconducting_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition MAGNETIC_ENERGY_REACTION_FURNACE = multiblock("magnetic_energy_reaction_furnace", "磁能反应炉", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .tooltipsText("电容器满负荷运作中", "Capacitor at full charge.")
            .recipeTypes(GTRecipeTypes.ARC_FURNACE_RECIPES)
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GCYMBlocks.CASING_NONCONDUCTING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("A             A", "A             A", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "               ", "               ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", " DDDEBEEEBEDDD ", " DDDEBEEEBEDDD ", "  DDDDDDDDDDD  ", "  DDDDDDDDDDD  ", "   DDDDDDDDD   ", "   DDDDDDDDD   ", "   DDDDDDDDD   ", "   DDBDDDBDD   ", "   DDBDDDBDD   ", "   DDDDDDDDD   ", "   DDDDDDDDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", "FD   B   B   DF", "FD  GBG GBG  DF", " FD         DF ", " FDDH  H  HDDF ", "   D       D   ", "   DH  H  HD   ", "   D       D   ", "   DGBG GBGD   ", "   D B   B D   ", "   D       D   ", "   DDHEDEHDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", "DD   B   B   DD", "DD  GBG GBG  DD", " DD         DD ", " DDDH  H  HDDD ", "  DD       DD  ", "  DDH  H  HDD  ", "  DD       DD  ", "  DDGBG GBGDD  ", "  DD B   B DD  ", "  DD       DD  ", "   DDHEDEHDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", "FD   B   B   DF", "FD  GBG GBG  DF", " FD         DF ", " FDDH  H  HDDF ", "   D       D   ", "   DH  H  HD   ", "   D       D   ", "   DGBG GBGD   ", "   D B   B D   ", "   D       D   ", "   DDHEDEHDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", "DD   B   B   DD", "DD  GBG GBG  DD", " DD         DD ", " DDDH  H  HDDD ", "  DD       DD  ", "  DDH  H  HDD  ", "  DD       DD  ", "  DDGBG GBGDD  ", "  DD B   B DD  ", "  DD       DD  ", "   DDHEDEHDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", "FD   B   B   DF", "FD  GBG GBG  DF", " FD         DF ", " FDDH  H  HDDF ", "   D       D   ", "   DH  H  HD   ", "   D       D   ", "   DGBG GBGD   ", "   D B   B D   ", "   D       D   ", "   DDHEDEHDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", " DDDEBEEEBEDDD ", " DDDEBEEEBEDDD ", "  DDDDDDDDDDD  ", "  DDDDDDDDDDD  ", "   DDDDDDDDD   ", "   DDDIIIDDD   ", "   DDDIJIDDD   ", "   DDBIIIBDD   ", "   DDBDDDBDD   ", "   DDDDDDDDD   ", "   DDDDDDDDD   ", "               ")
                    .aisle("AKK         KKA", "AKK         KKA", " KK  B   B  KK ", "     B   B     ", "     B   B     ", "     BI IB     ", "     B   B     ", "    IB   BI    ", "     B J B     ", "    IB   BI    ", "     B   B     ", "      I I      ", "               ", "               ")
                    .aisle("               ", "               ", "               ", "               ", "      I I      ", "      I I      ", "               ", "   II     II   ", "       J       ", "   II     II   ", "               ", "      I I      ", "      I I      ", "               ")
                    .aisle(" LLLLLLLLLLLLL ", "               ", "               ", "      I I      ", "      I I      ", "               ", "               ", "  II       II  ", "       J       ", "  II       II  ", "               ", "               ", "      I I      ", "      I I      ")
                    .aisle(" LMMMMMMMMMMML ", "  MMMMMMMMMMM  ", "               ", "      I I      ", "               ", "               ", "               ", "  I         I  ", "       J       ", "  I         I  ", "               ", "               ", "               ", "      I I      ")
                    .aisle(" LMEEEEEEEEEML ", "  a         a  ", "               ", "      I I      ", "               ", "               ", "               ", "  I         I  ", "       J       ", "  I         I  ", "               ", "               ", "               ", "      I I      ")
                    .aisle(" LMNKKKKKKKNML ", "  a         a  ", "               ", "      I I      ", "               ", "               ", "      OOO      ", "  I  OOOOO  I  ", "     OOJOO     ", "  I  OOOOO  I  ", "      OOO      ", "               ", "               ", "      I I      ")
                    .aisle(" LMEEEEEEEEEML ", "  a         a  ", "               ", "      I I      ", "      IOI      ", "      OOO      ", "     OOOOO     ", "  IIOOOOOOOII  ", "    OOOJOOO    ", "  IIOOOOOOOII  ", "     OOOOO     ", "      OOO      ", "      IOI      ", "      I I      ")
                    .aisle(" aMNMMMMMMMNML ", " aM         a  ", " aa            ", "               ", "     OOOOO     ", "     OOOOO     ", "    OO   OO    ", "    OO   OO    ", "    OO J OO    ", "    OO   OO    ", "    OO   OO    ", "     OOOOO     ", "     OOOOO     ", "               ")
                    .aisle(" aMEEEEEEEEEML ", " ~M         a  ", " aa            ", "               ", "     OOOOO     ", "     OOOOO     ", "    OO   OO    ", "    OO   OO    ", "    OO J OO    ", "    OO   OO    ", "    OO   OO    ", "     OOOOO     ", "     OOOOO     ", "               ")
                    .aisle(" aMNMMMMMMMNML ", " aM         a  ", " aa            ", "               ", "     OOOOO     ", "     OOOOO     ", "    OO   OO    ", "    OO   OO    ", "    OO J OO    ", "    OO   OO    ", "    OO   OO    ", "     OOOOO     ", "     OOOOO     ", "               ")
                    .aisle(" LMEEEEEEEEEML ", "  a         a  ", "               ", "      I I      ", "      IOI      ", "      OOO      ", "     OOOOO     ", "  IIOOOOOOOII  ", "    OOOJOOO    ", "  IIOOOOOOOII  ", "     OOOOO     ", "      OOO      ", "      IOI      ", "      I I      ")
                    .aisle(" LMNKKKKKKKNML ", "  a         a  ", "               ", "      I I      ", "               ", "               ", "      OOO      ", "  I  OOOOO  I  ", "     OOJOO     ", "  I  OOOOO  I  ", "      OOO      ", "               ", "               ", "      I I      ")
                    .aisle(" LMEEEEEEEEEML ", "  a         a  ", "               ", "      I I      ", "               ", "               ", "               ", "  I         I  ", "       J       ", "  I         I  ", "               ", "               ", "               ", "      I I      ")
                    .aisle(" LMMMMMMMMMMML ", "  MMMMMMMMMMM  ", "               ", "      I I      ", "               ", "               ", "               ", "  I         I  ", "       J       ", "  I         I  ", "               ", "               ", "               ", "      I I      ")
                    .aisle(" LLLLLLLLLLLLL ", "               ", "               ", "      I I      ", "      I I      ", "               ", "               ", "  II       II  ", "       J       ", "  II       II  ", "               ", "               ", "      I I      ", "      I I      ")
                    .aisle("               ", "               ", "               ", "               ", "      I I      ", "      I I      ", "               ", "   II     II   ", "       J       ", "   II     II   ", "               ", "      I I      ", "      I I      ", "               ")
                    .aisle("AKK         KKA", "AKK         KKA", " KK  B   B  KK ", "     B   B     ", "     B   B     ", "     BI IB     ", "     B   B     ", "    IB   BI    ", "     B J B     ", "    IB   BI    ", "     B   B     ", "      I I      ", "               ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", " DDDEBEEEBEDDD ", " DDDEBEEEBEDDD ", "  DDDDDDDDDDD  ", "  DDDDDDDDDDD  ", "   DDDDDDDDD   ", "   DDDIIIDDD   ", "   DDDIJIDDD   ", "   DDBIIIBDD   ", "   DDBDDDBDD   ", "   DDDDDDDDD   ", "   DDDDDDDDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", "FD   B   B   DF", "FD  GBG GBG  DF", " FD         DF ", " FDDH  H  HDDF ", "   D       D   ", "   DH  H  HD   ", "   D       D   ", "   DGBG GBGD   ", "   D B   B D   ", "   D       D   ", "   DDHEDEHDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", "DD   B   B   DD", "DD  GBG GBG  DD", " DD         DD ", " DDDH  H  HDDD ", "  DD       DD  ", "  DDH  H  HDD  ", "  DD       DD  ", "  DDGBG GBGDD  ", "  DD B   B DD  ", "  DD       DD  ", "   DDHEDEHDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", "FD   B   B   DF", "FD  GBG GBG  DF", " FD         DF ", " FDDH  H  HDDF ", "   D       D   ", "   DH  H  HD   ", "   D       D   ", "   DGBG GBGD   ", "   D B   B D   ", "   D       D   ", "   DDHEDEHDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", "DD   B   B   DD", "DD  GBG GBG  DD", " DD         DD ", " DDDH  H  HDDD ", "  DD       DD  ", "  DDH  H  HDD  ", "  DD       DD  ", "  DDGBG GBGDD  ", "  DD B   B DD  ", "  DD       DD  ", "   DDHEDEHDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", "FD   B   B   DF", "FD  GBG GBG  DF", " FD         DF ", " FDDH  H  HDDF ", "   D       D   ", "   DH  H  HD   ", "   D       D   ", "   DGBG GBGD   ", "   D B   B D   ", "   D       D   ", "   DDHEDEHDD   ", "               ")
                    .aisle("CCCCCCCCCCCCCCC", "ADDDDDDDDDDDDDA", " DDDEBEEEBEDDD ", " DDDEBEEEBEDDD ", "  DDDDDDDDDDD  ", "  DDDDDDDDDDD  ", "   DDDDDDDDD   ", "   DDDDDDDDD   ", "   DDDDDDDDD   ", "   DDBDDDBDD   ", "   DDBDDDBDD   ", "   DDDDDDDDD   ", "   DDDDDDDDD   ", "               ")
                    .aisle("A             A", "A             A", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "     B   B     ", "               ", "               ", "               ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('B', heatingCoils())
                    .where('C', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('D', blocks(GTOBlocks.LAFIUM_MECHANICAL_CASING.get()))
                    .where('E', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('F', blocks(GTOBlocks.MAGTECH_CASING.get()))
                    .where('G', blocks(GTOBlocks.TRANSCENDENTALLY_AMPLIFIED_MAGNETIC_CONFINEMENT_CASING.get()))
                    .where('H', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.NeodymiumMagnetic)))
                    .where('I', blocks(GTBlocks.CASING_PALLADIUM_SUBSTATION.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('K', blocks(GTBlocks.BATTERY_EMPTY_TIER_III.get()))
                    .where('L', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where('M', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('N', blocks(GTOBlocks.RESTRAINT_DEVICE.get()))
                    .where('O', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('a', blocks(GCYMBlocks.CASING_NONCONDUCTING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/gcym/nonconducting_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition HIGH_ENERGY_LASER_LATHE = multiblock("high_energy_laser_lathe", "高能激光车床", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.LATHE_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.MOLECULAR_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("AAAAAAAAAAAAAAAAA", "AA   AAAAAAA   AA", "AA  AABAAABAA  AA", "AA AA BAAAB AA AA", "AAAA  BAAAB  AAAA", "AAA   BAAAB   AAA", "AABBBBBAAABBBBBAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AABBBBBAAABBBBBAA", " AA   BAAAB   AA ", "  AA  BAAAB  AA  ", "   AA BAAAB AA   ", "    AABAAABAA    ", "     AAAAAAA     ")
                    .aisle("AAAAAAAAAAAAAAAAA", "AA   AAAAAAA   AA", "AA  AACAAACAA  AA", "AA AACCAAACCAA AA", "AAAACCCAAACCCAAAA", "AAACCCCAAACCCCAAA", "AACCCCCAAACCCCCAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AACCCCCAAACCCCCAA", " AACCCCAAACCCCAA ", "  AACCCAAACCCAA  ", "   AACCAAACCAA   ", "    AABAAABAA    ", "     AAAAAAA     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    DDDDDDD    A", "   DDDEEEEEDDD   ", "   DDEEEEEEEDD   ", "  DDEEEEFEEEEDD  ", " DDEEGGGEGGGEEDD ", " DEEEGGGEGGGEEED ", " DEEEGGGEGGGEEED ", " DEEFEEEHEEEFEED ", " DEEEGGGEGGGEEED ", " DEEEGGGEGGGEEED ", " DDEEGGGEGGGEEDD ", "  DDEEEEFEEEEDD  ", "   DDEEEEEEEDD   ", "   DDDEEEEEDDD   ", "     DDDDDDD     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   LII     IIL   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   LII     IIL   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   LII     IIL   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   LII     IIL   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   LII     IIL   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   LII     IIL   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   M   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " II            I ", " II            I ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAAAAAAAAAAAAAAAA", "A    IIDDDII    A", "   LII GGG IIL   ", "   II  GJG  II   ", "  II   GKG   II  ", " EI           IE ", " E             E ", " DGGG       GGGD ", " aGJK       KJGD ", " DGGG       GGGD ", " EI            E ", " EI           IE ", "  II   GKG   II  ", "   II  GJG  II   ", "   LII GGG IIL   ", "     IIDDDII     ")
                    .aisle("AAAAAAAAAAAAAAAAA", "A    EEDDDEE    A", "   LEE NMN EEL   ", "   EE  MJM  EE   ", "  EE   NON   EE  ", " EE     O     EE ", " E             E ", " DNMN       NMND ", " ~MJOO     OOJMD ", " DNMN       NMND ", " E             E ", " EE     O     EE ", "  EE   NON   EE  ", "   EE  MJM  EE   ", "   LEE NMN EEL   ", "     EEDDDEE     ")
                    .aisle("AAAAAAAAAAAAAAAAA", "A    IIDDDII    A", "   LII GGG IIL   ", "   II  GJG  II   ", "  II   GKG   II  ", " EI           IE ", " E             E ", " DGGG       GGGD ", " aGJK       KJGD ", " DGGG       GGGD ", " E            IE ", " EI           IE ", "  II   GKG   II  ", "   II  GJG  II   ", "   LII GGG IIL   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   M   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   LII     IIL   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   LII     IIL   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   LII     IIL   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   LII     IIL   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   LII     IIL   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   LII     IIL   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    IIDDDII    A", "   DII     IID   ", "   II   J   II   ", "  II    K    II  ", " II           II ", " I             I ", " I             I ", " a JK   H   KJ D ", " I            II ", " I            II ", " II           II ", "  II    K    II  ", "   II   J   II   ", "   DII     IID   ", "     IIDDDII     ")
                    .aisle("AAABBBAAAAABBBAAA", "A    DDDDDDD    A", "   DDDEEEEEDDD   ", "   DDEEEEEEEDD   ", "  DDEEEEFEEEEDD  ", " DDEEGGGEGGGEEDD ", " DEEEGGGEGGGEEED ", " DEEEGGGEGGGEEED ", " DEEFEEEHEEEFEED ", " DEEEGGGEGGGEEED ", " DEEEGGGEGGGEEED ", " DDEEGGGEGGGEEDD ", "  DDEEEEFEEEEDD  ", "   DDEEEEEEEDD   ", "   DDDEEEEEDDD   ", "     DDDDDDD     ")
                    .aisle("AAAAAAAAAAAAAAAAA", "AA   AAAAAAA   AA", "AA  AACAAACAA  AA", "AA AACCAAACCAA AA", "AAAACCCAAACCCAAAA", "AAACCCCAAACCCCAAA", "AACCCCCAAACCCCCAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AACCCCCAAACCCCCAA", " AACCCCAAACCCCAA ", "  AACCCAAACCCAA  ", "   AACCAAACCAA   ", "    AABAAABAA    ", "     AAAAAAA     ")
                    .aisle("AAAAAAAAAAAAAAAAA", "AA   AAAAAAA   AA", "AA  AABAAABAA  AA", "AA AA BAAAB AA AA", "AAAA  BAAAB  AAAA", "AAA   BAAAB   AAA", "AABBBBBAAABBBBBAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAA", "AABBBBBAAABBBBBAA", " AA   BAAAB   AA ", "  AA  BAAAB  AA  ", "   AA BAAAB AA   ", "    AABAAABAA    ", "     AAAAAAA     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('B', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('C', blocks(GCYMBlocks.ELECTROLYTIC_CELL.get()))
                    .where('D', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('E', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('F', blocks(GTOBlocks.LASER_COOLING_CASING.get()))
                    .where('G', blocks(GCYMBlocks.CASING_LASER_SAFE_ENGRAVING.get()))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('I', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('J', blocks(GTOBlocks.LASER_CASING.get()))
                    .where('K', blocks(GTOBlocks.ELECTRON_PERMEABLE_AMPROSIUM_COATED_GLASS.get()))
                    .where('L', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('M', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('N', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('O', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Ruby)))
                    .where('a', blocks(GTOBlocks.MOLECULAR_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/molecular_casing"), GTCEu.id("block/multiblock/gcym/large_cutter"))
            .register();

    public static final MultiblockMachineDefinition NEUTRONIUM_WIRE_CUTTING = multiblock("neutronium_wire_cutting", "中子丝线切割", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.CUTTER_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", "     QQQQQ     ", "     QQQQQ     ", "     QQQQQ     ", "     QQQQQ     ", "     QQQQQ     ", "     QQQQQ     ", "     QQQQQ     ", "     QQQQQ     ", "     QQQQQ     ", "     QQQQQ     ", "     QQQQQ     ", "     QQQQQ     ")
                    .aisle("AAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAA", "     QQQQQ     ", "     Q   Q     ", "     Q   Q     ", "     Q   Q     ", "     Q   Q     ", "     Q   Q     ", "     Q   Q     ", "     Q   Q     ", "     Q   Q     ", "     Q   Q     ", "     Q   Q     ", "     QQQQQ     ")
                    .aisle("AAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBB", "aSG  QQQQQ  GS ", "aSG  QQQQQ  GS ", "aSG  QQQQQ  GS ", "aSG  QQQQQ  GS ", " SG  QQQQQ  GS ", " SG  QQQQQ  GS ", " SG  QQQQQ  GS ", " SG  QQQQQ  GS ", " SG  QQQQQ  GS ", "  G  QQQQQ  G  ", "     Q   Q     ", "     QQQQQ     ")
                    .aisle("AAAAAAAAAAAAAAA", "BBBBBBBBBBBBBBB", "aBBBBBBBBBBBBB ", "~BB         BB ", "aBBBBBBBBBBBBB ", "aBB         BB ", " BBBBBBBBBBBBB ", " BB         BB ", " BBBBBBBBBBBBB ", " BB         BB ", " BBBBBBBBBBBBB ", "  GQQQQQQQQQG  ", "   QQQ   QQQ   ", "   QQQQQQQQQ   ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", "aBBKKKKKKKKKBB ", "aBBKKKKKKKKKBB ", "aBBKKKKKKKKKBB ", "aBBKKKKKKKKKBB ", " BBKKKKKKKKKBB ", " BBKKKKKKKKKBB ", " BBKKKKKKKKKBB ", " BBKKKKKKKKKBB ", " BBBBBBBBBBBBB ", "  GQQQQQQQQQG  ", "   Q       Q   ", "   QQQQQQQQQ   ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBHO     OHBB ", "  BLO     OLB  ", "  BLMNNNNNMLB  ", "  BLO     OLB  ", "  BLMNNNNNMLB  ", "  BLO     OLB  ", "  BLMNNNNNMLB  ", "  BHO J J OHB  ", "  BBBBBBBBBBB  ", "  GQQQQQQQQQG  ", "   QQPQQQPQQ   ", "   QQQQQQQQQ   ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH  J J  HK  ", "  BBBBBBBBBBB  ", "  GDDDDDDDDDG  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH  J J  HK  ", "  BBBBBBBBBBB  ", "  GDFFFFFFDDG  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BKH  J J  HKB ", " BBBBBBBBBBBBB ", "  GDFFFFFFDDG  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBHOAAAAAOHBB ", "  KLO     OLK  ", "  KLMNNNNNMLK  ", "  KLO     OLK  ", "  KLMNNNNNMLK  ", "  KLO     OLK  ", "  KLMNNNNNMLK  ", "  KHO J J OHK  ", "  BBBBBBBBBBB  ", "  GDDDDDDDDDG  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH PJ JP HK  ", "  BBBPBBBPBBB  ", "  G  P   P  G  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BKH  J J  HKB ", " BBBBBBBBBBBBB ", "  G         G  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH  J J  HK  ", "  BBBBBBBBBBB  ", "  G         G  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH  J J  HK  ", "  BBBBBBBBBBB  ", "  GDDDDDDDDDG  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH  J J  HK  ", "  BBBBBBBBBBB  ", "  GDFFFFFFDDG  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH  J J  HK  ", "  BBBBBBBBBBB  ", "  GDFFFFFFDDG  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH  J J  HK  ", "  BBBBBBBBBBB  ", "  GDDDDDDDDDG  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH PJ JP HK  ", "  BBBPBBBPBBB  ", "  G  P   P  G  ", "     P   P     ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BKH  J J  HKB ", " BBBBBBBBBBBBB ", "  G         G  ", "               ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBHLLLLLLLHBB ", "  K   M M   K  ", "  K   N N   K  ", "  K   N N   K  ", "  K   N N   K  ", "  K   N N   K  ", "  K OOMOMOO K  ", "  KHLLLLLLLHK  ", "  BBBBBBBBBBB  ", "  G         G  ", "               ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH  J J  HK  ", "  BBBBBBBBBBB  ", "  GDDDDDDDDDG  ", "               ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BK         KB ", " BKH  J J  HKB ", " BBBBBBBBBBBBB ", "  GDFFFFFFDDG  ", "               ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH AAAAA HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH  J J  HK  ", "  BBBBBBBBBBB  ", "  GDFFFFFFDDG  ", "               ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBH       HBB ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  K         K  ", "  KH  J J  HK  ", "  BBBBBBBBBBB  ", "  GDDDDDDDDDG  ", "               ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " BBHBBBBBBBHBB ", " BBBBBBBBBBBBB ", " BBBBBBBBBBBBB ", " BBBBBBBBBBBBB ", " BBBBBBBBBBBBB ", " BBBBBBBBBBBBB ", " BBBBBBBBBBBBB ", " BBHBBBBBBBHBB ", " BBBBBBBBBBBBB ", "  G         G  ", "  G         G  ", "               ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " C H       H C ", " CJJJJJJJJJJJC ", " C           C ", " C           C ", " C           C ", " C           C ", " CJJJJJJJJJJJC ", " C H       H C ", " CCCCCCCCCCCCC ", " CFFFFFFFFFFFC ", " CCCCCCCCCCCCC ", "  G         G  ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", "GC H       H CG", "GC           CG", "GC           CG", "GC           CG", "GC           CG", "GC           CG", "GC           CG", "GC H       H CG", "GCCCCCCCCCCCCCG", "GC           CG", "GCIIIIIIIIIIICG", " GIIIIIIIIIIIG ")
                    .aisle("               ", "BBBBBBBBBBBBBBB", " C H       H C ", " C           C ", " C           C ", " C           C ", " F           F ", " F           F ", " F           F ", " C H       H C ", " CCCCCCCCCCCCC ", " C           C ", " CIIIIIIIIIIIC ", "  IIIIIIIIIII  ")
                    .aisle("AAA         AAA", "BBBBBBBBBBBBBBB", " C H       H C ", " CJJJJJJJJJJJC ", " C           C ", " C           C ", " F           F ", " F           F ", " FJJJJJJJJJJJF ", " C H       H C ", " CCCCCCCCCCCCC ", " C           C ", " CIIIIIIIIIIIC ", "  IIIIIIIIIII  ")
                    .aisle("AAA         AAA", "BBBBBBBBBBBBBBB", "GC H       H CG", "GC H       H CG", "GC H       H CG", "GC H       H CG", "GC H       H CG", "GC H       H CG", "GC H       H CG", "GC H       H CG", "GCCCCCCCCCCCCCG", "GC           CG", "GCIIIIIIIIIIICG", " GIIIIIIIIIIIG ")
                    .aisle("AAA         AAA", "BBBBBBBBBBBBBBB", " CCCCCCCCCCCCC ", " CCCCCCCCCCCCC ", " CCDDDDCDDDDCC ", " CCDDDDCDDDDCC ", " CCEEEECEEEECC ", " CCDDDDCDDDDCC ", " CCDDDDCDDDDCC ", " CCCCCCCCCCCCC ", " CCCCCCCCCCCCC ", " CFFFFFFFFFFFC ", " CCCCCCCCCCCCC ", "               ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('B', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('E', blocks(GTBlocks.FUSION_GLASS.get()))
                    .where('F', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('I', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('K', blocks(GTBlocks.CASING_TEMPERED_GLASS.get()))
                    .where('L', blocks(GTOBlocks.AMPROSIUM_CASING.get()))
                    .where('M', blocks(GTOBlocks.EXTREME_DENSITY_CASING.get()))
                    .where('N', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where('O', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('P', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('Q', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('S', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('a', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/gcym/large_cutter"))
            .register();

    public static final MultiblockMachineDefinition NANO_PHAGOCYTOSIS_PLANT = multiblock("nano_phagocytosis_plant", "纳米吞噬厂", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .tooltipsText("使用纳米蜂群无情的撕碎一切", "Use nanitess to mercilessly tear everything apart.")
            .recipeTypes(GTRecipeTypes.MACERATOR_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle(" EEEEEEEEEEEEEEEEEEE ", "  E E E E E E E E E  ", "  E E E E E E E E E  ", "  E E E E E E E E E  ", "  E E E E E E E E E  ", "  E E E E E E E E E  ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "OOOOOOOOOOOOOOOOOOOOO", "OOOBBBBBBZZZBBBBBBOOO", "OOOBBBBBBZZZBBBBBBOOO", " OOBBBBBBZZZBBBBBBOO ", "  EEEEEEEEEEEEEEEEE  ", "   E  E   E   E  E   ", "                     ", "         X X         ", "         X X         ", "       XXXXXXX       ", "         X X         ", "       XXXXXXX       ", "         X X         ", "         X X         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "OO                 OO", "OO                 OO", "OO                 OO", " O                 O ", " OOOOOOOOOOOOOOOOOOO ", "   EHHE   E   EHHE   ", "         XYX         ", "       YYYYYYY       ", "       YYYYYYY       ", "      XYYFFFYYX      ", "      YYYFFFYYY      ", "      XYYFFFYYX      ", "       YYYYYYY       ", "       YYYYYYY       ", "         XYX         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "OO      WLLLW      OO", "OO      WLLLW      OO", "OO      WLLLW      OO", " O  WWWWWLLLWWWWW  O ", " OOOOOOOOOOOOOOOOOOO ", "   HHHHH XYX HHHHH   ", "   HHHH YYYYY HHHH   ", "       Y     Y       ", "      Y J   J Y      ", "     XY       YX     ", "     YY   J   YY     ", "     XY       YX     ", "      Y J   J Y      ", "       Y     Y       ", "        YYYYY        ", "         XYX         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "OOOO             OOO ", "OOOO             OOO ", "OOOO             OOO ", " OOOW           WOOO ", "   OOOOOOOOOOOOOOO   ", "   HHHHHQQQQQHHHHH   ", "   HHHHQQ M QQHHHH   ", "   HHHQQ     QQHHH   ", "     QQ J   J QQ     ", "     Q   UUU   Q     ", "     Q   UJU   Q     ", "     Q   UUU   Q     ", "     QQ J   J QQ     ", "      QQ     QQ      ", "       QQ M QQ       ", "        QQQQQ        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "AAAO             OAAA", "AAAO             OAAA", " AAO             OAA ", "   OW           WO   ", "   OWOOOOOOOOOOOWO   ", "   HW  HQQQQQH  WH   ", "   HW HQQ M QQH WH   ", "   HWHQQ     QQHWH   ", "    WQQ J   J QQW    ", "    WQ         QW    ", "    WV    J    VW    ", "    WQ         QW    ", "    WQQ J   J QQW    ", "    WWWW     WWWW    ", "       QQ M QQ       ", "        QQQQQ        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "A RO             OR A", "APPPPPPPPPPPPPPPPPPPA", " PAO             OAP ", " PPPPPPPPLLLPPPPPPPP ", "   OOOOOOOOOOOOOOO   ", "   H   HQQQQQH   H   ", "   H  HQQ M QQH  H   ", "   HHHQQ     QQHHH   ", "    HQQ J   J QQH    ", "     Q         Q     ", "     V    J    V     ", "     Q         Q     ", "     QQ J   J QQ     ", "      QQ     QQ      ", "       QQ M QQ       ", "        QQQQQ        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "A RO             OR A", "A  O      P      O  A", "AAAO             OAAA", "  SOTTTTTTTTTTTTTOS  ", "  SOOOOOOOOOOOOOOOS  ", "   H   HQQQQQH   H   ", "   H  HQQ M QQH  H   ", "   HHHQQ     QQHHH   ", "    HQQ J   J QQH    ", "     Q         Q     ", "     V    J    V     ", "     Q         Q     ", "     QQ J   J QQ     ", "      QQ     QQ      ", "       QQ M QQ       ", "        QQQQQ        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "A RO             OR A", "A  O      P      O  A", "AAAO             OAAA", "   V             V   ", "   OOOOOOOOOOOOOOO   ", "   H   HQQQQQH   H   ", "   H  HQQ M QQH  H   ", "   HHHQQ     QQHHH   ", "    HQQ J   J QQH    ", "     Q         Q     ", "     V    J    V     ", "     Q         Q     ", "     QQ J   J QQ     ", "      QQ     QQ      ", "       QQ M QQ       ", "        QQQQQ        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "A RO             OR A", "A  O      P      O  A", "AAAO             OAAA", "  SOTTTTTTTTTTTTTOS  ", "  SOOOOOOOOOOOOOOOS  ", "   H   HQQQQQH   H   ", "   H  HQQ M QQH  H   ", "   HHHQQ     QQHHH   ", "    HQQ J   J QQH    ", "     Q         Q     ", "     V    J    V     ", "     Q         Q     ", "     QQ J   J QQ     ", "      QQ     QQ      ", "       QQ M QQ       ", "        QQQQQ        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "A RO             OR A", "APPPPPPPPPPPPPPPPPPPA", " PAO             OAP ", " PPPPPPPPLLLPPPPPPPP ", "   OOOOOOOOOOOOOOO   ", "   H   HQQQQQH   H   ", "   H  HQQ M QQH  H   ", "   HHHQQ     QQHHH   ", "    HQQ J   J QQH    ", "     Q         Q     ", "     V    J    V     ", "     Q         Q     ", "     QQ J   J QQ     ", "      QQ     QQ      ", "       QQ M QQ       ", "        QQQQQ        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "A RO             OR A", "A  O      P      O  A", "AAAO             OAAA", "  SOTTTTTTTTTTTTTOS  ", "  SOOOOOOOOOOOOOOOS  ", "   H   HQQQQQH   H   ", "   H  HQQ M QQH  H   ", "   HHHQQ     QQHHH   ", "    HQQ J   J QQH    ", "     Q         Q     ", "     V    J    V     ", "     Q         Q     ", "     QQ J   J QQ     ", "      QQ     QQ      ", "       QQ M QQ       ", "        QQQQQ        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "A RO             OR A", "A  O      P      O  A", "AAAO             OAAA", "   V             V   ", "   OOOOOOOOOOOOOOO   ", "   HHHHHQQQQQHHHHH   ", "   HHHHQQ M QQHHHH   ", "   HHHQQ     QQHHH   ", "    HQQ J   J QQH    ", "     Q         Q     ", "     V    J    V     ", "     Q         Q     ", "     QQ J   J QQ     ", "      QQ     QQ      ", "       QQ M QQ       ", "        QQQQQ        ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "A RO             OR A", "A  O      P      O  A", "AAAO             OAAA", "  SOTTTTTTTTTTTTTOS  ", "  SOOOOOOOOOOOOOOOS  ", "      EEQQQQQEE      ", "     EEQQ M QQEE     ", "    EEQQ     QQEE    ", "    EQQ J   J QQE    ", "    EQ   UUU   QE    ", "    EQ   UJU   QE    ", "    EQ   UUU   QE    ", "    EQQ J   J QQE    ", "    EEQQ     QQEE    ", "     EEQQ M QQEE     ", "      EEQQQQQEE      ", "       EEEEEEE       ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "A RO             OR A", "APPPPPPPPPPPPPPPPPPPA", " PAO             OAP ", " PPPPPPPPLLLPPPPPPPP ", "   OOOOOOOOOOOOOOO   ", "      EEQQQQQEE      ", "     EEQQ M QQEE     ", "    EEQQ     QQEE    ", "    EQQ J   J QQE    ", "    EQ         QE    ", "    EQ    J    QE    ", "    EQ         QE    ", "    EQQ J   J QQE    ", "    EEQQ     QQEE    ", "     EEQQ M QQEE     ", "      EEQQQQQEE      ", "       EEEEEEE       ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("EEEEEEEEEEEEEEEEEEEEE", "A RO             OR A", "A  O     P P     O  A", " AAO             OAA ", "   O             O   ", "   OOOOOOOOOOOOOOO   ", "      EEQQQQQEE      ", "     EEQQ M QQEE     ", "    EEQQ     QQEE    ", "    EQQ J   J QQE    ", "    EQ         QE    ", "    EQ    J    QE    ", "    EQ         QE    ", "    EQQ J   J QQE    ", "    EEQQ     QQEE    ", "     EEQQ M QQEE     ", "      EEQQQQQEE      ", "       EEEEEEE       ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle(" EEEEEEEEEEEEEEEEEEE ", "AAAOOOOOOOOOOOOOOOAAA", "AAAOOOOOOPOPOOOOOOAAA", " AAOOOOOOOOOOOOOOOAA ", "   OOOOOOOOOOOOOOO   ", "   OOOOOOOOOOOOOOO   ", "      EE     EE      ", "     EE QQQQQ EE     ", "    EE QQBBBQQ EE    ", "    E QQBBBBBQQ E    ", "    E QBBLLLBBQ E    ", "    E QBBLJLBBQ E    ", "    E QBBLLLBBQ E    ", "    E QQBBBBBQQ E    ", "    EE QQBBBQQ EE    ", "     EE QQQQQ EE     ", "      EE     EE      ", "       EEEEEEE       ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  EEEEEEEEEEEEEEEEE  ", "                     ", "         P P         ", "                     ", "                     ", "                     ", "      EE     EE      ", "     EE       EE     ", "    EE         EE    ", "    E           E    ", "    E           E    ", "    E           E    ", "    E           E    ", "    E           E    ", "    EE         EE    ", "     EE       EE     ", "      EE     EE      ", "       EEEEEEE       ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   EEEEEEEEEEEEEEE   ", "                     ", "         P P         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAAAAAAAAAAAAAA   ", "      BB     BB      ", "      BB P P BB      ", "                     ", "                     ", "        EEEEE        ", "        EEEEE        ", "                     ", "                     ", "                     ", "                     ", "                     ", "         FGF         ", "         FGF         ", "         FGF         ", "         FGF         ", "         FGF         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAAAAAAAAAAAAAA  ", "  HHH BBCCCCCBB HHH  ", "  HHH BBCPCPCBB HHH  ", "      BBCCCCCBB      ", "      BBCCCCCBB      ", "      EEEEEEEEE      ", "      EE     EE      ", "                     ", "                     ", "                     ", "         FGF         ", "         FGF         ", "                     ", "        CCCCC        ", "        IIIII        ", "        CCCCC        ", "                     ", "         FGF         ", "         FGF         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle(" AAAAAAAAAAAAAAAAAAA ", "  HJH CCKKKKKCC HJH  ", "  HJH CC PJP CC HJH  ", "   J  CC     CC  J   ", "   J  CC     CC  J   ", "   J EEE     EEE J   ", "   J E         E J   ", "   J             J   ", "   J     FGF     J   ", "   M     FGF     M   ", "   M             M   ", "                     ", "                     ", "      CC     CC      ", "      II     II      ", "      CC     CC      ", "                     ", "                     ", "                     ", "         FGF         ", "         FGF         ", "                     ", "                     ", "                     ", "                     ")
                    .aisle(" AAAAAAAAAAAAAAAAAAA ", "  HHHCKKKKKKKKKCHHH  ", "  HHHCMM PJP MMCHHH  ", "     C         C     ", "     C         C     ", "    EE         EE    ", "    E           E    ", "         FGF         ", "                     ", "                     ", "                     ", "                     ", "                     ", "     C   ENE   C     ", "     I   ENE   I     ", "     C   ENE   C     ", "                     ", "                     ", "                     ", "                     ", "                     ", "         FGF         ", "                     ", "                     ", "                     ")
                    .aisle(" AAAAAAAAAAAAAAAAAAA ", "    CKKKKKKKKKKKC    ", "    C    LJL    C    ", "    C           C    ", "    C           C    ", "   EE           EE   ", "   E             E   ", "         FGF         ", "                     ", "                     ", "                     ", "         ENE         ", "         ENE         ", "    C           C    ", "    I           I    ", "    C           C    ", "         ENE         ", "         ENE         ", "                     ", "                     ", "                     ", "         FGF         ", "                     ", "                     ", "                     ")
                    .aisle(" AAAAAAAAAAAAAAAAAAA ", " BBCKKKKKKKKKKKKKCBB ", " BBCM    LJL    MCBB ", "  BC             CB  ", "  BC             CB  ", "  EE             EE  ", "  E      FGF      E  ", "                     ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "   C             C   ", "   I             I   ", "   C             C   ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "                     ", "         FGF         ", "                     ", "                     ")
                    .aisle(" AAAAAAAAAAAAAAAAAAA ", " BBCKKKKKKKKKKKKKCBB ", " BBCM    LJL    MCBB ", "  BC             CB  ", "  BC             CB  ", "  EE             EE  ", "  E      FGF      E  ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "                     ", "   C             C   ", "   I             I   ", "   C             C   ", "                     ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "         FGF         ", "                     ", "                     ")
                    .aisle("HAAAAAAAAAAAAAAAAAAAH", "HHCKKKKKKKKKKKKKKKCHH", "HHC      LJL      CHH", "HHC               CHH", " OC               CO ", " EE      FGF      EE ", " E                 E ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "                     ", "  C               C  ", "  I               I  ", "  C               C  ", "                     ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "                     ", "         FGF         ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", " ACKKKKKKKKKKKKKKKCA ", " AC     MLJLM     CA ", "HHC     ML LM     CHH", " OC     M   M     CO ", " EE      FGF      EE ", " E                 E ", " O                 O ", "         ENE         ", "                     ", "                     ", "                     ", "                     ", "  C               C  ", "  I               I  ", "  C               C  ", "                     ", "                     ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "         FGF         ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", " ECKKKKKKKKKKKKKKKCE ", " ECJJJJJJJJJJJJJJJCE ", "HHC      L L      CHH", "OOC               COO", "OEE      FGF      EEO", "OE                 EO", "OO                 OO", "         ENE         ", "                     ", "                     ", "                     ", "                     ", "  C               C  ", "  I               I  ", "  C               C  ", "                     ", "                     ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "         FGF         ", "                     ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAA", " ACKKKKKKKKKKKKKKKCA ", " AC     MLJLM     CA ", "HHC     ML LM     CHH", " OC     M   M     CO ", " EE      FGF      EE ", " E                 E ", " O                 O ", "         ENE         ", "                     ", "                     ", "                     ", "                     ", "  C               C  ", "  I               I  ", "  C               C  ", "                     ", "                     ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "         FGF         ", "                     ")
                    .aisle("HAAAAAAAAAAAAAAAAAAAH", "HHCKKKKKKKKKKKKKKKCHH", "HHC      LJL      CHH", "HHC               CHH", " OC               CO ", " EE      FGF      EE ", " E                 E ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "                     ", "  C               C  ", "  I               I  ", "  C               C  ", "                     ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "                     ", "         FGF         ", "                     ")
                    .aisle(" AAAAAAAAAAAAAAAAAAA ", " BBCKKKKKKKKKKKKKC   ", " BBCM    LJL    MC   ", "  BC             C   ", "  BC             C   ", "  EE             EE  ", "  E      FGF      E  ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "                     ", "   C             C   ", "   I             I   ", "   C             C   ", "                     ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "         FGF         ", "                     ", "                     ")
                    .aisle(" AAAAAAAAAAAAAAAAAAA ", " BBCKKKKKKKKKKKKKC   ", " BBCM    LJL    MC   ", "  BC             C   ", "  BC             C   ", "  EE             EE  ", "  E      FGF      E  ", "                     ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "   C             C   ", "   I             I   ", "   C             C   ", "                     ", "                     ", "         ENE         ", "                     ", "                     ", "                     ", "         FGF         ", "                     ", "                     ")
                    .aisle(" AAAAAAAAAAAAAAAAAAA ", "    CKKKKKKKKKKKC    ", "    C    LJL    C    ", "    C           C    ", "    C           C    ", "   EE           EE   ", "   E             E   ", "         FGF         ", "                     ", "                     ", "                     ", "         ENE         ", "         ENE         ", "    C           C    ", "    I           I    ", "    C           C    ", "         ENE         ", "         ENE         ", "                     ", "                     ", "                     ", "         FGF         ", "                     ", "                     ", "                     ")
                    .aisle(" AAAAAAAAAAAAAAAAAAA ", "  HHHCKKKKKKKKKCHHH  ", "  HHHCMM LJL MMCHHH  ", "     C         C     ", "     C         C     ", "    EE         EE    ", "    E           E    ", "         FGF         ", "                     ", "                     ", "                     ", "                     ", "                     ", "     C   ENE   C     ", "     I   ENE   I     ", "     C   ENE   C     ", "                     ", "                     ", "                     ", "                     ", "                     ", "         FGF         ", "                     ", "                     ", "                     ")
                    .aisle("  AAAAAAAAAAAAAAAAA  ", "  HJH CCKKKKKCC HJH  ", "  HJH CC LJL CC HJH  ", "   J  CC     CC  J   ", "   J  CC     CC  J   ", "   J EEE     EEE J   ", "   J E         E J   ", "   J             J   ", "   J     FGF     J   ", "   M     FGF     M   ", "   M             M   ", "                     ", "                     ", "      CC     CC      ", "      II     II      ", "      CC     CC      ", "                     ", "                     ", "                     ", "         FGF         ", "         FGF         ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("   AAAAAAAAAAAAAAA   ", "   HH BBaCCCaBB HH   ", "   HH BBaCCCaBB HH   ", "      BBaaaaaBB      ", "      BBaaaaaBB      ", "      EEEEEEEEE      ", "      EE     EE      ", "                     ", "                     ", "                     ", "         FGF         ", "         FGF         ", "                     ", "        CCCCC        ", "        IIIII        ", "        CCCCC        ", "                     ", "         FGF         ", "         FGF         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .aisle("    AAAAAAAAAAAAA    ", "      BB a~a BB      ", "      BB aaa BB      ", "      BB     BB      ", "                     ", "        EEEEE        ", "        EEEEE        ", "                     ", "                     ", "                     ", "                     ", "                     ", "         FGF         ", "         FGF         ", "         FGF         ", "         FGF         ", "         FGF         ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ", "                     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GCYMBlocks.CASING_NONCONDUCTING.get()))
                    .where('B', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('C', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('E', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('F', blocks(GTOBlocks.NEUTRONIUM_STABLE_CASING.get()))
                    .where('G', blocks(GTBlocks.FUSION_COIL.get()))
                    .where('H', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('I', blocks(GTOBlocks.FUSION_COIL_MK2.get()))
                    .where('J', blocks(GTOBlocks.AMPROSIUM_ACTIVE_CASING.get()))
                    .where('K', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('L', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('M', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('N', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('O', blocks(GTOBlocks.ECHO_CASING.get()))
                    .where('P', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('Q', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('R', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.NeodymiumMagnetic)))
                    .where('S', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('T', blocks(GTBlocks.SUPERCONDUCTING_COIL.get()))
                    .where('U', blocks(GTOBlocks.HYPER_CORE.get()))
                    .where('V', blocks(GTOBlocks.QUANTUM_GLASS.get()))
                    .where('W', blocks(GTBlocks.CASING_TITANIUM_TURBINE.get()))
                    .where('X', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Ultimet)))
                    .where('Y', blocks(GTOBlocks.OXIDATION_RESISTANT_HASTELLOY_N_MECHANICAL_CASING.get()))
                    .where('Z', blocks(GCYMBlocks.HEAT_VENT.get()))
                    .where('a', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/naquadah_reinforced_plant_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition SUPER_SPACE_ELEVATOR = multiblock("super_space_elevator", "超级太空电梯", SuperSpaceElevatorMachine::new)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.DUMMY_RECIPES)
            .tooltips(NewDataAttributes.CAPACITY.create(c -> c.addLines("64个模块", "64 modules")))
            .tooltips(ComponentBuilder.create().addStoryLine(
                    """
                            GTO寰宇格雷科技有限公司历经数代人的努力，终于建成了超级太空电梯。
                            这座庞然大物不仅是工程奇迹，更是人类征服宇宙的终极象征。
                            董事长站在控制室内，凝视着这个能同时运行64个模块的超级结构。
                            "今天，我们不再仅仅是地球的居民，"他激动地对员工们说道。
                            超级太空电梯的运转声如同宇宙的心跳，承载着公司最伟大的愿景。
                            它几乎戳破了现实与理想的边界，让星辰大海不再是遥不可及的梦。
                            从此，格雷科技的名字将与人类的星际征程永远联系在一起。
                            """,
                    """
                            GTO Corporation, after generations of effort, finally completed the Super Space Elevator.
                            This colossal structure is not just an engineering marvel, but humanity's ultimate symbol of cosmic conquest.
                            The CEO stood in the control room, gazing at this super structure capable of running 64 modules simultaneously.
                            "Today, we are no longer merely inhabitants of Earth," he excitedly told his employees.
                            The hum of the Super Space Elevator resonated like the heartbeat of the universe, carrying the company's greatest vision.
                            It almost pierced the boundary between reality and ideals, making the sea of stars no longer an unreachable dream.
                            Henceforth, GregTech's name would be forever linked with humanity's interstellar journey.
                            """).build())
            .tooltips(NewDataAttributes.MAIN_FUNCTION.create(
                    v -> v.addLines("模块运行优化系统", "Module Operation Optimization System"),
                    p -> p.addCommentLines(
                            """
                                    提升电压等级可大幅减少模块的运行时间
                                    额外提升为模块提供的并行数
                                    运行前需提供128*(机器等级-7)的算力""",
                            """
                                    Increasing voltage tier can greatly reduce the duration for modules
                                    Additional increase in the parallelism provided by the module
                                    Requires 128*(Machine Tier - 7) of computing power before operation""")))
            .block(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING)
            .pattern(definition -> MultiBlockFileReader.start(definition)
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('B', blocks(GTOBlocks.SPACE_ELEVATOR_INTERNAL_SUPPORT.get()))
                    .where('C', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('D', blocks(GTOBlocks.HYPER_MECHANICAL_CASING.get()))
                    .where('E', blocks(GTOBlocks.SPACE_ELEVATOR_MODULE_BASE.get()))
                    .where('F', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()).or(blocks(GTOBlocks.MODULE_CONNECTOR.get()).setPreviewCount(1)))
                    .where('G', blocks(GTOBlocks.SPACE_ELEVATOR_SUPPORT.get()))
                    .where('H', blocks(GTOBlocks.HSSS_BOROSILICATE_GLASS.get()))
                    .where('I', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('J', blocks(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Neutronium)))
                    .where('M', GTOPredicates.tierBlock(SEPMMAP, POWER_MODULE_TIER))
                    .where('N', blocks(GTOBlocks.SPACE_ELEVATOR_POWER_CORE.get()))
                    .where('X', blocks(GTOBlocks.SPACE_ELEVATOR_MECHANICAL_CASING.get())
                            .or(abilities(GTOPartAbility.ITEMS_INPUT).setExactLimit(1))
                            .or(abilities(INPUT_ENERGY).setExactLimit(1))
                            .or(abilities(COMPUTATION_DATA_RECEPTION).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .renderer(SpaceElevatorRenderer::new)
            .hasTESR(true)
            .register();

    public static final MultiblockMachineDefinition MEGA_BATH_TANK = multiblock("mega_bath_tank", "巨型浸洗池", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTRecipeTypes.CHEMICAL_BATH_RECIPES)
            .recipeTypes(GTRecipeTypes.ORE_WASHER_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.BACK, RelativeDirection.UP, RelativeDirection.LEFT)
                    .aisle("            AAAAAAA            ", "            AAAAAAA            ", "            AAAAAAA            ", "            BBBBBBB            ", "            ACCCCCA            ", "            ACCCCCA            ", "            BBBBBBB            ", "            AAAAAAA            ", "            AAAAAAA            ", "             AAAAA             ", "                               ", "                               ", "                               ")
                    .aisle("         AAAAAAAAAAAAA         ", "         AAA       AAA         ", "         AAA DEDED AAA         ", "         BBBBBBBBBBBBB         ", "         AAA       AAA         ", "         AAA       AAA         ", "         BBBBBBBBBBBBB         ", "         AAA DEDED AAA         ", "         AAA       AAA         ", "            FFFFFFF            ", "                               ", "                               ", "                               ")
                    .aisle("       AAAAAAAAAAAAAAAAA       ", "       AA             AA       ", "       AA    DEDED    AA       ", "       BBBBB      BBBBBB       ", "       AA             AA       ", "       AA             AA       ", "       BBBBB      BBBBBB       ", "       AA    DEDED    AA       ", "       AA             AA       ", "         FFFFFFFFFFFFF         ", "                               ", "                               ", "                               ")
                    .aisle("      AAAAAAAAAAAAAAAAAAA      ", "      A                 A      ", "      A      DEDED      A      ", "      BBBBBB      BBBBBBB      ", "      A                 A      ", "      A                 A      ", "      BBBBBB      BBBBBBB      ", "      A      DEDED      A      ", "      A                 A      ", "       FFFFFFFFFFFFFFFFF       ", "             GFFFG             ", "                               ", "                               ")
                    .aisle("     AAAAAAAAAAAAAAAAAAAAA     ", "     A                   A     ", "     A       DEDED       A     ", "     BBBBBBB      BBBBBBBB     ", "     A                   A     ", "     A                   A     ", "     BBBBBBB      BBBBBBBB     ", "     A       DEDED       A     ", "     A                   A     ", "     AFFFFFFF     FFFFFFFA     ", "          GGGFFFFFGGG          ", "             G   G             ", "                               ")
                    .aisle("    AAAAAAAAAAAAAAAAAAAAAAA    ", "    AHH                 HHA    ", "    AHH      DEDED      HHA    ", "    BHHIJJJJJJJJJJJJJJJIHHB    ", "    AHH                 HHA    ", "    AHH                 HHA    ", "    BHHIJJJJJJJJJJJJJJJIHHB    ", "    AHH      DEDED      HHA    ", "    AHH                 HHA    ", "    AFFFFF           FFFFFA    ", "         GFFFFFFFFFFFG         ", "             G   G             ", "                               ")
                    .aisle("   AAAAAAAAAAAAAAAAAAAAAAAAA   ", "   A HH                 HH A   ", "   A HH      DEDED      HH A   ", "   BBHHIGGGGG     GGGGGIHHBB   ", "   A HH                 HH A   ", "   A HH                 HH A   ", "   BBHHIGGGGG     GGGGGIHHBB   ", "   A HH      DEDED      HH A   ", "   A HH                 HH A   ", "    FFFFF             FFFFF    ", "        GFFFFFFFFFFFFFG        ", "             G   G             ", "                               ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAA  ", "  A                         A  ", "  A          DEDED          A  ", "  BBBIIKKKKKG     GKKKKKIIBBB  ", "  A                         A  ", "  A                         A  ", "  BBBIIKKKKKG     GKKKKKIIBBB  ", "  A          DEDED          A  ", "  A                         A  ", "   FFFFF               FFFFF   ", "       GFFFFFFFFFFFFFFFG       ", "             G   G             ", "                               ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAA  ", "  A                         A  ", "  A          DEDED          A  ", "  BBBJGKKKKKG     GKKKKKGJBBB  ", "  A                         A  ", "  A                         A  ", "  BBBJGKKKKKG     GKKKKKGJBBB  ", "  A          DEDED          A  ", "  A                         A  ", "   FFFF                 FFFF   ", "      GFFFFFFLLLLLFFFFFFG      ", "             G   G             ", "                               ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", " A                           A ", " A           DEDED           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A                           A ", " A                           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A           DEDED           A ", " A                           A ", "  FFFF                   FFFF  ", "     GFFFFFAAAAAAAAAFFFFFG     ", "           AAG   GAA           ", "                               ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", " A                           A ", " A           DEDED           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A                           A ", " A                           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A           DEDED           A ", " A                           A ", "  FFF                     FFF  ", "    GFFFFFAAAAAAAAAAAFFFFFG    ", "          AAAG   GAAA          ", "                               ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", " A                           A ", " A           DEDED           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A                           A ", " A                           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A           DEDED           A ", " A                           A ", "  FFF                     FFF  ", "    GFFFFAAAAAAAAAAAAAFFFFG    ", "         AAAAG   GAAAA         ", "                               ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "A                             A", "A            DEDED            A", "BBBBBJGGGGGGG     GGGGGGGJBBBBB", "A                             A", "A                             A", "BBBBBJGGGGGGG     GGGGGGGJ   BB", "A            DEDED            A", "A                             A", " FFFF                     FFFF ", "    GFFFFAAAAAAAAAAAAAFFFFG    ", "         AAAAG   GAAAA         ", "                               ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "A                             A", "ADDDDDDDDDDDDDEDEDDDDDDDDDDDDDA", "BB   J                   JBBBBB", "C                             C", "C                             C", "BB   J                   J   BB", "aDDDDDDDDDDDDDEDEDDDDDDDDDDDDDA", "A                             A", "aFFF                       FFFA", "   GFFFFLAAAAAAAAAAAAALFFFFG   ", "    GGGGGGGGGG   GGGGGGGGGG    ", "                               ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "A                             A", "AEEEEEEEEEEEEEEDEEEEEEEEEEEEEEA", "BB   J                   J   BB", "C                             C", "C                             C", "BB   J                   J   BB", "aEEEEEEEEEEEEEEDEEEEEEEEEEEEEEA", "A             E E             A", "aFFF          E E          FFFA", " aIFFFFFLAAAAAEAEAAAAALFFFFF   ", " aADDDDDDDDDDDDDD              ", " aADDDDDDDDDDDDD               ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "A                             A", "ADDDDDDDDDDDDDDDDDDDDDDDDDDDDDA", "BB   J                   J   BB", "C                             C", "C                             C", "BB   J                   J   BB", "aDDDDDDDDDDDDDDDDDDDDDDDDDDDDDA", "A                             A", "aFFF                       FFFA", " aIFFFFFLAAAAAAAAAAAAALFFFFF   ", " ~ADDDDDDDDDDDDID              ", " aADDDDDDDDDDDDID              ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "A                             A", "AEEEEEEEEEEEEEEDEEEEEEEEEEEEEEA", "BB   J                   J   BB", "C                             C", "C                             C", "BB   J                   J   BB", "aEEEEEEEEEEEEEEDEEEEEEEEEEEEEEA", "A             E E             A", "aFFF          E E          FFFA", " aIFFFFFLAAAAAEAEAAAAALFFFFF   ", " aADDDDDDDDDDDDDD              ", " aADDDDDDDDDDDDD               ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "A                             A", "ADDDDDDDDDDDDDEDEDDDDDDDDDDDDDA", "BB   J                   J   BB", "C                             C", "C                             C", "BB   J                   J   BB", "aDDDDDDDDDDDDDEDEDDDDDDDDDDDDDA", "A                             A", "aFFF                       FFFA", "   GFFFFLAAAAAAAAAAAAALFFFFG   ", "    GGGGGGGGGG   GGGGGGGGGG    ", "                               ")
                    .aisle("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "A                             A", "A            DEDED            A", "BBBBBJGGGGGGG     GGGGGGGJBBBBB", "A                             A", "A                             A", "BB   JGGGGGGG     GGGGGGGJBBBBB", "A            DEDED            A", "A                             A", " FFFF                     FFFF ", "    GFFFFAAAAAAAAAAAAAFFFFG    ", "         AAAAG   GAAAA         ", "                               ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", " A                           A ", " A           DEDED           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A                           A ", " A                           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A           DEDED           A ", " A                           A ", "  FFF                     FFF  ", "    GFFFFAAAAAAAAAAAAAFFFFG    ", "         AAAAG   GAAAA         ", "                               ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", " A                           A ", " A           DEDED           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A                           A ", " A                           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A           DEDED           A ", " A                           A ", "  FFF                     FFF  ", "    GFFFFFAAAAAAAAAAAFFFFFG    ", "          AAAG   GAAA          ", "                               ")
                    .aisle(" AAAAAAAAAAAAAAAAAAAAAAAAAAAAA ", " A                           A ", " A           DEDED           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A                           A ", " A                           A ", " BBBBJGKKKKKG     GKKKKKGJBBBB ", " A           DEDED           A ", " A                           A ", "  FFFF                   FFFF  ", "     GFFFFFAAAAAAAAAFFFFFG     ", "           AAG   GAA           ", "                               ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAA  ", "  A                         A  ", "  A          DEDED          A  ", "  BBBJGKKKKKG     GKKKKKGJBBB  ", "  A                         A  ", "  A                         A  ", "  BBBJGKKKKKG     GKKKKKGJBBB  ", "  A          DEDED          A  ", "  A                         A  ", "   FFFF                 FFFF   ", "      GFFFFFFLLLLLFFFFFFG      ", "             G   G             ", "                               ")
                    .aisle("  AAAAAAAAAAAAAAAAAAAAAAAAAAA  ", "  A                         A  ", "  A          DEDED          A  ", "  BBBIIKKKKKG     GKKKKKIIBBB  ", "  A                         A  ", "  A                         A  ", "  BBBIIKKKKKG     GKKKKKIIBBB  ", "  A          DEDED          A  ", "  A                         A  ", "   FFFFF               FFFFF   ", "       GFFFFFFFFFFFFFFFG       ", "             G   G             ", "                               ")
                    .aisle("   AAAAAAAAAAAAAAAAAAAAAAAAA   ", "   A HH                 HH A   ", "   A HH      DEDED      HH A   ", "   BBHHIGGGGG     GGGGGIHHBB   ", "   A HH                 HH A   ", "   A HH                 HH A   ", "   BBHHIGGGGG     GGGGGIHHBB   ", "   A HH      DEDED      HH A   ", "   A HH                 HH A   ", "    FFFFF             FFFFF    ", "        GFFFFFFFFFFFFFG        ", "             G   G             ", "                               ")
                    .aisle("    AAAAAAAAAAAAAAAAAAAAAAA    ", "    AHH                 HHA    ", "    AHH      DEDED      HHA    ", "    BHHIJJJJJJJJJJJJJJJIHHB    ", "    AHH                 HHA    ", "    AHH                 HHA    ", "    BHHIJJJJJJJJJJJJJJJIHHB    ", "    AHH      DEDED      HHA    ", "    AHH                 HHA    ", "    AFFFFF           FFFFFA    ", "         GFFFFFFFFFFFG         ", "             G   G             ", "                               ")
                    .aisle("     AAAAAAAAAAAAAAAAAAAAA     ", "     A                   A     ", "     A       DEDED       A     ", "     BBBBBBBB     BBBBBBBB     ", "     A                   A     ", "     A                   A     ", "     BBBBBBBB      BBBBBBB     ", "     A       DEDED       A     ", "     A                   A     ", "     AFFFFFFF     FFFFFFFA     ", "          GGGFFFFFGGG          ", "             G   G             ", "                               ")
                    .aisle("      AAAAAAAAAAAAAAAAAAA      ", "      A                 A      ", "      A      DEDED      A      ", "      BBBBBBB     BBBBBBB      ", "      A                 A      ", "      A                 A      ", "      BBBBBBB      BBBBBB      ", "      A      DEDED      A      ", "      A                 A      ", "       FFFFFFFFFFFFFFFFF       ", "             GFFFG             ", "                               ", "                               ")
                    .aisle("       AAAAAAAAAAAAAAAAA       ", "       AA             AA       ", "       AA    DEDED    AA       ", "       BBBBBB     BBBBBB       ", "       AA             AA       ", "       AA             AA       ", "       BBBBBB      BBBBB       ", "       AA    DEDED    AA       ", "       AA             AA       ", "         FFFFFFFFFFFFF         ", "                               ", "                               ", "                               ")
                    .aisle("         AAAAAAAAAAAAA         ", "         AAA       AAA         ", "         AAA DEDED AAA         ", "         BBBBBBBBBBBBB         ", "         AAA       AAA         ", "         AAA       AAA         ", "         BBBBBBBBBBBBB         ", "         AAA DEDED AAA         ", "         AAA       AAA         ", "            FFFFFFF            ", "                               ", "                               ", "                               ")
                    .aisle("            AAAAAAA            ", "            AAAAAAA            ", "            AAAAAAA            ", "            BBBBBBB            ", "            ACCCCCA            ", "            ACCCCCA            ", "            BBBBBBB            ", "            AAAAAAA            ", "            AAAAAAA            ", "             AAAAA             ", "                               ", "                               ", "                               ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('B', blocks(GCYMBlocks.CASING_WATERTIGHT.get()))
                    .where('C', blocks(GTBlocks.CLEANROOM_GLASS.get()))
                    .where('D', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSLASteel)))
                    .where('E', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('F', blocks(GTOBlocks.FLOCCULATION_CASING.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Naquadria)))
                    .where('H', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('I', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('J', blocks(GTOBlocks.LASER_CASING.get()))
                    .where('K', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('L', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('a', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/reinforced_sterile_water_plant_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition MEGA_VACUUM_DRYING_FURNACE = multiblock("mega_vacuum_drying_furnace", "巨型真空干燥炉", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.VACUUM_DRYING_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("                   ", "                   ", "                   ", "                   ", "                   ", "                   ", "        MMM        ", "        MMM        ", "        MMM        ", "                   ", "                   ", "                   ", "                   ", "                   ")
                    .aisle("                   ", "                   ", "            F F    ", "           CCCCC   ", "          CCCCCCC  ", "         CCCCCCCCC ", "        MCCCQQQCCCF", "        MCCCQQQCCC ", "        MCCCQQQCCCF", "         CCCCCCCCC ", "          CCCCCCC  ", "           CCCCC   ", "            F F    ", "                   ")
                    .aisle("  CCCCC            ", "  KKKKK            ", "  KaaaK    FFFFF   ", "  Ka~aK   FFOOOFF  ", "  KaaaK  FFO   OFF ", "  KaaaK FFO     OFF", "  KKKKK PO       OF", "        PO       OF", "        PO       OF", "        FFO     OFF", "         FFO   OFF ", "          FFOOOFF  ", "           FFFFF   ", "                   ")
                    .aisle("  CCCCC  CCCCCCCCC ", "  KKKKK  CCCCCCCCC ", "  K   K  CCGGGGGCC ", "  L   L  CGGHIHGGC ", "  L   L  GG H H GG ", "  L   L GG  H H  GG", "  KKKKK GHHHHHHHHHG", "        GI  H H  IG", "        GHHHHHHHHHG", "        GG  H H  GG", "         GG H H GG ", "          GGHIHGG  ", "           GGBGG   ", "             B     ")
                    .aisle("  CCCCC  CCCCCCCCC ", "  KKKKK  CCCCCCCCC ", "  KKKKK  CCGGGGGCC ", "  KKKKK  CGGHIHGGC ", "  KKKKK  GG     GG ", "  KKKKK GG       GG", "  KKKKK GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGG  ", "           GGGGG   ", "             B     ")
                    .aisle("         CCCCCCCCC ", "         CCCCCCCCC ", "         CCGGGGGCC ", "         CGGHIHGGC ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGG  ", "           GGGGG   ", "             B     ")
                    .aisle("         CCCCCCCCC ", "         CCCCCCCCC ", "         CCGGGGGCC ", "         CGGHIHGGC ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGG  ", "           GGGGG   ", "             B     ")
                    .aisle("         CCCCCCCCC ", "         CCCCCCCCC ", "         CCGGGGGCC ", "         CGGHIHGGC ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGG  ", "          BGGGGG   ", "          BBBB     ")
                    .aisle("         CCCCCCCCC ", "         CCCCCCCCC ", "         CCGGGGGCC ", "         CGGHIHGGC ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGG  ", "          BGGGGG   ", "                   ")
                    .aisle("CCCCCCC  CCCCCCCCC ", "GGGGGGG  CCCCCCCCC ", "GGGGGGG  CCGGGGGCC ", "GGGGGGG  CGGHIHGGC ", "GGGGGGG  GG     GG ", "GGGGGGG GG       GG", "GGGGGGG HH       HH", "GGGGGGG GI       IG", "GGGGGGG HH       HH", "GGGGGGG GG       GG", "         GG     GG ", "          GGHIHGG  ", "          BGGGGG   ", "                   ")
                    .aisle("CCCCCCC  CCCCCCCCC ", "GGGGGGG  CCCCCCCCC ", "G     G  CCGGGGGCC ", "G     G  CGGHIHGGC ", "G     G  GG     GG ", "G     G GG       GG", "G     G HH       HH", "G     G GI       IG", "G     G HH       HH", "GGGGGGG GG       GG", "  JJJ    GG     GG ", "          GGHIHGG  ", "          BGGGGG   ", "                   ")
                    .aisle("CCCCCCC  CCCCCCCCC ", "GGGGGGG  CCCCCCCCC ", "G     G  CCGGGGGCC ", "G     G  CGGHIHGGC ", "G     G  GG     GG ", "G     G GG       GG", "G     G HH       HH", "G     G GI       IG", "G     G HH       HH", "GGGAGGG GG       GG", "  JAJ    GG     GG ", "   A      GGHIHGG  ", "   A      BGGGGG   ", "   AAAAAAAA        ")
                    .aisle("CCCCCCCAAAA CCC    ", "GGGGGGGA    CCC    ", "G   AAAA   FFFFF   ", "G     G   FGHIHGF  ", "G     G  FG     GF ", "G     G FG       GF", "G     G FH       HF", "G     G FI       IF", "G     G FH       HF", "GGGGGGG FG       GF", "  JJJ    FG     GF ", "          FGHIHGF  ", "          BFFFFF   ", "          A        ")
                    .aisle("CCCCCCC   A CCC    ", "GGGGGGG     CCC    ", "G     G    GGGGG   ", "G     G   GGHIHGG  ", "G     G  GG     GG ", "G     G GG       GG", "G     G HH       HH", "G     G GI       IG", "G     G HH       HH", "GGGAGGG GG       GG", "  JAJ    GG     GG ", "   A      GGHIHGG  ", "   A      BGGGGG   ", "   AAAAAAAA        ")
                    .aisle("CCCCCCC   A CCC A  ", "GGGGGGG     CCC A  ", "G     G    GGGGGA  ", "G     G   GGHIHGA  ", "G     G  GG     AG ", "G     G GG       GG", "G     G HH       HH", "G     G GI       IG", "G     G HH       HH", "GGGGGGG GG       AG", "  JJJ    GG     GA ", "          GGHIHGGA ", "          BGGGGG   ", "          A        ")
                    .aisle("CCCCCCC   A CCC A  ", "GGGGGGG     CCC    ", "GGGGGGG    GGGGG   ", "GGGGGGG   GGHIHGG  ", "GGGGGGG  GG     GG ", "GGGGGGG GG       GG", "GGGGGGG HH       HH", "GGGGGGG GI       IG", "GGGGGGG HH       HH", "GGGGGGG GG       GG", "         GG     GG ", "          GGHIHGGA ", "          BGGGGG A ", "          AAAAAAAA ")
                    .aisle("          A CCC A  ", "            CCC    ", "           GGGGG   ", "          GGHIHGG  ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGGA ", "          BGGGGG   ", "          A        ")
                    .aisle("          A CCC A  ", "            CCC    ", "           GGGGG   ", "          GGHIHGG  ", "         GG     GG ", "        GG       GG", "        GH       HG", "        GI       IG", "        GH       HG", "        GG       GG", "         GG     GG ", "          GGHIHGGA ", "          BGGGGG A ", "          AAAAAAAA ")
                    .aisle("CCCCCCC   A CCC A  ", "  EEE       CCC B  ", "  EEE      GGGGGB  ", "  EEE     GGHIHGB  ", "  EEE    GG     BG ", "  EEE   GG       GG", "  EEE   GH       HG", "  EEE   GI       IG", "  EEE   GH       HG", "   C    GG       GG", "         GG     GG ", "          GGHIHGGA ", "          BGGGGG   ", "          A        ")
                    .aisle("CCCCCCC   A CCC A  ", " EEEEE      CCC B  ", " E   E     GGGGG   ", " E   E    GGHIHGG  ", " E   E   GG     GG ", " E   E  GG       GG", " E   E  GH       HG", " E   E  GI       IG", " E   E  GH       HG", " CCCCC  GG       GG", "   C     GG     GG ", "          GGHIHGGA ", "          BGGGGG A ", "          AAAAAAAA ")
                    .aisle("CCCCCCC   A CCC A  ", "EEEEEEE     CCC B  ", "E     E    GGGGG   ", "E     E   GGHIHGG  ", "E     E  GG     GG ", "E     E GG       GG", "E     E GH       HG", "E     E GI       IG", "E     E GH       HG", " C   C  GG       GG", "  CCC    GG     GG ", "  JJJ     GGHIHGGA ", "          BGGGGG   ", "          A        ")
                    .aisle("CCCCCCC   A CCC A  ", "EEEEEEE     CCC B  ", "E  B  E    GGGGG   ", "E  B  E   GGHIHGG  ", "E  B  E  GG     GG ", "E  B  E GG       GG", "E  B  E GH       HG", "E  B  E GI       IG", "E  B  E GH       HG", "CC B CC GG       GG", " CCBCC   GG     GG ", "  JBJ     GGHIHGGA ", "   BBBBBBBBGGGGG A ", "          AAAAAAAA ")
                    .aisle("CCCCCCC   A CCC A  ", "EEEEEEE     CCC B  ", "E  B  E    GGGGG   ", "E  B  E   GGHIHGG  ", "E  B  E  GG     GG ", "E  B  E GG       GG", "E  B  E GH       HG", "E  B  E GI       IG", "E  B  E GH       HG", "CC B CC GG       GG", " CCBCC   GG     GG ", "  JBJ     GGHIHGGA ", "   BBBBBBBBGGGGG   ", "          A        ")
                    .aisle("CCCCCCC   A CCC A  ", "EEEEEEE     CCC B  ", "E  B  E    GGGGG   ", "E     E   GGHIHGG  ", "E     E  GG     GG ", "E     E GG       GG", "E     E GH       HG", "E     E GI       IG", "E     E GH       HG", " C   C  GG       GG", "  CCC    GG     GG ", "  JJJ     GGHIHGGA ", "           GGGGG A ", "          AAAAAAAA ")
                    .aisle("CCCCCCC   A CCC A  ", " EEEEE      CCC B  ", " E B E     GGGGG   ", " E   E    GGHIHGG  ", " E   E   GG     GG ", " E   E  GG       GG", " E   E  GH       HG", " E   E  GI       IG", " E   E  GH       HG", " CCCCC  GG       GG", "   C     GG     GG ", "          GGHIHGG  ", "           GGGGG   ", "                   ")
                    .aisle("CCCCCCC   A CCC A  ", "  EEE       CCC B  ", "  EBE      FFFFF   ", "  EEE     FFFFFFF  ", "  EEE    FFFFFFFFF ", "  EEE   FFFFFFFFFFF", "  EEE   FFFFFFFFFFF", "  EEE   FFFFFFFFFFF", "  EEE   FFFFFFFFFFF", "   C    FFFFFFFFFFF", "         FFFFFFFFF ", "          FFFFFFF  ", "           FFFFF   ", "                   ")
                    .aisle("          AAAAAAA  ", "   BBBBBBBBBBBBBB  ", "   B         C     ", "           CCCCC   ", "          CCCCCCC  ", "         CCCCCCCCC ", "         CCCDDDCCC ", "        CCCCDDDCCCC", "         CCCDDDCCC ", "         CCCCCCCCC ", "          CCCCCCC  ", "           CCCCC   ", "             C     ", "                   ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE.get()))
                    .where('B', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('C', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('D', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('E', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('F', blocks(GTOBlocks.RED_STEEL_CASING.get()))
                    .where('G', blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
                    .where('H', heatingCoils())
                    .where('I', blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
                    .where('J', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tungsten)))
                    .where('K', blocks(GTBlocks.COMPUTER_CASING.get()))
                    .where('L', blocks(GTBlocks.COMPUTER_HEAT_VENT.get()))
                    .where('M', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('O', blocks(GTBlocks.HERMETIC_CASING_LuV.get()))
                    .where('P', blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
                    .where('Q', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('a', blocks(GTBlocks.HIGH_POWER_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/hpca/high_power_casing"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition MOLECULAR_OSCILLATION_DEHYDRATOR = multiblock("molecular_oscillation_dehydrator", "分子震荡脱水装置", CoilCrossRecipeMultiblockMachine::createCoilParallel)
            .nonYAxisRotation()
            .tooltips(NewDataAttributes.MAIN_FUNCTION.create(v -> v.addLines("脱水！脱水！脱水！", "Dehydration! Dehydration! Dehydration!")))
            .recipeTypes(GTORecipeTypes.DEHYDRATOR_RECIPES)
            .coilParallelTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.HIGH_POWER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("           AAA           ", "           ABA           ", "                         ", "                         ", "                         ", "                         ", "                         ", "                         ")
                    .aisle("           AAA           ", "           ACA           ", "           BAB           ", "                         ", "                         ", "                         ", "                         ", "                         ")
                    .aisle("           AAA           ", "           ACA           ", "           BAB           ", "           A A           ", "                         ", "                         ", "                         ", "                         ")
                    .aisle("         DDDDDDD         ", "         EEECEEE         ", "         DDDDDDD         ", "         DDDDDDD         ", "         DDADADD         ", "                         ", "                         ", "                         ")
                    .aisle("       DDDDDDDDDDD       ", "       EEE FCF EEE       ", "       DDD     DDD       ", "       DDD     DDD       ", "       DDD     DDD       ", "          EBCBE          ", "                         ", "                         ")
                    .aisle("      DDDDDDDDDDDDD      ", "      EE   FCF   EE      ", "      DD         DD      ", "      DD         DD      ", "      DD         DD      ", "        EEEGCGEEE        ", "          HHHHH          ", "           HHH           ")
                    .aisle("     DDDDDDDDDDDDDDD     ", "     EE    FCF    EE     ", "     DD           DD     ", "     DD           DD     ", "     DD           DD     ", "       EE  GCG  EE       ", "        HHHHHHHHH        ", "         HHH HHH         ")
                    .aisle("    DDDDDDDDDDDDDDDDD    ", "    EE I  IFCFI  I EE    ", "    DD HHHH   HHHH DD    ", "    DD HHHH   HHHH DD    ", "    DD HHHH   HHHH DD    ", "      EE  IGCGI  EE      ", "       HHHJHHHJHHH       ", "        HH K K HH        ")
                    .aisle("    DDDDDDDDDDDDDDDDD    ", "    E      FCF      E    ", "    D  HJJH   HJJH  D    ", "    D  H  B   B  H  D    ", "    D  HJJH   HJJH  D    ", "     EE    GCG    EE     ", "      HHHJJHHHJJHHH      ", "       HH  K K  HH       ")
                    .aisle("   DDDDDDDDDDDDDDDDDDD   ", "   EE      FCF      EE   ", "   DD  HJJH   HJJH  DD   ", "   DD  H  B   B  H  DD   ", "   DD  HJFH   HFJH  DD   ", "     E   F GCG F   E     ", "      HHJJJHHHJJJHH      ", "      HH   aaa   HH      ")
                    .aisle("   DDDDDDDDDDDDDDDDDDD   ", "   E   I  IFCFI  I   E   ", "   D   HHHH   HHHH   D   ", "   D   HBBH   HBBH   D   ", "   D   HHHH   HHHH   D   ", "    EE I  IGCGI  I EE    ", "     HHJJJJHHHJJJJHH     ", "      H    aaa    H      ")
                    .aisle("AAADDDDDDDDDDDDDDDDDDDAAA", "AAAEFFFFFFFFCFFFFFFFFEAAA", " BBD                 DBB ", "  AD                 DA  ", "   A                 A   ", "    BGGGGGGGCGGGGGGGB    ", "     HHHHHHGHGHHHHHH     ", "     HHKKaaGGGaaKKHH     ")
                    .aisle("AAADDDDDDDDDDDDDDDDDDDAAA", "BCCCCCCCCCCCICCCCCCCCCCCB", " AAD        I        DAA ", "   D        I        D   ", "   D        I        D   ", "    CCCCCCCCICCCCCCCC    ", "     HHHHHHHIHHHHHHH     ", "     H   aaG~Gaa   H     ")
                    .aisle("AAADDDDDDDDDDDDDDDDDDDAAA", "AAAEFFFFFFFFCFFFFFFFFEAAA", " BBD                 DBB ", "  AD                 DA  ", "   A                 A   ", "    BGGGGGGGCGGGGGGGB    ", "     HHHHHHGHGHHHHHH     ", "     HHKKaaGGGaaKKHH     ")
                    .aisle("   DDDDDDDDDDDDDDDDDDD   ", "   E   I  IFCFI  I   E   ", "   D   HHHH   HHHH   D   ", "   D   HBBH   HBBH   D   ", "   D   HHHH   HHHH   D   ", "    EE I  IGCGI  I EE    ", "     HHJJJJHHHJJJJHH     ", "      H    aaa    H      ")
                    .aisle("   DDDDDDDDDDDDDDDDDDD   ", "   EE      FCF      EE   ", "   DD  HJJH   HJJH  DD   ", "   DD  H  B   B  H  DD   ", "   DD  HJFH   HFJH  DD   ", "     E   F GCG F   E     ", "      HHJJJHHHJJJHH      ", "      HH   aaa   HH      ")
                    .aisle("    DDDDDDDDDDDDDDDDD    ", "    E      FCF      E    ", "    D  HJJH   HJJH  D    ", "    D  H  B   B  H  D    ", "    D  HJJH   HJJH  D    ", "     EE    GCG    EE     ", "      HHHJJHHHJJHHH      ", "       HH  K K  HH       ")
                    .aisle("    DDDDDDDDDDDDDDDDD    ", "    EE I  IFCFI  I EE    ", "    DD HHHH   HHHH DD    ", "    DD HHHH   HHHH DD    ", "    DD HHHH   HHHH DD    ", "      EE  IGCGI  EE      ", "       HHHJHHHJHHH       ", "        HH K K HH        ")
                    .aisle("     DDDDDDDDDDDDDDD     ", "     EE    FCF    EE     ", "     DD           DD     ", "     DD           DD     ", "     DD           DD     ", "       EE  GCG  EE       ", "        HHHHHHHHH        ", "         HHH HHH         ")
                    .aisle("      DDDDDDDDDDDDD      ", "      EE   FCF   EE      ", "      DD         DD      ", "      DD         DD      ", "      DD         DD      ", "        EEEGCGEEE        ", "          HHHHH          ", "           HHH           ")
                    .aisle("       DDDDDDDDDDD       ", "       EEE FCF EEE       ", "       DDD     DDD       ", "       DDD     DDD       ", "       DDD     DDD       ", "          EBCBE          ", "                         ", "                         ")
                    .aisle("         DDDDDDD         ", "         EEECEEE         ", "         DDDDDDD         ", "         DDDDDDD         ", "         DDADADD         ", "                         ", "                         ", "                         ")
                    .aisle("           AAA           ", "           ACA           ", "           BAB           ", "           A A           ", "                         ", "                         ", "                         ", "                         ")
                    .aisle("           AAA           ", "           ACA           ", "           BAB           ", "                         ", "                         ", "                         ", "                         ", "                         ")
                    .aisle("           AAA           ", "           ABA           ", "                         ", "                         ", "                         ", "                         ", "                         ", "                         ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.MOLECULAR_CASING.get()))
                    .where('B', blocks(GTOBlocks.CONTAINMENT_FIELD_GENERATOR.get()))
                    .where('C', blocks(GTOBlocks.DEGENERATE_RHENIUM_CONSTRAINED_CASING.get()))
                    .where('a', blocks(GTOBlocks.IRIDIUM_CASING.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('D', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('E', blocks(GTOBlocks.RED_STEEL_CASING.get()))
                    .where('F', blocks(GTOBlocks.AMPROSIUM_PIPE_CASING.get()))
                    .where('G', heatingCoils())
                    .where('H', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('I', blocks(GTOBlocks.AMPROSIUM_GEARBOX.get()))
                    .where('J', blocks(GTBlocks.CASING_GRATE.get()))
                    .where('K', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/iridium_casing"), GTCEu.id("block/multiblock/cleanroom"))
            .register();

    public static final MultiblockMachineDefinition HORIZONTAL_COMPRESSOR = multiblock("horizontal_compressor", "卧式压缩机", CrossRecipeMultiblockMachine::createHatchParallel)
            .nonYAxisRotation()
            .recipeTypes(GTORecipeTypes.COMPRESSOR_RECIPES)
            .recipeTypes(GTORecipeTypes.GAS_COMPRESSOR_RECIPES)
            .parallelizableTooltips()
            .laserTooltips()
            .multipleRecipesTooltips()
            .block(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
            .pattern(definition -> FactoryBlockPattern.start(definition, RelativeDirection.RIGHT, RelativeDirection.UP, RelativeDirection.BACK)
                    .aisle("aa  aaa  aa", "aa  a~a  aa", "a         a", "A    C    A", "A   CCC   A", "A  CCCCC  A", "A   CCC   A", "A    C    A", "AAAAAAAAAAA", "A         A")
                    .aisle("AAaaAAAaaAA", "AAaaAAAaaAA", "AaaaaaaaaaA", "A   LLL   A", "A  L   L  A", "A  L   L  A", "A  L   L  A", "A   LLL   A", "AAAAAAAAAAA", "A         A")
                    .aisle("AAAAAAAAAAA", "           ", "           ", "    LLL    ", "   L   L   ", "   L   L   ", "   L   L   ", "    LLL    ", "A         A", "           ")
                    .aisle("AAAAAAAAAAA", "           ", "           ", "    LLL    ", "   L   L   ", "   L   L   ", "   L   L   ", "    LLL    ", "A         A", "           ")
                    .aisle("AAAAAAAAAAA", "           ", "           ", "    LLL    ", "   L   L   ", "   L   L   ", "   L   L   ", "    LLL    ", "A         A", "           ")
                    .aisle("AAAAAAAAAAA", "           ", "  B     B  ", "    LLL    ", "   L   L   ", "   L   L   ", "   L   L   ", "    LLL    ", "A B     B A", "           ")
                    .aisle("AAAAAAAAAAA", "ABBBBBBBBBA", "ABBBBBBBBBA", "ABBBBBBBBBA", "ABBBLLLBBBA", "ABBBL LBBBA", "ABBBLLLBBBA", "ABBBBBBBBBA", "ABBBBBBBBBA", "ABBBBBBBBBA")
                    .aisle("AAAAAAAAAAA", " BBBBBBBBB ", " BBBBBBBBB ", " BBBBBBBBB ", " BBBKJKBBB ", " BBBJJJBBB ", " BBBKJKBBB ", " BBBBBBBBB ", "ABBBBBBBBBA", " BBBBBBBBB ")
                    .aisle("AAAAAAAAAAA", "ABBBBBBBBBA", "ABEBBBBBEBA", "ABBBBBBBBBA", "ABBB J BBBA", "ABBBJJJBBBA", "ABBB J BBBA", "ABBBBBBBBBA", "ABEBBBBBEBA", "ABBBBBBBBBA")
                    .aisle("AAAAAAAAAAA", " CCC   CCC ", " CEC   CEC ", " CCC   CCC ", "     J     ", "    JJJ    ", "     J     ", " CCC   CCC ", " CEC   CEC ", " CCC   CCC ")
                    .aisle("AAAAAAAAAAA", " CCC   CCC ", " CEC   CEC ", " CCC   CCC ", "     J     ", "    JJJ    ", "     J     ", " CCC   CCC ", " CEC   CEC ", " CCC   CCC ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "     J     ", "    JJJ    ", "     J     ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "     J     ", "    JJJ    ", "     J     ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "     J     ", "    JJJ    ", "     J     ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "     J     ", "    JJJ    ", "     J     ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "     J     ", "    JJJ    ", "     J     ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "     J     ", "    JJJ    ", "     J     ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "     J     ", "    JJJ    ", "     J     ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "     J     ", "    JJJ    ", "     J     ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "     J     ", "    JJJ    ", "     J     ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "  HIIIIIH  ", " HEH   HEH ", " IHHH HHHI ", " I HHJHH I ", " I  JJJ  I ", " I HHJHH I ", " IHHH HHHI ", " HEH   HEH ", "  HIIIIIH  ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "    DDD    ", "    DDD    ", "    DDD    ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "    GGG    ", "    GGG    ", "    GGG    ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "           ", "           ", "           ", "           ", "  E     E  ", "           ")
                    .aisle("AA AAAAA AA", "           ", "  E     E  ", "           ", "           ", "           ", "           ", "           ", "  E     E  ", "           ")
                    .aisle("AAAAAAAAAAA", " CCC   CCC ", " CEC   CEC ", " CCCDDDCCC ", "   D   D   ", "   D   D   ", "   D   D   ", " CCCDDDCCC ", " CEC   CEC ", " CCC   CCC ")
                    .aisle("AAAAAAAAAAA", " CCC   CCC ", " CEC   CEC ", " CCCDDDCCC ", "   D   D   ", "   D   D   ", "   D   D   ", " CCCDDDCCC ", " CEC   CEC ", " CCC   CCC ")
                    .aisle("AAAAAAAAAAA", "ABBBBBBBBBA", "ABEBBBBBEBA", " BBBBBBBBB ", " BBBFFFBBB ", " BBBFFFBBB ", " BBBFFFBBB ", " BBBBBBBBB ", " BEBBBBBEB ", " BBBBBBBBB ")
                    .aisle("AAAAAAAAAAA", " BBBBBBBBB ", " BBBBBBBBB ", " BBBBBBBBB ", " BBBDDDBBB ", " BBDDDDDBB ", " BBBDDDBBB ", " BBBBDBBBB ", " BBBBBBBBB ", " BBBBBBBBB ")
                    .aisle("AAAAAAAAAAA", "ABBBBBBBBBA", "ABBBBBBBBBA", " BBBBBBBBB ", " BBBCCCBBB ", " BBBCCCBBB ", " BBBCCCBBB ", " BBBBBBBBB ", " BBBBBBBBB ", " BBBBBBBBB ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
                    .where('B', blocks(GCYMBlocks.CASING_VIBRATION_SAFE.get()))
                    .where('C', blocks(GTBlocks.HIGH_POWER_CASING.get()))
                    .where('D', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('E', blocks(GTBlocks.CASING_STAINLESS_TURBINE.get()))
                    .where('F', blocks(ChemicalHelper.getBlock(TagPrefix.block, GTMaterials.Neutronium)))
                    .where('G', blocks(GTBlocks.CASING_STEEL_SOLID.get()))
                    .where('H', blocks(GCYMBlocks.CASING_REACTION_SAFE.get()))
                    .where('I', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTOMaterials.HastelloyN)))
                    .where('J', blocks(GTOBlocks.IRIDIUM_CASING.get()))
                    .where('K', blocks(GTBlocks.HERMETIC_CASING_UV.get()))
                    .where('L', blocks(GTOBlocks.PRESSURE_CONTAINMENT_CASING.get()))
                    .where('a', blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get())
                            .or(GTOPredicates.autoThreadLaserAbilities(definition.getRecipeTypes()))
                            .or(abilities(PARALLEL_HATCH).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTCEu.id("block/casings/solid/machine_casing_robust_tungstensteel"), GTCEu.id("block/multiblock/fusion_reactor"))
            .register();

    public static final MultiblockMachineDefinition WATER_PURIFICATION_PLANT = multiblock("water_purification_plant", "净化处理厂", WaterPurificationPlantMachine::new)
            .nonYAxisRotation()
            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    h -> h.addLines("处理单元链接系统", "Processing Unit Link System", StyleBuilder::setGold),
                    c -> c.addLines(
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("可以在", "Processing unit controllers can be placed freely within a ")
                                            .addLines("32", "32", StyleBuilder::setYellow)
                                            .addLines("个方块半径内自由放置处理单元控制器", " block radius"),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("为链接的处理", "Provide power to the linked processing ")
                                            .addLines("单元控制器", "unit controllers", StyleBuilder::setYellow)
                                            .addLines("提供电力", " power"),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("该多方块结构接受激光仓，默认耗能=输出水量x2^(输出的净化水等级等级-2)", "This multi-block structure accepts laser chambers, default energy consumption = input water count x 2^(output purification water tier - 2)"),
                                    p -> p,
                                    StyleBuilder::setOneTab))))

            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    h -> h.addLines("处理周期系统", "Processing Cycle System", StyleBuilder::setGold),
                    c -> c.addLines(
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("以固定的", "Operates with a fixed processing cycle of ")
                                            .addLines("120", "120", StyleBuilder::setYellow)
                                            .addLines("秒处理周期工作", " seconds"),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("所有链接的处理单元控制器都遵循这个周期，净化水输出量为输入水量x0.9mB", "All linked processing unit controllers follow this cycle; purified water output is the volume of input water x 0.9mB"),
                                    p -> p,
                                    StyleBuilder::setOneTab))))

            .tooltips(NewDataAttributes.EMPTY_WITH_BAR.create(
                    h -> h.addLines("技术说明", "Technical Description", StyleBuilder::setGreen),
                    c -> c.addLines(
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("水中的污染物和离子颗粒会在硅片和芯片切割和雕刻的精密过程中造成显著的缺陷", "Pollutants and ionic particles in water can cause significant defects during the precise processes of wafer and chip cutting and engraving", StyleBuilder::setGreen),
                                    p -> p,
                                    StyleBuilder::setOneTab),
                            NewDataAttributes.EMPTY_WITH_POINT.createBuilder(
                                    x -> x.addLines("通过一系列越来越精确和复杂的净化过程系统地净化水是至关重要的，而这个多方块结构是操作的核心", "It is crucial to systematically purify the water through a series of increasingly precise and complex processes, and this multi-block structure is the core of the operation", StyleBuilder::setGreen),
                                    p -> p,
                                    StyleBuilder::setOneTab))))
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.STERILE_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAA", "CEEEEEC", "CEFFFEC", "CEEEEEC", "CCCCCCC", "       ", "       ", "       ", "       ")
                    .aisle("AAAAAAA", "E     E", "E     E", "E     E", "CEEEEEC", " B   B ", " B   B ", " B   B ", " B   B ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CCC  ", "  CCC  ", "  CCC  ", "  CCC  ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CGC  ", "  CGC  ", "  CGC  ", "  CGC  ")
                    .aisle("AAAAAAA", "E     E", "F     E", "E     E", "CEEEEEC", "  CCC  ", "  CCC  ", "  CCC  ", "  CCC  ")
                    .aisle("AAAAAAA", "E     E", "E     E", "E     E", "CEEEEEC", " BBCBB ", " B   B ", " B   B ", " B   B ")
                    .aisle("AAAAAAA", "CEEEEEC", "CEEEEEC", "CEEEEEC", "CCCCCCC", "  BCB  ", "       ", "       ", "       ")
                    .aisle("AAAAAAA", "  BaB  ", "  B~B  ", "  BaB  ", "  BaB  ", "  BaB  ", "       ", "       ", "       ")
                    .where('~', controller(blocks(definition.get())))
                    .where('B', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.Tungsten)))
                    .where('C', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('a', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get())
                            .or(abilities(INPUT_LASER).setMaxGlobalLimited(1))
                            .or(abilities(INPUT_ENERGY).setMaxGlobalLimited(2)))
                    .where('F', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('G', air())
                    .where('A', blocks(GTOBlocks.HIGH_STRENGTH_CONCRETE.get()))
                    .where('E', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/sterile_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition CLARIFIER_PURIFICATION_UNIT = multiblock("clarifier_purification_unit", "澄清器净化装置", ClarifierPurificationUnitMachine::new)
            .nonYAxisRotation()
            .tooltipsText("§a净化水等级§r: §f1§r", "§aPurified Water Level§r: §f1§r")
            .tooltipsText("在处理一定量的水后会堵塞过滤器方块，此时需要输入大量空气（1-8KB）与水（200-300B）进行反冲洗，冲洗时输出一定量的废料", "After processing a certain amount of water, the filter block will become clogged. At this point, a large amount of air (1-8KB) and water (200-300B) is required for backflushing. During backflushing, a certain amount of waste will be output.")
            .tooltipsText("基础产出概率为70%，输入少量同等级净化水可提升15%，更高等级每级额外增加5%，最高4级达到100%", "Base output probability is 70%, inputting a small amount of the same level purified water increases the chance by 15%, and higher levels increase by an additional 5% per level, reaching 100% at the maximum of 4 levels.")
            .tooltipsText("----------------------------------------------------------------", "----------------------------------------------------------------")
            .tooltipsText("§a§o获得净化水的第一步是通过使用大型物理过滤器过滤掉宏观污染物", "§a§oThe first step to obtaining purified water is to filter out macro contaminants using large physical filters.")
            .tooltipsText("§a§o通过快速沙滤进行初级水处理，移除水中85%的细菌与几乎所有浊度（泥土、粉砂、微细有机物、无机物、浮游生物等悬浮物和胶体物）", "§a§oAs through rapid sand filtration for primary water treatment, 85% of bacteria and almost all turbidity (including silt, fine sand, micro-organic matter, inorganic matter, and floating organisms etc. suspended particles and colloids) are removed.")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("AAAAAAAAAAA", "AFFFAAAFFFA", "AFFFAAAFFFA", "AFFFAAAFFFA", "AAAAAAAAAAA")
                    .aisle("AFFFAAAFFFA", "FGGGFEFGGGF", "FHHHFEFHHHF", "FEEEF FEEEF", "A         A")
                    .aisle("AFFFAAAFFFA", "FGGGFEFGGGF", "FHHHFEFHHHF", "FEEEF FEEEF", "A         A")
                    .aisle("AFFFAAAFFFA", "FGGGFEFGGGF", "FHHHFEFHHHF", "FEEEF FEEEF", "A         A")
                    .aisle("AFDFAAAFDFA", "FGDGFEFGDGF", "FHHHFEFHHHF", "FEEEF FEEEF", "A         A")
                    .aisle("AADDDDDDDAA", "AFFFAEAFFFA", "AFFFAEAFFFA", "AFFFA AFFFA", "A         A")
                    .aisle("AAAADADAAAA", "AEEEEEEEEEA", "AEEEEEEEEEA", "A         A", "A         A")
                    .aisle("BBBBBBBBBBB", "ABBBBCBBBBA", "ABBBBBBBBBA", "AAAAAAAAAAA", "AAAAAAAAAAA")
                    .where('A', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('B', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(3))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1))
                            .or(abilities(MAINTENANCE).setExactLimit(1)))
                    .where('C', controller(blocks(definition.get())))
                    .where('D', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where('E', air())
                    .where('F', blocks(GTOBlocks.STERILE_WATER_PLANT_CASING.get()))
                    .where('G', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.StainlessSteel)))
                    .where('H', blocks(GTBlocks.FILTER_CASING.get()))
                    .where(' ', any())
                    .build())
            .renderer(FluidRenderer.create(GTOCore.id("block/reinforced_sterile_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor")))
            .hasTESR(true)
            .register();

    public static final MultiblockMachineDefinition OZONATION_PURIFICATION_UNIT = multiblock("ozonation_purification_unit", "臭氧净化装置", OzonationPurificationUnitMachine::new)
            .nonYAxisRotation()
            .tooltipsText("§a净化水等级§r: §f2§r", "§aPurified Water Level§r: §f2§r")
            .tooltipsText("臭氧消耗量=输入水量/10000mB，如果输入口含有超过§61024B§r的§b臭氧气体§r，将发生爆炸", "Ozone consumption = input water amount / 10000mB. If the inlet contains more than §61024B§r of §bOzone Gas§r, an explosion will occur.")
            .tooltipsText("§b臭氧气体§r在0-1024B范围内的产出概率为0-80%，输入少量同等级水可提升15%，更高一级额外提升5%", "The output probability of §bOzone Gas§r in the range of 0-1024B is 0-80%, inputting a small amount of the same level water can increase it by 15%, and higher levels increase by an additional 5%.")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o净化水的第二步是偶氮化，这涉及到注入大量的小分子", "§a§oThe second step of water purification is azonation, which involves injecting a large amount of small molecules")
            .tooltipsText("§a§o高反应性臭氧气体的气泡进入水中。这可以去除微量元素污染物，如", "§a§oThe bubbles of highly reactive ozone gas enter the water. This can remove trace element contaminants such as")
            .tooltipsText("§a§o硫、铁和锰，产生不溶的氧化物化合物，然后被过滤掉", "§a§oSulfur, Iron, and Manganese, producing insoluble oxidized compounds, which are then filtered out.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.OZONE_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("     AAA ", "     AAA ", "     AAA ", "     AAA ", "     AAA ", "     AAA ", "      A  ", "      A  ", "         ", "         ")
                    .aisle("C   AAAAA", "C   A   A", "C   A   A", "EEEEA   A", "EDDEA   A", "EEEEA   A", "     A A ", "     A A ", "      A  ", "      A  ")
                    .aisle("    AAAAA", "  FFA   A", "  F A   A", "EEEEA   A", "E  EA   A", "EDDEA   A", "    A   A", "    A   A", "     A A ", "     AAA ")
                    .aisle("C   AAAAA", "C   A D A", "C   A D A", "EEEEA D A", "EDDEA   A", "EEEEA   A", "     A A ", "     A A ", "      A  ", "      A  ")
                    .aisle("     A~A ", "     A A ", "     A A ", "     A A ", "     AAA ", "     AAA ", "      A  ", "      A  ", "         ", "         ")
                    .where('~', controller(blocks(definition.get())))
                    .where('E', blocks(GTOBlocks.HIGH_PRESSURE_RESISTANT_CASING.get()))
                    .where('A', blocks(GTOBlocks.OZONE_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('C', blocks(ChemicalHelper.getBlock(TagPrefix.frameGt, GTMaterials.HSSE)))
                    .where('D', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('F', blocks(GTBlocks.CASING_POLYTETRAFLUOROETHYLENE_PIPE.get()))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/ozone_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition FLOCCULATION_PURIFICATION_UNIT = multiblock("flocculation_purification_unit", "絮凝净化装置", FlocculationPurificationUnitMachine::new)
            .nonYAxisRotation()
            .tooltipsText("§a净化水等级§r: §f3§r", "§aPurified Water Level§r: §f3§r")
            .tooltipsText("提供§b聚合氯化铝§r以进行操作", "Provide §bPolymeric Aluminum Chloride§r for operation.")
            .tooltipsText("输出可循环利用的§b絮凝废液§r", "Outputs recyclable §bFlocculent Waste Liquid§r.")
            .tooltipsText("在操作过程中，将消耗输入仓中的所有§b聚合氯化铝§r", "During operation, all §bPolymeric Aluminum Chloride§r in the input chamber will be consumed.")
            .tooltipsText("在配方结束时，每消耗§6100000mB§r§b聚合氯化铝§r，成功率会额外增加§410.0%§r", "At the end of the recipe, for every consumed §6100000mB§r of §bPolymeric Aluminum Chloride§r, the success rate will be further increased by §410.0%§r.")
            .tooltipsText("如果提供的液体总量不是§6100000mB§r的倍数，则根据以下公式应用成功率惩罚", "If the total amount of liquid provided is not a multiple of §6100000mB§r, the following formula applies a success rate penalty:")
            .tooltipsText("§9成功率 = 成功率 * 2 ^ (-10 * 溢出比率)", "§9Success Rate = Success Rate * 2 ^ (-10 * Overflow Ratio)")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o净化水的第三步是使用澄清剂（在本例中为聚合氯化铝）去除微观污染物，", "§a§oThe third step of water purification uses a flocculent (in this case, Polymeric Aluminum Chloride) to remove microscopic contaminants,")
            .tooltipsText("§a§o如灰尘、微塑料和其他污染物，通过絮凝使溶液中的分散悬浮颗粒聚集成更大的团块，以便进一步过滤", "§a§o such as dust, microplastics, and other pollutants, through flocculation that causes solution dispersed suspended particles to conglomerate into larger clumps for further filtering.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.FLOCCULATION_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("HH     HH", "HH     HH", "HH     HH", "HH     HH")
                    .aisle("HAAAAAAAH", "HAAAAAAAH", "HAAAAAAAH", "HGG   GGH")
                    .aisle(" ACCCCCA ", " AGDDDGA ", " AG###GA ", " GG   GG ")
                    .aisle(" ACEEECA ", " FDDDDDF ", " A#####A ", "         ")
                    .aisle(" ACEEECA ", " FDDDDDF ", " A#####A ", "         ")
                    .aisle(" ACEEECA ", " FDDDDDF ", " A#####A ", "         ")
                    .aisle(" ACCCCCA ", " ADDDDDA ", " A#####A ", "         ")
                    .aisle(" AAAAAAA ", " AAA~AAA ", " AAAAAAA ", "         ")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', blocks(GTOBlocks.FLOCCULATION_CASING.get())
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where('H', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('F', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('D', air())
                    .where('E', blocks(GTBlocks.FILTER_CASING.get()))
                    .where('G', frames(GTMaterials.StainlessSteel))
                    .where('C', blocks(GTOBlocks.FLOCCULATION_CASING.get()))
                    .where(' ', any())
                    .where('#', air())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/flocculation_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition PH_NEUTRALIZATION_PURIFICATION_UNIT = multiblock("ph_neutralization_purification_unit", "pH中和净化装置", PHNeutralizationPurificationUnitMachine::new)
            .allRotation()
            .tooltipsText("§a净化水等级§r: §f4§r", "§aPurified Water Level§r: §f4§r")
            .tooltipsText("每个周期的初始pH值在§64.5§r至§69.5§r之间变化", "The initial pH value of each cycle varies between §64.5§r to §69.5§r.")
            .tooltipsText("如果周期结束时pH值在§67.0 pH§r的§6±0.05 pH§r范围内，则配方总是成功", "If the pH value is within the §67.0 pH§r's §6±0.05 pH§r range at the end of the cycle, the recipe will always succeed.")
            .tooltipsText("否则，配方总是失败", "Otherwise, the recipe will always fail.")
            .tooltipsText("机器工作时可使用pH传感器读取当前pH值并输出红石信号", "The machine can read the current pH value and output a redstone signal using a pH sensor.")
            .tooltipsText("每秒消耗所有输入的§b氢氧化钠§r和§b盐酸§r", "Consumes all input of §bSodium Hydroxide§r and §bHydrochloric Acid§r every second.")
            .tooltipsText("每消耗1个§b氢氧化钠粉§r，pH值提高§60.01§r", "Each consumed §bSodium Hydroxide Powder§r raises the pH value by §60.01§r.")
            .tooltipsText("每消耗§610§rmB§b盐酸§r，pH值降低§60.01§r", "Each consumed §610§rmB§bHydrochloric Acid§r lowers the pH value by §60.01§r.")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o水净化的第四步是中和溶液并将其pH值精确调节到7，使溶液呈惰性，无水以外的氢离子活动", "§a§oThe fourth step of water purification is to neutralize the solution and adjust its pH value precisely to 7, making the solution inert with no hydrogen ion activity other than that of water.")
            .tooltipsText("§a§o土壤和地质中的酸和碱会导致水的天然碱度变化，可能会与敏感材料发生腐蚀反应", "§a§oAcids and bases in soil and geology can cause natural alkalinity variations in water, possibly leading to corrosion reactions with sensitive materials.")
            .tooltipsText("§a§o因此，需要使用相应的中和剂来平衡水的pH值", "§a§oThus, appropriate neutralizers need to be used to balance the pH value of the water.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.STABILIZED_NAQUADAH_WATER_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("ABBBA     ABBBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABBBA     ABBBA", "A   A     A   A")
                    .aisle("BBBBB     BBBBB", "B   BGDDDDB   B", "B   B     B   B", "B   B     B   B", "B   B     B   B", " BBB       BBB ")
                    .aisle("BBBBBDDDDDBBBBB", "C             C", "C   BDDDDDB   C", "C   B     B   C", "B   B     B   B", " BFB       BGB ")
                    .aisle("BBBBB     BBBBB", "B   BDD~DDB   B", "B   B     B   B", "B   B     B   B", "B   B     B   B", " BBB       BBB ")
                    .aisle("ABBBA     ABBBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABCBA     ABCBA", "ABBBA     ABBBA", "A   A     A   A")
                    .where('~', controller(blocks(definition.get())))
                    .where('A', frames(GTMaterials.Naquadah))
                    .where('F', abilities(IMPORT_ITEMS))
                    .where('G', abilities(IMPORT_FLUIDS))
                    .where('B', blocks(GTOBlocks.INERT_NEUTRALIZATION_WATER_PLANT_CASING.get()))
                    .where('C', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('D', blocks(GTOBlocks.STABILIZED_NAQUADAH_WATER_PLANT_CASING.get())
                            .or(blocks(GTOMachines.PH_SENSOR.getBlock()).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/stabilized_naquadah_water_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition EXTREME_TEMPERATURE_FLUCTUATION_PURIFICATION_UNIT = multiblock("extreme_temperature_fluctuation_purification_unit", "极端温度波动净化装置", ExtremeTemperatureFluctuationPurificationUnitMachine::new)
            .allRotation()
            .tooltipsText("§a净化水等级§r: §f5§r", "§aPurified Water Level§r: §f5§r")
            .tooltipsText("完成加热周期，先将§b水§r加热到§610000K§r以上，然后再冷却至低于§610K§r", "Complete the heating cycle by first heating the §bWater§r to above §610000K§r and then cooling it to below §610K§r.")
            .tooltipsText("配方开始时初始温度重置为§6298K§r", "Initial temperature reset to §6298K§r at the start of the recipe.")
            .tooltipsText("每完成一个加热周期，成功率增加§433%§r", "For each completed heating cycle, success rate increases by §433%§r.")
            .tooltipsText("如果温度达到§612500K§r，配方将失败并输出§b超临界蒸汽§r", "If the temperature reaches §612500K§r, the recipe will fail and output §bSupercritical Steam§r.")
            .tooltipsText("每秒最多消耗§610mB§r§b氦等离子体§r和§6100mB§r§b液氦§r", "Consumes up to §610mB§r of §bHelium Plasma§r and §6100mB§r of §bLiquid Helium§r per second.")
            .tooltipsText("每消耗一mB§b氦等离子体§r，温度mB高§680-120K§r", "Each consumption of 1mB §bHelium Plasma§r raises the temperature by §680-120K§r.")
            .tooltipsText("每消耗一mB§b液氦§r，温度降低§64-6K§r", "Each consumption of 1mB §bLiquid Helium§r lowers the temperature by §64-6K§r.")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o水净化的第五步是蒸发复杂有机聚合物和可能对简单酸、澄清剂和过滤器有抵抗力的极端微生物", "§a§oThe fifth step of water purification evaporates complex organic polymers and extreme microorganisms that may resist simple acids, clarifiers, and filters.")
            .tooltipsText("§a§o使用超高压腔室结合极端温度波动，可以使水保持超临界状态，同时蒸发任何残留的污染物，准备进行过滤", "§a§oUsing ultra-high pressure chambers combined with extreme temperature fluctuations allows the water to remain in a supercritical state while evaporating any remaining contaminants in preparation for filtering.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.PLASMA_HEATER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "            AAAAAAA    ")
                    .aisle("           AAAAAAAAA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "             AAAAA     ", "            AAAAAAA    ", "          AA       AA  ")
                    .aisle("          AAAAAAAAAAA  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "            A     A    ", "          AA       AA  ", "         A           A ")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           A       A   ", "          A         A  ", "         A           A ")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "          A         A  ", "         A           A ", "        A             A")
                    .aisle("CDEDC   AAAAAAAAAAAAAAA", "C   C   A             A", "C   C   A             A", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C     A         A  ", "C   C     A         A  ", "CBDBC     A         A  ", "          A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("EFFFD   AAAAAAAAAAAAAAA", " GGGDDDDA             A", " GGG    A             A", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG      A         A  ", " GGG      A         A  ", "DDDDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("IFFFDDDDAAAAAAAAAAAAAAA", " GHG    A             A", " GHGDDDDA             A", " GHG     A           A ", " GHG     A           A ", " GHG     A           A ", " GHG     A           A ", " GHG      A         A  ", " GHG      A         A  ", "BDDDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("EFFFD   AAAAAAAAAAAAAAA", " GGGDDDDA             A", " GGG    A             A", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG     A           A ", " GGG      A         A  ", " GGG      A         A  ", "DDDDD     A         A  ", " DDD      A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("CD~DC   AAAAAAAAAAAAAAA", "C   C   A             A", "C   C   A             A", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C    A           A ", "C   C     A         A  ", "C   C     A         A  ", "CBDBC     A         A  ", "          A         A  ", "          A         A  ", "         A           A ", "         A           A ", "        A             A")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "           A       A   ", "          A         A  ", "         A           A ", "        A             A")
                    .aisle("         AAAAAAAAAAAAA ", "         A           A ", "         A           A ", "          A         A  ", "          A         A  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           A       A   ", "          A         A  ", "         A           A ")
                    .aisle("          AAAAAAAAAAA  ", "          A         A  ", "          A         A  ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "            A     A    ", "          AA       AA  ", "         A           A ")
                    .aisle("           AAAAAAAAA   ", "           AA     AA   ", "           AA     AA   ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "             AAAAA     ", "            AAAAAAA    ", "          AA       AA  ")
                    .aisle("             AAAAA     ", "             AAAAA     ", "             AAAAA     ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "            AAAAAAA    ")
                    .where('~', controller(blocks(definition.get())))
                    .where('H', blocks(GTOBlocks.SPEEDING_PIPE.get()))
                    .where('I', blocks(GTOMachines.HEAT_SENSOR.getBlock()))
                    .where('B', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()).or(abilities(IMPORT_FLUIDS).setPreviewCount(2)))
                    .where('E', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()).or(abilities(EXPORT_FLUIDS).setPreviewCount(2)))
                    .where('F', blocks(GTOBlocks.IMPROVED_SUPERCONDUCTOR_COIL.get()))
                    .where('G', blocks(GTOBlocks.CHEMICAL_GRADE_GLASS.get()))
                    .where('D', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('A', blocks(GTOBlocks.REINFORCED_STERILE_WATER_PLANT_CASING.get()))
                    .where('C', frames(GTMaterials.Naquadria))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/plasma_heater_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition HIGH_ENERGY_LASER_PURIFICATION_UNIT = multiblock("high_energy_laser_purification_unit", "高能激光净化装置", HighEnergyLaserPurificationUnitMachine::new)
            .allRotation()
            .tooltipsText("§a净化水等级§r: §f6§r", "§aPurified Water Level§r: §f6§r")
            .tooltipsText("在操作过程中，更换透镜仓内的§b透镜§r", "During operation, replace the §bLens§r in the lens chamber.")
            .tooltipsText("当当前§b透镜§r需要更换时，多方块结构将通过§b透镜§r指示仓输出信号", "When the current §bLens§r needs to be replaced, the multi-block structure will output a signal through the §bLens§r indicator chamber.")
            .tooltipsText("§b透镜§r更换请求将在§66§r到12秒的随机间隔内出现", "§bLens§r replacement requests will occur at random intervals between §66§r and 12 seconds.")
            .tooltipsText("需要在信号输出后的4秒内更换透镜", "The lens must be replaced within 4 seconds of the signal output.")
            .tooltipsText("每次成功更换后运行4秒将成功率提高§410%§r", "Each successful replacement followed by 4 seconds of operation increases the success rate by §410%§r.")
            .tooltipsText("§b透镜§r需求可在GUI内查看，顺序固定", "The requirements for §bLens§r can be viewed in the GUI, in a fixed order.")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o水净化的第六步是识别水中任何残留的负离子，这些离子可能会在未来的晶圆制造中引起电气故障", "§a§oThe sixth step of water purification is identifying any residual anions in the water, which may cause electrical failures in future wafer manufacturing.")
            .tooltipsText("§a§o用不同波长的光子束轰击水，将能量传递给外层电子，使它们从原子中脱离并通过水箱壁，确保水完全电极化", "§a§oBombarding the water with photons of different wavelengths transfers energy to the outer-layer electrons, causing them to detach from the atoms and through the water tank walls, ensuring the water is fully polarized.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("     BBB     ", "     CCC     ", "             ", "             ", "             ", "             ", "             ", "     CCC     ", "     BBB     ")
                    .aisle("   AAAAAAA   ", "   CCDDDCC   ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "   CCAAACC   ", "   AAAAAAA   ")
                    .aisle(" AAAAAAAAAAA ", " CCDD   DDCC ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", " CCAAEEEAACC ", " AAAAAAAAAAA ")
                    .aisle("BAAAAAAAAAAAB", "CDD       DDC", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", "CAAEEEEEEEAAC", "BAAAAAAAAAAAB")
                    .aisle("BAAAAAAAAAAAB", "CD         DC", " D         D ", " D         D ", " D         D ", " D         D ", " D         D ", "CAEEEEEEEEEAC", "BAAAAAFAAAAAB")
                    .aisle("BAAAAAAAAAAAB", "CDD       DDC", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", " DD       DD ", "CAAEEEEEEEAAC", "BAAAAAAAAAAAB")
                    .aisle(" AAAAAAAAAAA ", " CCDD   DDCC ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", "   DD   DD   ", " CCAAEEEAACC ", " AAAAAAAAAAA ")
                    .aisle("   AAAAAAA   ", "   CCDDDCC   ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "     DDD     ", "   CCAAACC   ", "   AAAAAAA   ")
                    .aisle("     B~B     ", "     CCC     ", "             ", "             ", "             ", "             ", "             ", "     CCC     ", "     BBB     ")
                    .where('~', controller(blocks(definition.get())))
                    .where('E', blocks(GTOBlocks.HIGH_ENERGY_ULTRAVIOLET_EMITTER_CASING.get()))
                    .where('F', blocks(GTOMachines.LENS_HOUSING.getBlock()))
                    .where('D', blocks(GTOBlocks.ELECTRON_PERMEABLE_AMPROSIUM_COATED_GLASS.get()))
                    .where('A', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get()))
                    .where('B', blocks(GTOBlocks.NAQUADAH_REINFORCED_PLANT_CASING.get())
                            .or(blocks(GTOMachines.LENS_INDICATOR_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('C', frames(GTMaterials.Neutronium))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/naquadah_reinforced_plant_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition RESIDUAL_DECONTAMINANT_DEGASSER_PURIFICATION_UNIT = multiblock("residual_decontaminant_degasser_purification_unit", "残余污染物脱气净化装置", ResidualDecontaminantDegasserPurificationUnitMachine::new)
            .allRotation()
            .tooltipsText("§a净化水等级§r: §f7§r", "§aPurified Water Level§r: §f7§r")
            .tooltipsText("要成功完成配方，需要根据要求输入材料", "To successfully complete the recipe, materials must be inputted as required.")
            .tooltipsText("操作开始时，脱气控制仓将输出红石信号，机器每秒将消耗全部输入的材料", "At the operation start, the degassing control chamber will output a redstone signal, and the machine will consume all input materials every second.")
            .tooltipsText("红石信号与需求相对应", "The redstone signal corresponds to the demand.")
            .tooltipsText("1, 3, 5, 7, 9：通过§b惰性气体§r进行臭氧曝气", "1, 3, 5, 7, 9: Ozone aeration via §bInert Gases§r")
            .tooltipsText("§610000mB§r§b氦气§r / §68000mB§r§b氖气§r / §66000mB§r§b氩气§r / §64000mB§r§b氪气§r / §62000mB§r§b氙气§r", "§610000mB§r§bHelium§r / §68000mB§r§bNeon§r / §66000mB§r§bArgon§r / §64000mB§r§bKrypton§r / §62000mB§r§bXenon§r")
            .tooltipsText("2, 4, 6, 8, 10：超导去离子", "2, 4, 6, 8, 10: Superconductive deionization")
            .tooltipsText("需要输入1000mB对应IV，LuV，ZPM，UV，UHV的液态超导", "Needs input of 1000mB of liquid superconductors corresponding to IV, LuV, ZPM, UV, UHV.")
            .tooltipsText("11, 13, 15：引力生成差异真空提取", "11, 13, 15: Gravitational Differential Vacuum Extraction")
            .tooltipsText("需要输入§62000mB§r§b液态安普洛§r", "Requires input of §62000mB§r§bLiquid Amprosiums§r.")
            .tooltipsText("12, 14：塞尔多尼安沉淀过程", "12, 14: Seldenian precipitation process")
            .tooltipsText("不输入任何东西", "Do not input anything.")
            .tooltipsText("0：机器过载", "0: Machine overload")
            .tooltipsText("在罕见情况下，机器可能会过载并且不会输出任何控制信号", "In rare situations, the machine may overload and not output any control signals.")
            .tooltipsText("为防止机器损坏，输入§610000mB§r§b液氦§r", "To prevent machine damage, input §610000mB§r§bLiquid Helium§r.")
            .tooltipsText("输入信号未请求的任何流体将始终导致配方失败", "Any liquid not requested by the input signal will always cause the recipe to fail.")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o水净化的倒数第二步，第七步，是一系列不规则的复杂过程，", "§a§oThe penultimate step of water purification, step seven, consists of a series of irregular complex processes,")
            .tooltipsText("§a§o旨在去除前几个步骤的除污剂可能残留的任何残留物，", "§a§oaimed at removing any residues of decontaminants that may linger from the previous steps,")
            .tooltipsText("§a§o根据脱气器检测到的水中物质，它会请求各种材料以完成上述过程", "§a§obased on the materials detected in the water by the degasser, it will request various materials to complete the above processes.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.PLASMA_HEATER_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle
                    .aisle("    AAAAAAAAA    ", "      AAAAABB    ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "                 ", "                 ", "           B     ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "                 ", "                 ", "           B     ", "         BB      ", "        B        ", "      BB         ", "     B           ", "                 ", "      AAAAAA     ", "    AAAAAAAAA    ")
                    .aisle("  AAAAAAAAAAAAA  ", "    AAAAAAAAA    ", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "       DDD       ", "    B   D        ", "                 ", "            B    ", "                 ", "                 ", "                 ", "                 ", "                 ", "    B            ", "                 ", "            B    ", "                 ", "        D        ", "       DDD       ", "      DDDDD      ", "      DDDDD      ", "   BB DDDDD      ", "    AAAAAAAAAB   ", "  AAAAAAAAAAAAA  ")
                    .aisle("  AAAAAAAAAAAAA  ", "   AAAAAAAAAAA   ", "    DD     DD    ", "    DD     DD    ", "    DD     DD    ", "     DD   DD     ", "     DDD DDD     ", "   B  DDDDD  B   ", "       DDD       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "   B         B   ", "       DDD       ", "      DDDDD      ", "     DDD DDD     ", "     DD   DD     ", "    DD     DD    ", "    DD     DD    ", "    DD     DD B  ", "  BAAAAAAAAAAA   ", "  AAAAAAAAAAAAA  ")
                    .aisle(" AAAAAAAAAAAAAAA ", " BAAAAAAAAAAAAA  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D B  ", "    DD     DD    ", "  B  DD   DD     ", "      DDDDD      ", "       DDD       ", "                 ", "                 ", "                 ", "       DDD    B  ", "      DDDDD      ", "  B  DD   DD     ", "    DD     DD    ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "   D         DB  ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle(" AAAAAAAAAAAAAAA ", " BAAAAAAAAAAAAA  ", "   D         D   ", "   D         D   ", "   D         D   ", "   D         D B ", "   D         D   ", "    D       D    ", "    D       D    ", " B   D     D     ", "      D   D      ", "       DDD       ", "                 ", "       DDD     B ", "      D   D      ", "     D     D     ", "    D       D    ", " B  D       D    ", "   D         D   ", "   D         D   ", "   D         D   ", "   D         D B ", "   D         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", " BD           D  ", "  D           D  ", "  D           DB ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", " B   D     D     ", "      DDDDD      ", "       DDD     B ", "      DDDDD      ", "     D     D     ", "    D       D    ", "    D       D    ", "   D         D   ", " B D         D   ", "   D         D   ", "  D           DB ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", " BD           D  ", "  D           D  ", "  D           DB ", "  D           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", " B  D       D    ", "     DD   DD     ", "      DDDDD    B ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", " B D         D   ", "  D           D  ", "  D           DB ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           D  ", " BD           DB ", "  D           D  ", "  D           D  ", "  D           D  ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", " B   DD   DD   B ", "      DD DD      ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "  D           D  ", " BD           DB ", "  D           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           DB ", "  D           D  ", " BD           D  ", "  D           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D  B ", "     DD   DD     ", " B    DDDDD      ", "     DD   DD     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "   D         D B ", "  D           D  ", " BD           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle("CAAAAAAAAAAAAAAAC", " AAAAAAAAAAAAAAA ", "  D           DB ", "  D           D  ", " BD           D  ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", "     D     D   B ", "      DDDDD      ", " B     DDD       ", "      DDDDD      ", "     D     D     ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D B ", "   D         D   ", " BD           D  ", "  D           D  ", "  D           D  ", " AAAAAAAAAAAAAAA ", "AAAAAAAAAAAAAAAAA")
                    .aisle(" AAAAAAAAAAAAAAA ", "  AAAAAAAAAAAAAB ", "   D         D   ", "   D         D   ", "   D         D   ", " B D         D   ", "   D         D   ", "    D       D    ", "    D       D    ", "     D     D   B ", "      D   D      ", "       DDD       ", "                 ", " B     DDD       ", "      D   D      ", "     D     D     ", "    D       D    ", "    D       D  B ", "   D         D   ", "   D         D   ", "   D         D   ", " B D         D   ", "   D         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle(" AAAAAAAAAAAAAAA ", "  AAAAAAAAAAAAAB ", "   D         D   ", "   D         D   ", "   D         D   ", "    D       D    ", "  B D       D    ", "    DD     DD    ", "     DD   DD  B  ", "      DDDDD      ", "       DDD       ", "                 ", "                 ", "                 ", "  B    DDD       ", "      DDDDD      ", "     DD   DD  B  ", "    DD     DD    ", "    D       D    ", "    D       D    ", "   D         D   ", "   D         D   ", "  BD         D   ", "  AAAAAAAAAAAAA  ", " AAAAAAAAAAAAAAA ")
                    .aisle("  AAAAAAAAAAAAA  ", "   AAAAAAAAAAA   ", "    DD     DD    ", "    DD     DD    ", "    DD     DD    ", "     DD   DD     ", "     DDD DDD     ", "   B  DDDDD  B   ", "       DDD       ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "   B         B   ", "       DDD       ", "      DDDDD      ", "     DDD DDD     ", "     DD   DD     ", "    DD     DD    ", "    DD     DD    ", "  B DD     DD    ", "   AAAAAAAAAAAB  ", "  AAAAAAAAAAAAA  ")
                    .aisle("  AAAAAAAAAAAAA  ", "    AAAAAAAAA    ", "      DDDDD      ", "      DDDDD      ", "      DDDDD      ", "       DDD       ", "        D   B    ", "                 ", "    B            ", "                 ", "                 ", "                 ", "                 ", "                 ", "            B    ", "                 ", "    B            ", "                 ", "        D        ", "       DDD       ", "      DDDDD      ", "      DDDDD      ", "      DDDDD BB   ", "   BAAAAAAAAA    ", "  AAAAAAAAAAAAA  ")
                    .aisle("    AAAAAAAAA    ", "    BBAA~AA      ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "                 ", "                 ", "     B           ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "                 ", "                 ", "     B           ", "      BB         ", "        B        ", "         BB      ", "           B     ", "                 ", "      AAAAA      ", "    AAAAAAAAA    ")
                    .aisle
                    .where('~', controller(blocks(definition.get())))
                    .where('D', blocks(GTOBlocks.OMNI_PURPOSE_INFINITY_FUSED_GLASS.get()))
                    .where('A', blocks(GTOBlocks.PLASMA_HEATER_CASING.get()))
                    .where('C', blocks(GTOBlocks.PLASMA_HEATER_CASING.get())
                            .or(blocks(GTOMachines.DEGASSING_CONTROL_HATCH.getBlock()).setExactLimit(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(1).setPreviewCount(1)))
                    .where('B', frames(GTMaterials.Naquadria))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/plasma_heater_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();

    public static final MultiblockMachineDefinition ABSOLUTE_BARYONIC_PERFECTION_PURIFICATION_UNIT = multiblock("absolute_baryonic_perfection_purification_unit", "绝对重子完美净化装置", AbsoluteBaryonicPerfectionPurificationUnitMachine::new)
            .allRotation()
            .tooltipsText("§a净化水等级§r: §f8§r", "§aPurified Water Level§r: §f8§r")
            .tooltipsText("将§b夸克释放催化剂§r放入输入总线中运行", "Put §bQuark Releasing Catalyst§r into the input bus to operate.")
            .tooltipsText("每个配方循环中，不同的两种§b夸克释放催化剂§r的组合将正确识别出§b孤立的夸克§r并完成配方", "Each recipe cycle, different combinations of two §bQuark Releasing Catalysts§r will correctly identify the §bIsolated Quarks§r and complete the recipe.")
            .tooltipsText("每秒消耗输入槽中的所有§b催化剂§r，每消耗一个夸克催化剂还需额外消耗144mB夸克胶子等离子体", "Consumes all §bCatalysts§r in the input slot every second, and for each quark catalyst consumed, an additional 144mB of quark gluon plasma is required.")
            .tooltipsText("如果最近插入的两种§b催化剂§r是正确的组合，则立即输出§b稳定重子物质§r", "If the last two inserted §bCatalysts§r are the correct combination, §bStable Baryonic Matter§r will be output immediately.")
            .tooltipsText("在配方结束时，所有错误插入的§b催化剂§r将返回输出槽", "At the end of the recipe, all incorrectly inserted §bCatalysts§r will return to the output slot.")
            .tooltipsKey("gtocore.machine.clarifier_purification_unit.tooltip.3")
            .tooltipsText("§a§o净化水的最后阶段超越了亚原子粒子，识别出重子内最小的可能缺陷", "§a§oThe final stage of purification transcends subatomic particles, identifying the smallest possible defects within baryons.")
            .tooltipsText("§a§o通过正确识别需要的夸克释放催化剂，装置将激活催化剂，稳定偏离的粒子", "§a§oBy correctly identifying the required Quark Releasing Catalysts, the device will activate the catalysts and stabilize off-kilter particles.")
            .tooltipsText("§a§o这最终不仅会创造出稳定的重子物质，而且最重要的是，创造出绝对完美净化的水", "§a§oThis ultimately creates not just stable baryonic matter, but most importantly, absolutely purified water.")
            .fromSourceTooltips("GTNH")
            .recipeTypes(GTORecipeTypes.WATER_PURIFICATION_PLANT_RECIPES)
            .block(GTOBlocks.QUARK_EXCLUSION_CASING)
            .pattern(definition -> FactoryBlockPattern.start(definition)
                    .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "      AAAAA      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .aisle("                 ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "      AAAAA      ", "      AAAAA      ", " CCCCCAAAAACCCCC ", "      AAAAA      ", "      AAAAA      ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "      DEEED      ", " C    DEFED    C ", "      DEEED      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DDDDD      ", "                 ", "                 ", "                 ", "AAD   AAAAA   DAA", "AAD    EEE    DAA", "AAD    EFE    DAA", "AAD    EEE    DAA", "AAD   AAAAA   DAA", "                 ", "                 ", "                 ", "      DDDDD      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DEEED      ", "       EEE       ", "       EEE       ", "       EEE       ", "AAD   AEEEA   DAA", "AAEEEEE   EEEEEAA", "AAEEEEE F EEEEEAA", "AAEEEEE   EEEEEAA", "AAD   AEEEA   DAA", "       EEE       ", "       EEE       ", "       EEE       ", "      DEEED      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", " CCCCCAAAAACCCCC ", " C    DEFED    C ", " C     EFE     C ", " C     EFE     C ", " C     EFE     C ", "AAD   AEFEA   DAA", "AAEEEEE F EEEEEAA", "AAFFFFFFFFFFFFFAA", "AAEEEEE F EEEEEAA", "AAD   AEFEA   DAA", " C     EFE     C ", " C     EFE     C ", " C     EFE     C ", " C    DEFED    C ", " CCCCCAAAAACCCCC ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DEEED      ", "       EEE       ", "       EEE       ", "       EEE       ", "AAD   AEEEA   DAA", "AAEEEEE   EEEEEAA", "AAEEEEE F EEEEEAA", "AAEEEEE   EEEEEAA", "AAD   AEEEA   DAA", "       EEE       ", "       EEE       ", "       EEE       ", "      DEEED      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("      AAAAA      ", "      AAAAA      ", "      DDDDD      ", "                 ", "                 ", "                 ", "AAD   AAAAA   DAA", "AAD    EEE    DAA", "AAD    EFE    DAA", "AAD    EEE    DAA", "AAD   AAAAA   DAA", "                 ", "                 ", "                 ", "      DDDDD      ", "      AAAAA      ", "      AAAAA      ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "                 ", "       EEE       ", " C     EFE     C ", "       EEE       ", "                 ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "                 ", "                 ", "                 ", "                 ", "      DDDDD      ", "      DEEED      ", " C    DEFED    C ", "      DEEED      ", "      DDDDD      ", "                 ", "                 ", "                 ", "                 ", "        C        ", "                 ")
                    .aisle("                 ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "      AAAAA      ", "      AAAAA      ", " CCCCCAAAAACCCCC ", "      AAAAA      ", "      AAAAA      ", "        C        ", "        C        ", "        C        ", "        C        ", "        C        ", "                 ")
                    .aisle("                 ", "                 ", "                 ", "                 ", "                 ", "                 ", "      BBBBB      ", "      BBBBB      ", "      BB~BB      ", "      BBBBB      ", "      BBBBB      ", "                 ", "                 ", "                 ", "                 ", "                 ", "                 ")
                    .where('~', controller(blocks(definition.get())))
                    .where('C', frames(GTMaterials.NaquadahAlloy))
                    .where('D', blocks(GTOBlocks.DIMENSION_INJECTION_CASING.get()))
                    .where('E', blocks(GTOBlocks.NON_PHOTONIC_MATTER_EXCLUSION_GLASS.get()))
                    .where('F', blocks(GTOBlocks.QUARK_PIPE.get()))
                    .where('A', blocks(GTOBlocks.QUARK_EXCLUSION_CASING.get()))
                    .where('B', blocks(GTOBlocks.QUARK_EXCLUSION_CASING.get())
                            .or(abilities(IMPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(EXPORT_ITEMS).setMaxGlobalLimited(1).setPreviewCount(1))
                            .or(abilities(IMPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1))
                            .or(abilities(EXPORT_FLUIDS).setMaxGlobalLimited(2).setPreviewCount(1)))
                    .where(' ', any())
                    .build())
            .workableCasingRenderer(GTOCore.id("block/casings/quark_exclusion_casing"), GTCEu.id("block/multiblock/large_chemical_reactor"))
            .register();
}
