.aisle("     DDDDD     ", "       D       ", "       D       ", "       D       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "     AAAAA     ")
.aisle("   AAAAAAAAA   ", "     AAAAA     ", "     AAAAA     ", "     AAAAA     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     AAAAA     ", "     AAAAA     ", "     AAAAA     ", "   AAAAAAAAA   ")
.aisle("  AAAAAAAAAAA  ", "   AACCCCCAA   ", "   AACCCCCAA   ", "   AA     AA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AA     AA   ", "   AACCCCCAA   ", "   AACCCCCAA   ", "  AAAAAAAAAAA  ")
.aisle(" AAAAAAAAAAAAA ", "  ACCCEEECCCA  ", "  ACCC   CCCA  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  ACCC   CCCA  ", "  ACCCEEECCCA  ", " AAAAAAAAAAAAA ")
.aisle(" AAAAAAAAAAAAA ", "  ACFFFFFFFCA  ", "  AC       CA  ", "  A         A  ", "  B   CCC   B  ", "  B         B  ", "  B         B  ", "  B   CCC   B  ", "  B         B  ", "  B         B  ", "  B   CCC   B  ", "  B         B  ", "  B         B  ", "  B   CCC   B  ", "  B         B  ", "  B         B  ", "  B   CCC   B  ", "  A         A  ", "  AC       CA  ", "  ACFFFFFFFCA  ", " AAAAAAAAAAAAA ")
.aisle("AAAAAAAAAAAAAAA", " ACCFFFFFFFCCA ", " ACC       CCA ", " A           A ", " B   C   C   B ", " B           B ", " B           B ", " B   C   C   B ", " B           B ", " B           B ", " B   C   C   B ", " B           B ", " B           B ", " B   C   C   B ", " B           B ", " B           B ", " B   C   C   B ", " A           A ", " ACC       CCA ", " ACCFFFFFFFCCA ", "AAAAADDDDDAAAAA")
.aisle("AAAAAAAAAAAAAAA", " ACEFFFCFFFECA ", " AC   FCF   CA ", " A    FCF    A ", " B  C FCF C  B ", " B    FCF    B ", " B    FCF    B ", " B  C FCF C  B ", " B    FCF    B ", " B    FCF    B ", " B  C FCF C  B ", " B    FCF    B ", " B    FCF    B ", " B  C FCF C  B ", " B    FCF    B ", " B    FCF    B ", " B  C FCF C  B ", " A    FCF    A ", " AC   FCF   CA ", " ACEFFFCFFFECA ", "AAAAADDDDDAAAAA")
.aisle("AAAAAAAAAAAAAAA", "AACEFFCHCFFECAA", "AAC   CHC   CAA", "AA    CHC    AA", "AB  C CHC C  BA", "AB    CHC    BA", "AB    CHC    BA", "AB  C CHC C  BA", "AB    CHC    BA", "AB    CHC    BA", "AB  C CHC C  BA", "AB    CHC    BA", "AB    CHC    BA", "AB  C CHC C  BA", "AB    CHC    BA", "AB    CHC    BA", "AB  C CHC C  BA", "AA    CHC    AA", "AAC   CHC   CAA", "AACEFFCHCFFECAA", "AAAAADDDDDAAAAA")
.aisle("AAAAAAAAAAAAAAA", " ACEFFFCFFFECA ", " AC   FCF   CA ", " A    FCF    A ", " B  C FCF C  B ", " B    FCF    B ", " B    FCF    B ", " B  C FCF C  B ", " B    FCF    B ", " B    FCF    B ", " B  C FCF C  B ", " B    FCF    B ", " B    FCF    B ", " B  C FCF C  B ", " B    FCF    B ", " B    FCF    B ", " B  C FCF C  B ", " A    FCF    A ", " AC   FCF   CA ", " ACEFFFCFFFECA ", "AAAAADDDDDAAAAA")
.aisle("AAAAAAAAAAAAAAA", " ACCFFFFFFFCCA ", " ACC       CCA ", " A           A ", " B   C   C   B ", " B           B ", " B           B ", " B   C   C   B ", " B           B ", " B           B ", " B   C   C   B ", " B           B ", " B           B ", " B   C   C   B ", " B           B ", " B           B ", " B   C   C   B ", " A           A ", " ACC       CCA ", " ACCFFFFFFFCCA ", "AAAAADDDDDAAAAA")
.aisle(" AAAAAAAAAAAAA ", "  ACFFFFFFFCA  ", "  AC       CA  ", "  A         A  ", "  B   CCC   B  ", "  B         B  ", "  B         B  ", "  B   CCC   B  ", "  B         B  ", "  B         B  ", "  B   CCC   B  ", "  B         B  ", "  B         B  ", "  B   CCC   B  ", "  B         B  ", "  B         B  ", "  B   CCC   B  ", "  A         A  ", "  AC       CA  ", "  ACFFFFFFFCA  ", " AAAAAAAAAAAAA ")
.aisle(" AAAAAAAAAAAAA ", "  ACCCEEECCCA  ", "  ACCC   CCCA  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  A         A  ", "  ACCC   CCCA  ", "  ACCCEEECCCA  ", " AAAAAAAAAAAAA ")
.aisle("  AAAAAAAAAAA  ", "   AACCCCCAA   ", "   AACCCCCAA   ", "   AA     AA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AB     BA   ", "   AA     AA   ", "   AACCCCCAA   ", "   AACCCCCAA   ", "  AAAAAAAAAAA  ")
.aisle("   DDAAAAADD   ", "     AAAAA     ", "     AAAAA     ", "     AAAAA     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     BBBBB     ", "     AAAAA     ", "     AAAAA     ", "     AAAAA     ", "   AAAAAAAAA   ")
.aisle("     DDGDD     ", "       D       ", "       D       ", "       D       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "       A       ", "     AAAAA     ")